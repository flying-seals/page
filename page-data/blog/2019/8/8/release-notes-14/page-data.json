{"componentChunkName":"component---src-views-blog-single-index-tsx","path":"/blog/2019/8/8/release-notes-14","webpackCompilationHash":"aefb7e842b40c338951f","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/8/8/release-notes-14","post":{"id":"2651292f-5fc3-552d-97a6-0745e2405620","rawMarkdownBody":"\nStraight from Indonesian Jakarta, we sail to Japan. Let's stop in one of its beautiful temples and ponder over what the 1.4 Kyoto Release has to offer. Being hard-working as the Japanese, Kyma busy bees introduced many improvements in their components, including the Application Connector, Console, Kiali, and Headless CMS. Read on to find out what has changed in Kyma since 1.3.\n\n<!-- overview -->\n\nThe highlights of Kyma 1.4 Kyoto include:\n\n- [API Gateway with an OAuth2 server](#api-gateway) - We integrated Kyma with an OAuth2 authorization server solution from ORY.\n- [Application Connector](#application-connector) - We upgraded Istio to version 1.2.2.\n- [Console UI without system Namespaces](#system-namespaces-hidden-in-the-console-ui) - We hid all system Namespaces built in a Kyma cluster so that you could find your Namespaces quicker.\n- [Documentation component](#documentation-component) - We consolidated different documentation views into one Documentation component.\n- [Conversion and validation in the Headless CMS](#conversion-and-validation-service-for-the-asyncapi-2-0-specs-in-the-headless-cms) - We introduced the conversion and validation service for AsyncAPI 2.0 specifications.\n- [Kiali](#kiali) - We upgraded Kiali to the latest stable version and enabled Single Sign-On.\n- [Bundles renamed to addons](#bundles-renamed-to-addons) - We renamed bundles to addons.\n\nSee the overview of all changes in this release:\n\n- [Backup](#backup) - Simplified Velero installation, a new implementation of the backup and restore functionalities, backup available on Azure, and backup tests fixed\n- [Core and Supporting](#parameters-object-in-the-headless-cms-supported-in-the-console-ui) - Relative links disabled in Markdown specs\n- [JSON schema](#json-schema) - Guidelines for creating JSON schemas for Kyma components\n- [Knative](#knative) - Knative Eventing and Serving update\n- [Kyma CLI](#kyma-cli) - Kyma CLI enriched with the `test` command and inline documentation\n- [Service Management](#service-management) - New GCP Service Broker addon and Helm Broker support for addons exposed by Git\n\nRead about known issues for [Velero](#known-issues).\n\n> **CAUTION:** Before you upgrade to Kyma 1.4, read the [Migration Guide](https://github.com/kyma-project/kyma/blob/release-1.4/docs/migration-guides/1.3-1.4.md) which describes necessary manual actions required by the Google Cloud Platform (GCP) Service Broker addon.\n\n---\n\n## API Gateway\n\nMaking friends in the open-source world is natural. Collaboration with our friend, ORY, in the 1.4 release bore fruit, and Kyma got its very own OAuth2 server. Our new component consists of three elements from ORY: Hydra OAuth2 server, Oathkeeper proxy, and Oathkeeper Maester controller. By default, the solution is now installed with every Kyma deployment. We worked closely with ORY developers to make their solution Kubernetes-native. We achieved that by creating the Maester controller and contributing it to the ORY stack. This controller allows for convenient management of Access Rules through custom resources. Check out and test the Kyma-ORY integration and follow its development closely as we're still in the development phase. Read [this](https://kyma-project.io/blog/2019/7/31/kyma-collaboration-with-ory/) blog post to see where we're heading. Also, read the [**Security**](https://kyma-project.io/docs/1.4/components/security/#details-oauth2-and-openid-connect-server) documentation to get more details on the current state of the integration.\n\n## Application Connector\n\n### Application Registry updated to Istio 1.2.2  \n\nAs you already know, the Application Connector uses Istio to ensure a high level of security. From now on, the Application Registry benefits from features introduced in Istio 1.2 to control access to the Application Gateway.\n\n## Backup\n\n### Velero upgraded to 1.0.0\n\nThe backup component, Velero, is now upgraded to its latest stable version 1.0.0.\n\n### Installation and setup\n\nWe improved and simplified the installation and setup process for Velero. Read the [documentation](https://kyma-project.io/docs/1.4/components/backup/#installation-install-velero) and see how easy it is now to set up Velero either before or after installing Kyma.\n\n### Creating backups\n\nWe implemented the backup functionality from scratch to guarantee that all resources in a cluster are properly backed-up. The documentation was updated to reflect the changes we made.\n\n### Restoring from a backup\n\nAlso, we have a brand-new restore functionality. It guarantees that a backed-up cluster can be fully recovered. The documentation was updated to reflect the changes we made.\n\n### Backup tests\n\nAll backup and restore integration tests are fixed and pass.\n\n### Backups on Azure\n\nThe backup functionality was successfully introduced on Azure (AKS). Follow the steps from the [installation](https://kyma-project.io/docs/1.4/components/backup/#installation-install-velero) guide to set up Velero on Azure.\n\n### Plugins\n\nWe deleted all Velero plugins as they are not needed anymore.\n\n### Known Issues\n\nVelero returns an error during restoring CRDs. The temporary workaround is to divide the restore process into 2 steps:\n\n1. Restore only CRDs.\n2. Restore the remaining part of the cluster.\n\nIt may also happen that the restore process fails to complete. It is caused by a bug in Velero. In such a case, retry to restore your cluster.\n\n## Console\n\n### System Namespaces hidden in the Console UI\n\nSo far, once you entered a Kubernetes cluster you could probably see quite a bunch of Namespaces. These were both built-in Namespaces and those that came with modules you installed. They were not the ones a Kyma user wanted to work with. To have a better user experience, system Namespaces are now hidden by default. As a result, you can easily find the Namespaces that you work with. To see the system Namespaces, go to the **General Settings** view and toggle the **Show System Namespaces** option under **Namespace settings**.\n\n![Namespace settings](./namespace-settings.png)\n\n## Core and Supporting\n\n### Documentation component\n\nThe Kyma project puts a lot of effort into documentation and processes around it, not only with respect to [kyma-project.io](https://kyma-project.io/docs). As you know, you can also access Kyma documentation from the Console UI. In Kyma, we offer features that you can use to document your own services - that does not only relate to static docs provided with Markdown specs but also other formats, such as OpenAPI, AsyncAPI, and OData.\n\nIt basically means that at the moment we have 4 different views that render documentation, and you can expect more of them to come in the future releases. We decided that it was about time to consolidate our experience in this area into one component.\n\n- Documentation component project\n\nAs mentioned in the [previous release notes](https://kyma-project.io/blog/2019/7/12/release-notes-13/#documentation-component), we have one single project in which we maintain the Documentation component and just reuse it in different applications. We already introduced it in the Console UI Documentation view in the last release. In the 1.4 release, it was integrated into the Console UI Catalog and Instances views. In a few days, you will see this component being used on [kyma-project.io](https://kyma-project.io/).\n\n- Improved look and feel\n\nWhile working on the Documentation component, we took a closer look at the styling of different specs and decided to improve and unify them. The style is now unified in Markdown, OpenAPI, and OData. In the next release, we would like to do the same with AsyncAPI.  \n\nThis is the new Fiori 3-like design for the OpenAPI spec:\n\n![OpenAPI spec](./openAPI-spec.png)\n\nThis is the new Fiori 3-like design for the Markdown spec with the new and much better approach to navigation with the right-hand side navigation:\n\n![Markdown spec](./markdown-spec.png)\n\nThis is the new Fiori 3-like design for the OData spec:\n\n![OData spec](./odata-spec.png)\n\n### Conversion and validation service for the AsyncAPI 2.0 specs in the Headless CMS\n\nEver since we introduced Kyma and its Application Connector component, we have been getting reports that you could easily register an application with the AsyncAPI spec but the spec did not render successfully in the UI. The reason was each and every time the same: the spec was not valid. It wasn't rendered because the validation only worked in the UI.\n\nWe decided to finally solve the problem and introduce a service that validates the AsyncAPI spec before it is accepted by the Headless CMS. Because integrating the service with Kyma will take some time, we decided to introduce the validation already for the latest version of the AsyncAPI specification. As a result, the service we introduced not only handles validation of the spec but also automatically converts the spec into the latest AsyncAPI version. For example, if you register the spec in version 1.0, 1.1, or 1.2, the service converts it to version 2.0.0-rc1.\n\nThis functionality is disabled by default, and the service is not provisioned or configured because we do not have the UI support for AsyncAPI 2.0 yet. To enable the validation service and play with it, override the following value:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cms-asyncapi-overrides\n  namespace: kyma-installer\n  labels:\n    installer: overrides\n    component: cms\n    kyma-project.io/installation: \"\"\ndata:\n  global.cmsAsyncAPIService.enabled: \"true\"\n```\n\nAfter you override the value, you can create a DocsTopic resource using [this](https://kyma-project.io/docs/1.4/components/headless-cms/#custom-resource-docs-topic-sample-custom-resource) example. The example contains a reference to the official Slack AsyncAPI spec provided in version 1.2. After you go through the steps for the happy path, create a new DocsTopic using an invalid spec. You can use the [invalid AsyncAPI spec](https://raw.githubusercontent.com/kyma-project/kyma/release-1.4/components/cms-services/pkg/endpoint/asyncapi/v1/testdata/invalid.json) we used for testing.\n\n### Parameters object in the Headless CMS supported in the Console UI\n\nIn the previous release, we introduced a new field in the DocsTopic CR that allows you to provide custom parameters that can modify the rendering options when supported by the presentation layer. After getting your feedback, we renamed the field from **metadata** to **parameters** and enabled its support in the Console UI.\n\nFrom now on, once you provide the **spec.sources.parameters.disableRelativeLinks** parameter for a Markdown source, the UI disables relative links and informs about it in a tooltip. This applies to a use case in which you render Markdown documentation that you do not own and that has some broken relative links. This is the only use case we support so far, but if you see other applications, please let us know. You can contact us on Slack or submit a GitHub issue.\n\n## JSON Schema\n\n### Definition and guidelines\n\nWe encourage you to read brand-new [documentation](https://github.com/kyma-project/community/blob/master/guidelines/technical-guidelines/05-helm.md#defining-metadata-schema-for-kyma-charts) defining standards for creating JSON schemas for Kyma components.\n\n### Governance\n\nWe also added a governance CI Job that checks if all components have a JSON schema file with the mandatory properties.\n\n## Kiali\n\n### Installation\n\nBy default, Kiali is now enabled together with monitoring.\n\n### Upgrade\n\nKiali was upgraded to version 1.1.0.\n\n### Console integration\n\nFrom now on, you can access Kiali from the Kyma Console. If you click the **Service Mesh** section on the left navigation menu, the link redirects you to the Kiali page.\n\n![Kiali in the Console UI](./kiali-console-ui.png)\n\n### Authentication\n\nWe added an integrated authentication strategy to the Kiali dashboard to enable Single-Sign-On based on the Dex configuration.\n\n### Documentation\n\n[Kiali](https://kyma-project.io/docs/1.4/components/kiali) is now documented in the Kyma Docs.\n\n## Knative\n\n### Knative Eventing updated to 0.6\n\nKnative Eventing chart, which is the foundational layer for Kyma Event Bus, was updated to version 0.6. Read more about the update [here](https://github.com/knative/eventing/releases/tag/v0.6.0).\n\n### Knative Serving updated to 0.6.1\n\nKnative Serving chart, which by default is installed with Kyma, was also updated but to version 0.6.1. Learn more about the update details [here](https://github.com/knative/serving/releases/tag/v0.6.1).  \n\n## Kyma CLI\n\n### Test command\n\nFrom this release, the Octopus test suites can be managed fully using the Kyma CLI. You can easily run, list, check, delete, and watch both test suites and test definitions on your cluster.\n\n### Inline documentation\n\nWe improved the documentation output of the Kyma CLI. The usage, help and flag documentation, and error messages are more user-friendly now.\n\n## Service Management\n\n### Bundles renamed to addons\n\nStarting from the 1.4 release, all bundles are renamed to addons to better reflect the functionality they provide. This applies to all occurrences, including the names of repositories. See [this](https://github.com/kyma-project/kyma/issues/4783) issue for more information.\n\n### Preview of the new GCP Service Broker addon\n\nAs the Google Cloud Platform (GCP) Service Broker is being deprecated by Google, we have removed this addon from our offering. Instead, we added the preview mode of a new GCP Service Broker which you can already integrate with Kyma. See [this](https://github.com/kyma-project/addons/issues/94) issue for more information. To learn how to switch to the new addon when upgrading Kyma, read the [migration guide](https://github.com/kyma-project/kyma/blob/master/docs/migration-guides/1.3-1.4.md).\n\n### Helm Broker supports addons exposed by Git\n\nStarting from this release, you can expose your addons not only through HTTPS serves but also using Git. To do so, simply place your addons directly in a Git directory and follow the necessary addon repository structure. Read [this](https://kyma-project.io/docs/1.4/components/helm-broker/#details-create-addons-repository) document to learn more.\n\n## Service Mesh\n\nWith great power comes great... resource consumption? Not anymore! Starting with this release the components of the Service Mesh and Security areas, including the API Controller, the API Server Proxy, Dex, the IAM Kubeconfig Service, Istio sidecars, and Istio Management Plane deployments consume significantly fewer resources, helping you to stay within the limits of your license's resource quotas. See [this](https://github.com/kyma-project/kyma/issues/4855) issue for more details.\n","excerpt":"Straight from Indonesian Jakarta, we sail to Japan. Let's stop in one of its beautiful temples and ponder over what the 1.4 Kyoto Release has to offer. Being hard-working as the Japanese, Kyma busy bees introduced many improvements in their components, including the Application Connector, Console, Kiali, and Headless CMS. Read on to find out what has changed in Kyma since 1.3.","fields":{"slug":"/blog/2019/8/8/release-notes-14","assetsPath":"/assets/blog-posts/2019-08-08-release-notes-1.4/","date":"August 08, 2019","postInfo":{"fileName":"release-notes-14","year":2019,"month":8,"day":8}},"frontmatter":{"title":"Kyma 1.4 Kyoto","author":{"name":"Malgorzata Swieca, Technical Writer @Kyma"},"tags":["release-notes"],"type":"release","releaseTag":"1.4.0","redirectFrom":["/blog/release-notes-14"]}},"assetsPath":"/assets/blog-posts/2019-08-08-release-notes-1.4/","previous":{"id":"76835b42-7716-516a-b7d2-4e40645e1ef5","rawMarkdownBody":"\nWorking with others is always a great opportunity to learn and grow, so we simply couldn't say \"no\" to working with the team at [Ory](https://www.ory.sh/) when such opportunity arose. Making Kyma even more secure, gaining new experience, working with awesome people, and contributing to another project at the same time? Read on to find out how we're joining forces with Ory to bring an OAuth server to Kyma and contribute a completely new component to the lair of Hydra and its Oathkeeper. \n\n<!-- overview -->\n\nThe Kyma API Gateway enables exposing applications to the world outside of the cluster, at the same time allowing to secure access to the exposed application with JWT authentication. The implemented authentication mechanism allows to secure entire services or only selected resource paths within those services. You can read all about this in our [documentation](https://kyma-project.io/docs/components/api-gateway/). \n\nEnhancing security with authorization mechanisms has always been a part of the API Gateway vision in Kyma. Currently, basic authorization needs are fulfilled thanks to Istio and its implementation of [RBAC](https://istio.io/docs/reference/config/authorization/istio.rbac.v1alpha1/) which allows controlling access to services in the cluster. Although you can apply authorization to the requests that the exposed services receive, there's no way to authorize the requested operation based on, for example, scopes. \nThis is a pretty significant gap in our security scheme, especially when you consider communication between 3rd party applications and the applications living in Kyma and exposed through the API Gateway. \n\nOne of the authorization strategies we are going to implement is through an OAuth2 server. Among many ready-to-use solutions available on the market, the one created by [Ory](https://ory.sh) caught our attention specifically. This solution comes with a full-fledged resource access authorization ecosystem, including an OAuth2 server and an OAuth reverse proxy. Additionally, this solution is a very popular, respected project with a high adoption rate and many stargazers on GitHub.\n\nTo investigate how the adoption of the Ory ecosystem would work with and potentially extend the Kyma API Gateway, we worked on a POC that used the Ory OAuth2 server - Hydra and the reverse proxy - Oathkeeper and focused on two OAuth flows: implicit grant and client credentials. The results were satisfactory and are documented in the form of examples available to inspect [here](https://github.com/kyma-incubator/examples/tree/master/ory-hydra/scenarios).\n\nBased on the positive results of the POC, we decided to focus our efforts on integrating Kyma with the Ory ecosystem. To facilitate this integration, we sat down with the developers from Ory during a workshop that helped to work out a plan of how to integrate our solutions and how the Kyma team will contribute to Ory's solution. \n\nSo how's the solution of Ory going to be used in Kyma? In the target setup, Kyma deployments will come with 3 Ory components: the Hydra OAuth2 server, the Oathkeeper reverse proxy that secures the exposed service, and the Oathkeeper Controller, which manages access rules for Oathkeeper. Kyma users will register their own OAuth clients in the Console UI and define access rules for their APIs. Thanks to that, every application will be able to get its own OAuth token and communicate with the exposed API. \n\n![Oauth2 flow in API Gateway](./oathkeeper-gateway.svg)\n\nThe role of the Kyma team in this setup is very clear - we are to create the Oathkeeper controller component and contribute it to Ory's ecosystem. \nAt the moment, the Oathkeeper is not designed to be used natively in Kubernetes as the configuration can be provided to this component only through an external server that provides the config, or directly through a file. Feeding the configuration to Oathkeeper in Kubernetes-native way using [Custom Resource Definitions (CRDs)](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions) is not supported. The Oathkeeper Controller is going to address this gap. Kubernetes users will be able to create custom resources that represent access rules for their services. The Controller will then pass this data to Oathkeeper in a format which it can work with without any additional modification.\n\n![Register access rule](./controller.svg)\n\nThis collaboration is going to bring great value to Kyma and Ory (Kyma supports OAuth2, Ory supports Kubernetes CRDs), and we're extremely excited that we're sailing the seas with the guys from Ory. Be sure to check out their solutions and follow our blog and releases to see how this adventure ends. \n","excerpt":"Working with others is always a great opportunity to learn and grow, so we simply couldn't say \"no\" to working with the team at Ory when such opportunity arose. Making Kyma even more secure, gaining new experience, working with awesome people, and contributing to another project at the same time? Read on to find out how we're joining forces with Ory to bring an OAuth server to Kyma and contribute a completely new component to the lair of Hydra and its Oathkeeper.","fields":{"slug":"/blog/2019/7/31/kyma-collaboration-with-ory","assetsPath":"/assets/blog-posts/2019-07-31-kyma-collaboration-with-ory/","date":"July 31, 2019","postInfo":{"fileName":"kyma-collaboration-with-ory","year":2019,"month":7,"day":31}},"frontmatter":{"title":"Joining forces with Ory","author":{"name":"Piotr Mścichowski, Capability Owner @Kyma"},"tags":["ory","contribution","service-mesh"],"type":null,"releaseTag":null,"redirectFrom":null}},"next":{"id":"9eedcaaa-e910-54a9-9aa7-028dd2be01d2","rawMarkdownBody":"\nOur next, sunny stop - Lima may falsely suggest that the Kyma crew eased off a bit in the last couple of weeks and got carried away by the relaxing summer atmosphere. Nothing further from the truth. Kyma 1.5 Lima brings quite a few interesting changes. Above all, we ensured that all Kyma components are compatible with Kubernetes 1.15. We also provided Namespace-level addons configurations and added the experimental function controller module that is based on Knative. Read the full release notes for the complete list of improvements offered by the 1.5 release.\n\n<!-- overview -->\n\nSee the overview of all changes in this release:\n- [API Gateway](#api-gateway) - Kubernetes-native client registration with the Hydra Maester controller, new API Gateway controller in the Incubator\n- [Application Connector](#application-connector) - Fix for invalid arguments order in the Connector Service header parser\n- [Console](#console) - Namespace-level addons configurations\n- [Documentation](#documentation) - Improved monitoring tutorials, Telepresence guide, troubleshooting guides for the Application Connector\n- [Service Management](#service-management) - Separate repository for the Helm Broker, authentication methods support for addons configurations\n- [Serverless](#serverless) - New experimental function controller module based on Knative\n- [Service Mesh](#service-mesh) - Istio updated to 1.2.4\n\nIn the 1.5 release, we made sure that Kyma is compatible with Kubernetes 1.15. Nevertheless, it is not supported by automated testing pipelines. The reason is that our testing pipelines currently test Kyma on GKE and AKS, and these managed Kubernetes offerings do not support Kubernetes 1.14 and 1.15. That is why, we keep our automated testing consistent with Kubernetes 1.13 for now, including testing on Minikube. Still, we performed manual tests that confirmed Kyma also works on Kubernetes 1.15.\n\n> **CAUTION:** When upgrading from 1.4 to 1.5, you will experience temporary unavailability of the Connector Service. It results from changing the API group of the Connector Service Deployment and adding to it the **selector** field that was not required in previous Kubernetes versions.\n\n---\n\n## API Gateway\n\n### Kubernetes-native client registration with the Hydra Maester controller\n\nOur collaboration with ORY that started in the previous release continues with new contribution and functionality. This time around, we created the Hydra Maester controller which makes registering OAuth2 clients a fully Kubernetes-native process. The controller listens for instances of the `oauth2clients.hydra.ory.sh` custom resource (CR) and registers clients through the Hydra API using the data contained in the CR. Credentials of the registered client are then saved in a Kubernetes Secret. Follow [this](https://github.com/ory/hydra-maester) link to visit the ORY Hydra Maester repository and read [this](https://kyma-project.io/docs/1.5/components/security/#details-o-auth2-and-open-id-connect-server) document to learn more about the ORY stack implementation in Kyma.\n\n### New API Gateway controller in the Incubator\n\nAnother fruit of the Kyma-ORY collaboration, the API Gateway controller (name subject to change!), is available in the Kyma Incubator. This controller listens for instances of the `gate.gateway.kyma-project.io` CR, manages Istio authentication policies and Oathkeeper rules, and allows you to expose services secured with JWT or OAuth access tokens. Even though this controller is still in the early stages of development and cannot replace the existing Kyma API Gateway, you can install it with your Kyma deployment by uncommenting the appropriate entry on the component list before installing Kyma 1.5. Go to [this](https://github.com/kyma-incubator/api-gateway) Incubator repository to learn more about the controller and read [this](https://kyma-project.io/docs/1.5/root/kyma/#configuration-custom-component-installation) document to learn more about installing selected components.\n\n## Application Connector\n\n### Fix for invalid arguments order in the Connector Service header parser\n\nPrevious versions of the header parser incorrectly compared the certificate subject's `locality` to `province` defined in the component's configuration, and certificate subject's `province` to the `locality` environment variable from the configuration. This could cause issues. Thanks to the fix available with Kyma 1.5, the header parser now properly compares the subject's `locality` and `province` to their corresponding environment variables.\n\n> **NOTE:** Due to the nature of this fix, you may have to generate new certificates for the connected Applications as a part of the upgrade process.\n\n## Console\n\n### Addons configurations on the Namespace level  \n\nIn previous Kyma versions, it was only possible to configure cluster-wide addons. It meant that if the cluster administrator enabled a new addon, it automatically became available for everyone with access to this Kyma runtime. Starting with the 1.5 version, you can apply addons configurations in the scope of a single Namespace. This gives cluster administrators more control over integration options and resource consumption.\n\n![Addons configuration](./addons-configuration.png)\n\n## Documentation\n\n### Improved monitoring tutorials\n\nBased on the existing [`monitoring-custom-metrics`](https://github.com/kyma-project/examples/tree/master/monitoring-custom-metrics) Kyma example and its `cpu_temperature_celsius` custom metric, we have created unified monitoring tutorials. Thanks to them you can see how Kyma applies monitoring tools to manage application metrics. More specifically, these tutorials show how you can observe the custom metric's changing values, create a Grafana dashboard for the metric, and set up a corresponding alerting rule for it.\n\nFollow these links to see the improved monitoring tutorials:\n- [Observe application metrics](https://kyma-project.io/docs/1.5/components/monitoring/#tutorials-observe-application-metrics)\n- [Create a Grafana dashboard](https://kyma-project.io/docs/1.5/components/monitoring/#tutorials-create-a-grafana-dashboard)\n- [Define alerting rules](https://kyma-project.io/docs/1.5/components/monitoring/#tutorials-define-alerting-rules)\n\n### Telepresence guide\n\nWe know how difficult of a task developing and debugging locally can be. That is why we created a general guide for local development with Telepresence to make your work faster and your workflow smoother. Check this [link](https://kyma-project.io/community/guidelines/technicalities#using-telepresence-for-local-kyma-development-using-telepresence-for-local-kyma-development) for details.\n\n### Troubleshooting guides for the Application Connector\n\nWe provided a set of [troubleshooting guides](https://kyma-project.io/docs/1.5/components/application-connector/#troubleshooting-troubleshooting) that will help you to resolve the most common issues you may encounter when interacting with such components as the Application Gateway, Application Registry, and Connector Service.\n\n## Service Management\n\n### Separate repository for the Helm Broker\n\nThe Helm Broker now has its own [separate repository](https://github.com/kyma-project/helm-broker) in the `kyma-project` organization. We have not changed the location of the related documentation so you can still read about the Helm Broker [here](https://kyma-project.io/docs/components/helm-broker/).\n\n### Support authentication methods for addons configurations\n\nStarting from the 1.5 release, we support fetching addons from repositories that require authentication. You can now pass credentials in a secure way using templates in your repository's URL. For more information, read [this](https://kyma-project.io/docs/1.5/components/helm-broker/#details-create-addons-repository-authorization) document.  \n\n## Serverless\n\n### Experimental function controller module\n\nAs you know, Kyma runs serverless functions using Kubeless. We now added the Knative function controller to Kyma as an experimental feature to provide a Knative-based alternative for serverless functions. Read more about the controller [here](https://github.com/kyma-project/kyma/tree/master/components/function-controller).\n\n## Service Mesh\n\n### Istio updated to 1.2.4\n\nThe new release comes with Istio updated to 1.2.4 which fixes several security vulnerabilities identified by Istio. For more details, read [this](https://istio.io/about/notes/1.2.4/) document.\n","excerpt":"Our next, sunny stop - Lima may falsely suggest that the Kyma crew eased off a bit in the last couple of weeks and got carried away by the relaxing summer atmosphere. Nothing further from the truth. Kyma 1.5 Lima brings quite a few interesting changes. Above all, we ensured that all Kyma components are compatible with Kubernetes 1.15. We also provided Namespace-level addons configurations and added the experimental function controller module that is based on Knative. Read the full release notes for the complete list of improvements offered by the 1.5 release.","fields":{"slug":"/blog/2019/9/9/release-notes-15","assetsPath":"/assets/blog-posts/2019-09-09-release-notes-1.5/","date":"September 09, 2019","postInfo":{"fileName":"release-notes-15","year":2019,"month":9,"day":9}},"frontmatter":{"title":"Kyma 1.5 Lima","author":{"name":"Karolina Zydek, Technical Writer @Kyma"},"tags":["release-notes"],"type":"release","releaseTag":"1.5.0","redirectFrom":["/blog/release-notes-15"]}},"slidesBanner":{"bannerDuration":5000,"slides":[{"text":"Don't miss the session by Piotr Kopczynski at Helm Summit on September 11 at 15:47.","url":"https://helmsummit2019.sched.com/event/S8sS","startDate":"09/09/2019","endDate":"12/09/2019"}]},"locale":"en"}}}