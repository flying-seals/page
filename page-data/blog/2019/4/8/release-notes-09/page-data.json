{"componentChunkName":"component---src-views-blog-single-index-tsx","path":"/blog/2019/4/8/release-notes-09","webpackCompilationHash":"aefb7e842b40c338951f","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/4/8/release-notes-09","post":{"id":"9d20dfa9-fa04-53ac-8d31-e4214dc280fb","rawMarkdownBody":"\nThe 0.9 release comes with many updates and improvements, as well as some brand new features that make the Kyma experience even smoother. The Kyma-Knative integration has reached its peak and from this release, Knative Eventing is the default eventing mechanism. You can now install Kyma on GKE and AKS clusters using the default DNS solution provided by `xip.io`. Among many updates and improvements, we developed a new testing framework and updated the entire Monitoring stack. Last but not least, we introduced a brand new component for storing and managing content - the Headless CMS.\n\n<!-- overview -->\n\nThe highlights of Kyma 0.9 Florence include:\n\n- [Knative-based eventing by default](#kyma-with-knative-eventing) - The eventing mechanism is now based on Knative by default.\n- [Xip.io wildcard as the default DNS solution](#installation) - We integrated the `xip.io` wildcard DNS as the default DNS solution.\n- [Headless CMS component introduced for the Console UI](#headless-cms) - We introduced the Headless CMS component that allows you to store and manage content, and expose it through an API.\n- [Updated Monitoring stack version](#monitoring-stack-version-update) - We updated the entire Monitoring stack.\n- [Improved upgrade process](#test-runner-for-the-kyma-upgrade) - We developed a testing framework that automates checking the state of Kyma components after the upgrade.\n\n\nSee the overview of all changes in this release:\n\n- [Application Connector](#application-connector) - Connector Service enhancements and extensions\n- [Console](#console) - Console views that display documentation use the new Headless CMS\n- [Core and Supporting](#core-and-supporting) - Kyma Headless CMS as the default solution for handling documentation\n- [Eventing](#eventing) - Knative Eventing enabled by default, improved security, alerting and monitoring added\n- [Installation](#installation) - `Xip.io` wildcard as the default DNS solution, test runner for the Kyma upgrade\n- [Monitoring](#monitoring) - Monitoring stack upgraded to the latest version\n- [Security](#security) - TLS in Tiller, external bundles repositories with TLS in the Helm Broker, Istio with mutual TLS for the Service Catalog and all Service Brokers\n- [Service Mesh](#service-mesh) - Upgrade to Istio 1.1\n\n---\n\n## Application Connector\n\n> **CAUTION:** To ensure the persistence of API services specifications, run the migration script to move successfully from v0.8 to v0.9. Read the [Migration Guide](https://github.com/kyma-project/kyma/blob/release-0.9/docs/migration-guides/0.8-0.9.md) for details.\n\n### Application Registry API can fetch generated client certificates\n\nWe extended the Application Registry API with the possibility to fetch the generated client certificates. As soon as you register an API secured with the client certificate verification as a security mechanism, you can read this certificate with our API. Read [this](https://kyma-project.io/docs/0.9/components/application-connector/#tutorials-register-a-secured-api) document for more information.\n\n### Apply details for the tenant and group name\n\nWe extended the TokenRequest functionality and now you can apply details for the tenant name and group name. It allows you to easily manage the token generation process for pairing applications in the central Connector Service. For more details, read [this](https://kyma-project.io/docs/0.9/components/application-connector#custom-resource-token-request) document.\n\n### Read about the Root CA rotation procedure\n\nWe updated our documentation with the description of the [Root CA rotation procedure](https://kyma-project.io/docs/0.9/components/application-connector/#tutorials-rotate-the-root-ca-certificate-and-key).\n\n### Acceptance tests for the Gateway Service\n\nWe enhanced the Gateway Service with the extended set of acceptance tests, which increases our confidence in the stability and performance of the component.\n\n### Headers management\n\nWe changed the Application Gateway proxy functionality and now the unnecessary headers, such as `X-Forwarded-For`, are removed while making calls to external solutions. For the full list of removed headers, read [this](https://kyma-project.io/docs/0.9/components/application-connector/#architecture-application-gateway-handling-of-headers) document.\n\n\n## Console\n\n### Documentation UI integrated with Headless CMS\n\nThe Documentation UI, which you can access in the Console UI, is now integrated with the Headless CMS. This means you can extend the Documentation view, the one you see after clicking the **?** icon, with your custom documentation topics as long as you have your docs written in Markdown and extended with additional metadata. The code snippet below is an example of a ClusterDocsTopic custom resource that will extend the Documentation UI navigation with a new element called **Prometheus** under a **Components** heading. After clicking **Prometheus**, you will see the official Prometheus documentation.\n\n```yaml\ncat <<EOF | kubectl apply -f -\napiVersion: cms.kyma-project.io/v1alpha1\nkind: ClusterDocsTopic\nmetadata:\n  labels:\n    cms.kyma-project.io/view-context: docs-ui\n    cms.kyma-project.io/group-name: components\n    cms.kyma-project.io/order: \"2\"\n  name: prometheus\nspec:\n  displayName: \"Prometheus\"\n  description: \"Some docs about Prometheus concepts\"\n  sources:\n    - type: markdown\n      name: docs\n      mode: package\n      url: https://github.com/prometheus/docs/archive/master.zip\n      filter: content/docs/concepts\nEOF\n```\n\n### Service Catalog related views integrated with Headless CMS\n\nThe Service Catalog-related views now read documentation provided with the new Headless CMS. This means that you can easily provide documentation and specifications for any service that you want to share through the Service Catalog. See the example DocsTopic custom resourceâ€¯for artificial Service Class that exposes Slack APIs:\n\n```yaml\napiVersion: cms.kyma-project.io/v1alpha1\nkind: DocsTopic\nmetadata:\n  name: {$SERVICE_CLASS_ID}\n  labels:\n    cms.kyma-project.io/view-context: service-catalog\nspec:\n  displayName: Slack\n  description: \"Slack documentation\"\n  sources:\n    - type: markdown\n      name: markdown-doc\n      mode: single\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/README.md\n    - type: asyncapi\n      name: events-api\n      mode: single\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/events-api/slack_events_api_async_v1.json\n    - type: openapi\n      name: openapi-swagger\n      mode: single\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/web-api/slack_web_openapi_v2.json\n```\n\n## Core and Supporting\n\n### Headless CMS\n\nIn Kyma, we value the content-as-code principle. It means that documentation is treated the same as code, as in the end, it is not much different. We decided to go one step further. If content is like code, why not deploy it into the Kubernetes cluster as code as well? If you can easily deploy a service using the Deployment resource, you can do the same with documentation. This is what we implemented - the Headless CMS, based on Kubernetes Custom Resource Definitions, that uses our other component, the [Asset Store](https://kyma-project.io/docs/0.9/components/asset-store), for storage.\n\nThe Headless CMS itself does not yet deliver any customizable UI interface that could be used to publish a standalone documentation portal. Nevertheless, we already use it in the Console UI. For more details, read the Headless CMS [documentation](https://kyma-project.io/docs/0.9/components/headless-cms).\n\n### Asset Store supports a webhook service that can enhance the status of the CR with additional metadata for each file\n\nYou can now extend the Asset Store status sub-resource with additional metadata information for each file created by the controller. To do so, create a separate service that implements REST API and accepts `multipart/form-data`. One of the use cases for such a service is to extract the front matter metadata provided in any file of the `yaml` format.\nSee the example AssetStore resource that contains information about the status modification webhook:\n\n```yaml\napiVersion: assetstore.kyma-project.io/v1alpha2\nkind: Asset\nmetadata:\n  labels:\n    controller-tools.k8s.io: \"1.0\"\n  name: asset-sample\n  namespace: default\nspec:\n  bucketRef:\n    name: test-sample\n  source:\n    url: https://github.com/kyma-project/kyma/archive/0.8.1.zip\n    filter: /docs/service-catalog/docs/\n    mode: package\n    metadataWebhookService:\n    - name: assetstore-asset-metadata-service\n      namespace: kyma-system\n      endpoint: /v1/extract\n      filter: \\.md$\n```\n\nTo learn more about webhook services, read [this](https://kyma-project.io/docs/0.9/components/asset-store/#custom-resource-asset-validation-and-mutation-webhook-services) document.\n\n### Asset Store stack enhanced with a default service that can extract metadata from any file\n\nWith the support of the new metadata webhook, we added a default service to the Asset Store domain. You can use it to extract the front matter metadata provided in any file of the `yaml` format. We already use this service in the Headless CMS component. For more details, read [this](https://kyma-project.io/docs/0.9/components/asset-store/#details-asset-metadata-service) document.\n\n\n## Eventing\n\n### Kyma with Knative Eventing\n\nKyma now uses Knative Eventing backed by NATS Streaming by default. This is a big first step towards leveraging Knative Eventing capabilities in the upcoming releases.\n\n### Improved security\n\nAccess to NATS Streaming is now restricted only to applications that store and read Events.\n\n### Alerting and monitoring added\n\nWe added alerting and monitoring for eventing backing services.\n\n\n## Installation\n\n### Xip.io wildcard as the default DNS solution\n\nThe wildcard DNS provided by `xip.io` is integrated as the default DNS solution, which means you can now install Kyma on GKE and AKS clusters and create a playground environment even easier. Simply start the installation on your cluster and don't worry about owning a domain or configuring your cluster in a specific way. If you want to spin up a production-ready cluster, the process doesn't change. When you provide your own domain and TLS certificates, the Installer uses them instead of these provided by `xip.io`. Additionally, all scenarios support Application Connectivity.\n\n### Test runner for the Kyma upgrade\n\nWe created a test runner and a place for end-to-end upgrade tests executed by [Kyma upgrade plan on CI](https://status.build.kyma-project.io/?job=post-master-kyma-gke-upgrade). The framework allows you to prepare the data and run tests against the prepared data. For more information on end-to-end upgrade tests, read [this](https://github.com/kyma-project/kyma/tree/release-0.9/tests/end-to-end/upgrade) document.\n\n\n## Monitoring\n\n### Monitoring Stack version update\n\nWe upgraded the entire Monitoring stack based on the Prometheus operator to the latest version. The upgraded components are Alertmanager v0.16.1, Prometheus Operator v0.29.0, Prometheus v2.7.1, and Grafana v6.0.1.\n\n\n## Security\n\n### TLS in Tiller\n\nFrom this release, communication with Tiller requires a TLS certificate. For developers who install Kyma locally using Minikube, the start-up scripts automatically set certificates for Helm. However, from now on it is mandatory to add the `--tls` flag to every Helm command.\n\n### Helm Broker enforces TLS for external bundles repositories\n\nFrom now on, on your non-local clusters, you can use only servers with TLS enabled. All incorrect or unsecured URLs will be omitted. You can use unsecured URLs only on your local cluster. For more information, read [this](https://kyma-project.io/docs/0.9/components/helm-broker/#configuration-configuration-configuration-rules) document.\n\n### Istio with mutual TLS for the Service Catalog and Service Brokers\n\nWe introduced Istio with mutual TLS for the Service Catalog and for all Service Brokers (the Helm Broker, Application Broker, and Azure Broker).\n\n\n## Service Mesh\n\n### Istio version update\n\nKyma now uses Istio version 1.1.\n","excerpt":"The 0.9 release comes with many updates and improvements, as well as some brand new features that make the Kyma experience even smoother. The Kyma-Knative integration has reached its peak and from this release, Knative Eventing is the default eventing mechanism. You can now install Kyma on GKE and AKS clusters using the default DNS solution provided by xip.io. Among many updates and improvements, we developed a new testing framework and updated the entire Monitoring stack. Last but not least, we introduced a brand new component for storing and managing content - the Headless CMS.","fields":{"slug":"/blog/2019/4/8/release-notes-09","assetsPath":"/assets/blog-posts/2019-04-08-release-notes-0.9/","date":"April 08, 2019","postInfo":{"fileName":"release-notes-09","year":2019,"month":4,"day":8}},"frontmatter":{"title":"Kyma 0.9 Florence","author":{"name":"Klaudia Grzondziel, Technical Writer @Kyma"},"tags":["release-notes"],"type":"release","releaseTag":"0.9.0","redirectFrom":["/blog/release-notes-09"]}},"assetsPath":"/assets/blog-posts/2019-04-08-release-notes-0.9/","previous":{"id":"b320a6af-10bd-5e0c-a8c1-b90a2260dfea","rawMarkdownBody":"\nThe Knative Working Group (WG) focused on bringing together the worlds of Kyma and Knative closed (not so) recently. After two months \nof hard work, the group achieved all of its goals, not without cutting the initial scope, though. \n\n<!-- overview -->\n\nWhen we created this WG, we wanted to focus on these three goals:\n\n * Installing Kyma alongside Knative on the same cluster\n * Implementing the Kyma Event Bus using Knative eventing under the hood\n * Implementing Kyma Serverless with Knative serving instead of Kubeless\n \nAs the scopes of releases 0.6, 0.7, and 0.8 got established, we had to limit the goals of the WG and drop the Serverless-related plans.\n\nAside from this adjustment, the WG met the expectations and delivered the rest of the scope. Thanks to that, starting with release 0.8 you can have Kyma and Knative on the same Kubernetes cluster and watch both of them flourish. Moreover, in addition to the old \nimplementation Kyma Event Bus can now run on the NATS Streaming Provisioner which, by the way, is a Kyma contribution to \nKnative.\n\nWas this an easy ride? Not at all. We had to make both frameworks work on one cluster with a single Istio instance. Both Kyma and Knative make extensive use of Istio and provide their own customizations. After we made them both running, we still had a long way to go. \nThe WG had to reimplement almost all of the Event Bus without any other Kyma component noticing that change. \n\nDespite the challenges, working in the WG was a time of learning for all of the members. We had to understand what's going on under the hood of Knative, which turned some of us into active members of the Knative community. We learned that even the most carefully planned scope may change and that we need to cope with that. Finally, we felt the pain of integration of two rapidly evolving products on our own skin.\n\nDuring the two months of its work, the WG Knative laid solid foundations for the Kyma-Knative integration. Now we are looking for new ways to\nutilize it and make the fusion even more effective.\n","excerpt":"The Knative Working Group (WG) focused on bringing together the worlds of Kyma and Knative closed (not so) recently. After two months \nof hard work, the group achieved all of its goals, not without cutting the initial scope, though.","fields":{"slug":"/blog/2019/3/27/wg-knative-closure","assetsPath":"/assets/blog-posts/2019-03-27-wg-knative-closure/","date":"March 27, 2019","postInfo":{"fileName":"wg-knative-closure","year":2019,"month":3,"day":27}},"frontmatter":{"title":"Knative Working Group closed","author":{"name":"Szymon Janota, WG Knative Leader @Kyma"},"tags":["kyma","knative","wg"],"type":null,"releaseTag":null,"redirectFrom":["/blog/wg-knative-closed"]}},"next":{"id":"21896582-b77f-5cf8-ab48-ca4012089ec5","rawMarkdownBody":"\nExtra! Extra! Read all about it! With the 1.0 Gliwice release, we have successfully reached our first big release milestone in Kyma. We realize that some of you might be confused and ask \"Why Gliwice?\" or \"Where even is that place?\" A quick [Wikipedia search](https://en.wikipedia.org/wiki/Gliwice) reveals that Gliwice is a Polish city situated in the southern part of the country, in the Upper Silesia. Founded in the 13th century, it has a rich history, a beautiful old town, and a river running right through its heart. From the software point of view, Gliwice is the home of the SAP Labs office which has most of the developers working on Kyma. Now that the naming conundrum is solved, let's dive into the details of our first production release.\n\n<!-- overview -->\n\nThe 1.0 release is all about security and stability. We invested a lot of time and energy in securing all communication in the Kyma cluster and finally we are able to turn on mutual TLS by default. This is something we promised to deliver in the previous release, but in the course of implementation we encountered more problems than we anticipated. Another important feature that we had to postpone and we're releasing with the 1.0 release is the integration with Grafana Loki. We didn't manage to implement it earlier because of several incompatible changes in log directories introduced in Kubernetes 1.14 but already applied in the Google Kubernetes Engine. See [this issue](https://github.com/grafana/loki/issues/393) for more details. These are the highlights of the Gliwice release. \n\nOur first production-ready version of Kyma will be released next week, around 25.04 and the first [release candidate](https://github.com/kyma-project/kyma/releases/tag/1.0.0-rc1) is already out!\n\nKyma is a dynamic project and we don't want to slow down after giving you a proper production release. Just the opposite! We already started preparation for the next release. Have a look at the new and exciting stuff that's going to come in 1.1 Helsinki:\n\n- Addon Catalog - we will enable and promote a new way to share addons by combining the concepts of Service Catalog bundles with Helm charts. Add-ons can contain services, lambdas, and other Kubernetes objects along with the documentation and provisioning UI.\n- AWS Broker - We already have brokers for GCP and Azure services in Kyma. Adding AWS to the roster will make our service consumption offering more complete.\n- Asset Store configuration will utilize Google Cloud Storage.\n- Kiali integration - we will add the alpha version of this visualization tool for the Istio Service Mesh - it will require enabling a feature toggle.\n- Octopus - our new testing tool will replace Helm tests. Retries and parallel execution for tests will speed up Kyma development.\n- Performance tests infrastructure - we will track how code changes influence the throughput and latency of key components and we will tweak Kyma cluster configuration to give you settings suitable for the production environment.\n\nYou can find all the items planned for the 1.1 release in our [Zenhub](https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/reports/release?release=5c5aae9ddcf5235c1876a4f2).\n\nKyma 1.1 Helsinki is scheduled for release on 13.05.2019, and 1.0 Gliwice is going to be available very soon. Keep an eye out for more Kyma news and updates on our blog. See you around! \n","excerpt":"Extra! Extra! Read all about it! With the 1.0 Gliwice release, we have successfully reached our first big release milestone in Kyma. We realize that some of you might be confused and ask \"Why Gliwice?\" or \"Where even is that place?\" A quick Wikipedia search reveals that Gliwice is a Polish city situated in the southern part of the country, in the Upper Silesia. Founded in the 13th century, it has a rich history, a beautiful old town, and a river running right through its heart. From the software point of view, Gliwice is the home of the SAP Labs office which has most of the developers working on Kyma. Now that the naming conundrum is solved, let's dive into the details of our first production release.","fields":{"slug":"/blog/2019/4/18/release-10-plan","assetsPath":"/assets/blog-posts/2019-04-18-release-1.0-plan/","date":"April 18, 2019","postInfo":{"fileName":"release-10-plan","year":2019,"month":4,"day":18}},"frontmatter":{"title":"New Kyma Releases: 1.0 Gliwice and 1.1 Helsinki are coming!","author":{"name":"Piotr Bochynski, Product Owner @Kyma"},"tags":["release"],"type":null,"releaseTag":null,"redirectFrom":["/blog/release-10-plan"]}},"slidesBanner":{"bannerDuration":5000,"slides":[{"text":"Don't miss the session by Piotr Kopczynski at Helm Summit on September 11 at 15:47.","url":"https://helmsummit2019.sched.com/event/S8sS","startDate":"09/09/2019","endDate":"12/09/2019"}]},"locale":"en"}}}