{"componentChunkName":"component---src-views-blog-single-index-tsx","path":"/blog/2019/7/31/kyma-collaboration-with-ory","webpackCompilationHash":"aefb7e842b40c338951f","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/7/31/kyma-collaboration-with-ory","post":{"id":"76835b42-7716-516a-b7d2-4e40645e1ef5","rawMarkdownBody":"\nWorking with others is always a great opportunity to learn and grow, so we simply couldn't say \"no\" to working with the team at [Ory](https://www.ory.sh/) when such opportunity arose. Making Kyma even more secure, gaining new experience, working with awesome people, and contributing to another project at the same time? Read on to find out how we're joining forces with Ory to bring an OAuth server to Kyma and contribute a completely new component to the lair of Hydra and its Oathkeeper. \n\n<!-- overview -->\n\nThe Kyma API Gateway enables exposing applications to the world outside of the cluster, at the same time allowing to secure access to the exposed application with JWT authentication. The implemented authentication mechanism allows to secure entire services or only selected resource paths within those services. You can read all about this in our [documentation](https://kyma-project.io/docs/components/api-gateway/). \n\nEnhancing security with authorization mechanisms has always been a part of the API Gateway vision in Kyma. Currently, basic authorization needs are fulfilled thanks to Istio and its implementation of [RBAC](https://istio.io/docs/reference/config/authorization/istio.rbac.v1alpha1/) which allows controlling access to services in the cluster. Although you can apply authorization to the requests that the exposed services receive, there's no way to authorize the requested operation based on, for example, scopes. \nThis is a pretty significant gap in our security scheme, especially when you consider communication between 3rd party applications and the applications living in Kyma and exposed through the API Gateway. \n\nOne of the authorization strategies we are going to implement is through an OAuth2 server. Among many ready-to-use solutions available on the market, the one created by [Ory](https://ory.sh) caught our attention specifically. This solution comes with a full-fledged resource access authorization ecosystem, including an OAuth2 server and an OAuth reverse proxy. Additionally, this solution is a very popular, respected project with a high adoption rate and many stargazers on GitHub.\n\nTo investigate how the adoption of the Ory ecosystem would work with and potentially extend the Kyma API Gateway, we worked on a POC that used the Ory OAuth2 server - Hydra and the reverse proxy - Oathkeeper and focused on two OAuth flows: implicit grant and client credentials. The results were satisfactory and are documented in the form of examples available to inspect [here](https://github.com/kyma-incubator/examples/tree/master/ory-hydra/scenarios).\n\nBased on the positive results of the POC, we decided to focus our efforts on integrating Kyma with the Ory ecosystem. To facilitate this integration, we sat down with the developers from Ory during a workshop that helped to work out a plan of how to integrate our solutions and how the Kyma team will contribute to Ory's solution. \n\nSo how's the solution of Ory going to be used in Kyma? In the target setup, Kyma deployments will come with 3 Ory components: the Hydra OAuth2 server, the Oathkeeper reverse proxy that secures the exposed service, and the Oathkeeper Controller, which manages access rules for Oathkeeper. Kyma users will register their own OAuth clients in the Console UI and define access rules for their APIs. Thanks to that, every application will be able to get its own OAuth token and communicate with the exposed API. \n\n![Oauth2 flow in API Gateway](./oathkeeper-gateway.svg)\n\nThe role of the Kyma team in this setup is very clear - we are to create the Oathkeeper controller component and contribute it to Ory's ecosystem. \nAt the moment, the Oathkeeper is not designed to be used natively in Kubernetes as the configuration can be provided to this component only through an external server that provides the config, or directly through a file. Feeding the configuration to Oathkeeper in Kubernetes-native way using [Custom Resource Definitions (CRDs)](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions) is not supported. The Oathkeeper Controller is going to address this gap. Kubernetes users will be able to create custom resources that represent access rules for their services. The Controller will then pass this data to Oathkeeper in a format which it can work with without any additional modification.\n\n![Register access rule](./controller.svg)\n\nThis collaboration is going to bring great value to Kyma and Ory (Kyma supports OAuth2, Ory supports Kubernetes CRDs), and we're extremely excited that we're sailing the seas with the guys from Ory. Be sure to check out their solutions and follow our blog and releases to see how this adventure ends. \n","excerpt":"Working with others is always a great opportunity to learn and grow, so we simply couldn't say \"no\" to working with the team at Ory when such opportunity arose. Making Kyma even more secure, gaining new experience, working with awesome people, and contributing to another project at the same time? Read on to find out how we're joining forces with Ory to bring an OAuth server to Kyma and contribute a completely new component to the lair of Hydra and its Oathkeeper.","fields":{"slug":"/blog/2019/7/31/kyma-collaboration-with-ory","assetsPath":"/assets/blog-posts/2019-07-31-kyma-collaboration-with-ory/","date":"July 31, 2019","postInfo":{"fileName":"kyma-collaboration-with-ory","year":2019,"month":7,"day":31}},"frontmatter":{"title":"Joining forces with Ory","author":{"name":"Piotr Mścichowski, Capability Owner @Kyma"},"tags":["ory","contribution","service-mesh"],"type":null,"releaseTag":null,"redirectFrom":null}},"assetsPath":"/assets/blog-posts/2019-07-31-kyma-collaboration-with-ory/","previous":{"id":"3808d23d-992c-56a3-90ec-ce2098ecc57e","rawMarkdownBody":"\nIt was a warm and sunny July day in San Francisco (not kidding!) when we got into the crowded Moscone West conference center for a session entitled “[Serverless on Google Cloud](https://www.youtube.com/watch?v=iPQUdb0kssE)”. On that very stage at Google Cloud Next 2018, both Knative and Kyma projects were announced and officially saw the light of day. Since then a lot of code was written and rewritten, shaping an extraordinary first year for both projects. You can go through some of the most memorable moments throughout [Kyma’s first year](https://kyma-project.io/blog/2019/7/24/happy-birthday-kyma/) or [Knative's first year](https://cloud.google.com/blog/) recaps.\n\n<!-- overview -->\n\n## Getting Kyma launched\n\nKyma started eight months before its public announcement, in an attempt to simplify software extensibility in the area of eCommerce at SAP Hybris. At that time, we knew neither that it was going to be open-sourced nor that the name would be Kyma. What inspired us to choose the open-source path was the initial interaction with several friendly partners. They all provided very similar feedback, were super enthusiastic, and asked for a way to get involved. At that point, we were convinced that we needed an open and highly collaborative model around the project. We first heard about Knative in the hallway track at KubeCon Europe 2018. Our first direct interaction with the Knative team took place already in early June 2018, when we exchanged ideas and discussed the direction going forward. On that day it became clear that our roads would cross again and that Kyma and Knative were destined to integrate well with each other.\n\n![Documentation component](./wheels.png)\n\nIt took us less than two months, with all the support we could get across SAP, to publish the project on GitHub under [github.com/kyma-project](https://github.com/kyma-project) – just in time for the initial launch at Cloud Next that took place exactly one year ago.\nWe received phenomenal feedback both during and after the launch event. We got many questions about the features, technology choices, roadmap, SLAs, and more. We had to address many of these issues on the go as we moved forward. We also got the (seemingly obvious) question where and when Kyma will get a marketplace on its own. \"Not so fast, not so fast,\" we were thinking, \"let's first learn to walk before we start running!\"\n\n## After the launch\n\nSince the launch, we’ve seen how the openness and flexibility of the Knative ecosystem have brought in many different vendors. Knative successfully simplified the experience of building apps on top of Kubernetes, enabling developers and operators to work together in the same environment. Some of the vendors around Knative provide interchangeable parts, such as [Gloo](https://github.com/solo-io/gloo) from solo.io and [Ambassador](https://github.com/datawire/ambassador) from Datawire that swap away and replace pieces of Istio. [Official stats](https://knative.teststats.cncf.io/d/5/companies-table?orgId=1) point at over 50 companies that have contributed to Knative.\nWe’ve also seen several projects kicking off on top of Knative, such as TriggerMesh and OpenWhisk. Kyma is also a part of this category, sitting steadily on top of Knative, enabling application developers to consume third-party services via the Open Service Broker catalog, and providing seamless connectivity to enterprise systems. We naturally started by integrating with our SAP apps. We became very quickly aware of the potential behind the approach in general, the reach it could provide to our partner ecosystem, and the large developer community out there. Leveraging Knative provides us with a flexible abstraction over the underlying Kubernetes resources. However, if one would want to go beyond Knative and work with Kubernetes directly at any point in time, that would be also possible. We went for this approach of radical transparency towards our underlying layers in Kyma.\n\n## Together with Knative\n\nWe started with a very clear and [ambitious plan](https://kyma-project.io/blog/2018/8/10/kyma-knative-progress-report) to closely integrate Kyma and Knative. At the launch, we were still using the Kubeless serverless stack underneath our functions’ runtime. At that time, we had a [plan](https://kyma-project.io/blog/2018/9/27/replacing-kubeless-with-knative) to replace it as soon as Knative Serving becomes more stable and reliable. By default, Knative included eventing implementation based on Kafka. While providing superb scalability, it had a resource consumption footprint which was going beyond what we planned. Therefore, we went forward with our NATS Streaming-based Knative eventing implementation. That went quite well, and it is nowadays part of the standard Knative eventing delivery. Since April, it has also been the default eventing layer inside Kyma. We use it in many projects ourselves, and we enable developers to benefit from the lower memory consumption it provides.\nAs it often goes, plans and reality do not always meet as intended. In March, we had to [temporarily suspend](https://kyma-project.io/blog/2019/3/27/wg-knative-closure/) our Knative integration plans due to other priorities within the project. We were quick to realize that sustainable progress requires a steady, disciplined, and long-term focus. To get there, we regrouped and have now established a dedicated Knative team, led by our own Ahmed Abdalla. The team will drive forward the closer Kyma and Knative integration, starting right away with Knative Serving.  \n\n## Going forward\n\nOur focus, as we go forward, is to work on two fronts. On the one hand, we have the core Kyma features, building a truly open frame that provides a flexible and easy way to connect and extend enterprise applications.\nOn the other hand, we look at our serverless foundational layer, where we see Knative with all its different components as a natural and logical choice.\n\nTherefore, we will work on:\n\n1.\tEstablishing Knative as a first-class citizen in Kyma.\n2.\tProviding a Knative-rich user experience within Kyma by leveraging the full landscape of Knative features, such as Serving, Eventing, Operator, CLI, and more.\n3.\tEnriching the Knative community with Kyma use cases, customer feedback, and challenges, which we can solve together in collaboration.\n\nSince we are still early in the journey, we have a lot of work ahead of us to reach our initial set of goals:\n1.\tReplace Kubeless serverless stack with the Knative Serving runtime.\n2.\tProvide production-ready and developer-focused user experience for eventing integration through the Broker/Trigger model.\n3.\tLeverage the full support of Event Sources within our Application Connector components.\n4.\tProvide easy out-of-the-box Knative installation experience through different Knative Operators.\n\nThis list could be much longer. By having a prioritized and focused working model, we are betting on the Knative community to be a partner in defining the future of enterprise software extensibility.\n\n## Fostering the community\n\nFrom day one, we planned for Kyma to be a vendor-neutral extension layer, making sure it meets our needs and the needs of the wider developer community. To stress that, attract new like-minded fellows, and reach a maximum audience, we’re currently planning the steps needed to donate Kyma to CNCF Sandbox, making sure to remove any barriers for potential contributors and collaborators. SAP has many years of experience in both writing and running mission-critical enterprise systems. It would be awesome to combine that with the different perspectives we will find out there with other vendors.\nOn the face-to-face front, we’ve taken extra care to cover some of the major events, such as KubeCon, OSCON, QCon, and several local Kubernetes-related meetups. Lately, we had the honor to host our friends from Google, [Matt Moore](https://twitter.com/mattomata) and [Scott Nichols](https://twitter.com/n3wscott), at a well-attended [Cloud-native meetup](https://events.sap.com/de/munich-knative/en/home) dedicated to Knative that took place in July in Munich. We conducted a poll there with the audience of over 70 people, and we jointly decided to launch the [Munich Knative Meetup Group](https://www.meetup.com/Munich-Knative-Meetup-Group/). Stay tuned for more news on that and an announcement of the inaugural event in September.\n\n## In closing\n\nWe believe that wider collaboration creates the best environment for a vibrant and active community. We wouldn't be where we are today without all of your feedback and the early adopters who believed in Kyma and were open-minded enough to give it a try and not get discouraged by any hurdles on the way. You can find the [testimonial from XXXLutz](https://www.youtube.com/watch?v=NI4cOWO9HnA) as well as other early adopters on the Kyma and SAP CX YouTube channels. They all started throughout the year before we had our [openSAP course](https://open.sap.com/courses/kyma1) introducing Kyma and all the examples and automation around application integration. We’re deeply grateful for all the trust and support we’ve got so far!\n/#keepExtending\n","excerpt":"It was a warm and sunny July day in San Francisco (not kidding!) when we got into the crowded Moscone West conference center for a session entitled “Serverless on Google Cloud”. On that very stage at Google Cloud Next 2018, both Knative and Kyma projects were announced and officially saw the light of day. Since then a lot of code was written and rewritten, shaping an extraordinary first year for both projects. You can go through some of the most memorable moments throughout Kyma’s first year or Knative's first year recaps.","fields":{"slug":"/blog/2019/7/24/kyma-and-knative-turning-one","assetsPath":"/assets/blog-posts/2019-07-24-kyma-and-knative-turning-one/","date":"July 24, 2019","postInfo":{"fileName":"kyma-and-knative-turning-one","year":2019,"month":7,"day":24}},"frontmatter":{"title":"Kyma and Knative turn one: Our First Year","author":{"name":"Krasimir Semerdzhiev and Ahmed Abdalla"},"tags":["knative","community","birthday","cncf","meetup","openSAP"],"type":null,"releaseTag":null,"redirectFrom":["/blog/kyma-and-knative-turning-one"]}},"next":{"id":"2651292f-5fc3-552d-97a6-0745e2405620","rawMarkdownBody":"\nStraight from Indonesian Jakarta, we sail to Japan. Let's stop in one of its beautiful temples and ponder over what the 1.4 Kyoto Release has to offer. Being hard-working as the Japanese, Kyma busy bees introduced many improvements in their components, including the Application Connector, Console, Kiali, and Headless CMS. Read on to find out what has changed in Kyma since 1.3.\n\n<!-- overview -->\n\nThe highlights of Kyma 1.4 Kyoto include:\n\n- [API Gateway with an OAuth2 server](#api-gateway) - We integrated Kyma with an OAuth2 authorization server solution from ORY.\n- [Application Connector](#application-connector) - We upgraded Istio to version 1.2.2.\n- [Console UI without system Namespaces](#system-namespaces-hidden-in-the-console-ui) - We hid all system Namespaces built in a Kyma cluster so that you could find your Namespaces quicker.\n- [Documentation component](#documentation-component) - We consolidated different documentation views into one Documentation component.\n- [Conversion and validation in the Headless CMS](#conversion-and-validation-service-for-the-asyncapi-2-0-specs-in-the-headless-cms) - We introduced the conversion and validation service for AsyncAPI 2.0 specifications.\n- [Kiali](#kiali) - We upgraded Kiali to the latest stable version and enabled Single Sign-On.\n- [Bundles renamed to addons](#bundles-renamed-to-addons) - We renamed bundles to addons.\n\nSee the overview of all changes in this release:\n\n- [Backup](#backup) - Simplified Velero installation, a new implementation of the backup and restore functionalities, backup available on Azure, and backup tests fixed\n- [Core and Supporting](#parameters-object-in-the-headless-cms-supported-in-the-console-ui) - Relative links disabled in Markdown specs\n- [JSON schema](#json-schema) - Guidelines for creating JSON schemas for Kyma components\n- [Knative](#knative) - Knative Eventing and Serving update\n- [Kyma CLI](#kyma-cli) - Kyma CLI enriched with the `test` command and inline documentation\n- [Service Management](#service-management) - New GCP Service Broker addon and Helm Broker support for addons exposed by Git\n\nRead about known issues for [Velero](#known-issues).\n\n> **CAUTION:** Before you upgrade to Kyma 1.4, read the [Migration Guide](https://github.com/kyma-project/kyma/blob/release-1.4/docs/migration-guides/1.3-1.4.md) which describes necessary manual actions required by the Google Cloud Platform (GCP) Service Broker addon.\n\n---\n\n## API Gateway\n\nMaking friends in the open-source world is natural. Collaboration with our friend, ORY, in the 1.4 release bore fruit, and Kyma got its very own OAuth2 server. Our new component consists of three elements from ORY: Hydra OAuth2 server, Oathkeeper proxy, and Oathkeeper Maester controller. By default, the solution is now installed with every Kyma deployment. We worked closely with ORY developers to make their solution Kubernetes-native. We achieved that by creating the Maester controller and contributing it to the ORY stack. This controller allows for convenient management of Access Rules through custom resources. Check out and test the Kyma-ORY integration and follow its development closely as we're still in the development phase. Read [this](https://kyma-project.io/blog/2019/7/31/kyma-collaboration-with-ory/) blog post to see where we're heading. Also, read the [**Security**](https://kyma-project.io/docs/1.4/components/security/#details-oauth2-and-openid-connect-server) documentation to get more details on the current state of the integration.\n\n## Application Connector\n\n### Application Registry updated to Istio 1.2.2  \n\nAs you already know, the Application Connector uses Istio to ensure a high level of security. From now on, the Application Registry benefits from features introduced in Istio 1.2 to control access to the Application Gateway.\n\n## Backup\n\n### Velero upgraded to 1.0.0\n\nThe backup component, Velero, is now upgraded to its latest stable version 1.0.0.\n\n### Installation and setup\n\nWe improved and simplified the installation and setup process for Velero. Read the [documentation](https://kyma-project.io/docs/1.4/components/backup/#installation-install-velero) and see how easy it is now to set up Velero either before or after installing Kyma.\n\n### Creating backups\n\nWe implemented the backup functionality from scratch to guarantee that all resources in a cluster are properly backed-up. The documentation was updated to reflect the changes we made.\n\n### Restoring from a backup\n\nAlso, we have a brand-new restore functionality. It guarantees that a backed-up cluster can be fully recovered. The documentation was updated to reflect the changes we made.\n\n### Backup tests\n\nAll backup and restore integration tests are fixed and pass.\n\n### Backups on Azure\n\nThe backup functionality was successfully introduced on Azure (AKS). Follow the steps from the [installation](https://kyma-project.io/docs/1.4/components/backup/#installation-install-velero) guide to set up Velero on Azure.\n\n### Plugins\n\nWe deleted all Velero plugins as they are not needed anymore.\n\n### Known Issues\n\nVelero returns an error during restoring CRDs. The temporary workaround is to divide the restore process into 2 steps:\n\n1. Restore only CRDs.\n2. Restore the remaining part of the cluster.\n\nIt may also happen that the restore process fails to complete. It is caused by a bug in Velero. In such a case, retry to restore your cluster.\n\n## Console\n\n### System Namespaces hidden in the Console UI\n\nSo far, once you entered a Kubernetes cluster you could probably see quite a bunch of Namespaces. These were both built-in Namespaces and those that came with modules you installed. They were not the ones a Kyma user wanted to work with. To have a better user experience, system Namespaces are now hidden by default. As a result, you can easily find the Namespaces that you work with. To see the system Namespaces, go to the **General Settings** view and toggle the **Show System Namespaces** option under **Namespace settings**.\n\n![Namespace settings](./namespace-settings.png)\n\n## Core and Supporting\n\n### Documentation component\n\nThe Kyma project puts a lot of effort into documentation and processes around it, not only with respect to [kyma-project.io](https://kyma-project.io/docs). As you know, you can also access Kyma documentation from the Console UI. In Kyma, we offer features that you can use to document your own services - that does not only relate to static docs provided with Markdown specs but also other formats, such as OpenAPI, AsyncAPI, and OData.\n\nIt basically means that at the moment we have 4 different views that render documentation, and you can expect more of them to come in the future releases. We decided that it was about time to consolidate our experience in this area into one component.\n\n- Documentation component project\n\nAs mentioned in the [previous release notes](https://kyma-project.io/blog/2019/7/12/release-notes-13/#documentation-component), we have one single project in which we maintain the Documentation component and just reuse it in different applications. We already introduced it in the Console UI Documentation view in the last release. In the 1.4 release, it was integrated into the Console UI Catalog and Instances views. In a few days, you will see this component being used on [kyma-project.io](https://kyma-project.io/).\n\n- Improved look and feel\n\nWhile working on the Documentation component, we took a closer look at the styling of different specs and decided to improve and unify them. The style is now unified in Markdown, OpenAPI, and OData. In the next release, we would like to do the same with AsyncAPI.  \n\nThis is the new Fiori 3-like design for the OpenAPI spec:\n\n![OpenAPI spec](./openAPI-spec.png)\n\nThis is the new Fiori 3-like design for the Markdown spec with the new and much better approach to navigation with the right-hand side navigation:\n\n![Markdown spec](./markdown-spec.png)\n\nThis is the new Fiori 3-like design for the OData spec:\n\n![OData spec](./odata-spec.png)\n\n### Conversion and validation service for the AsyncAPI 2.0 specs in the Headless CMS\n\nEver since we introduced Kyma and its Application Connector component, we have been getting reports that you could easily register an application with the AsyncAPI spec but the spec did not render successfully in the UI. The reason was each and every time the same: the spec was not valid. It wasn't rendered because the validation only worked in the UI.\n\nWe decided to finally solve the problem and introduce a service that validates the AsyncAPI spec before it is accepted by the Headless CMS. Because integrating the service with Kyma will take some time, we decided to introduce the validation already for the latest version of the AsyncAPI specification. As a result, the service we introduced not only handles validation of the spec but also automatically converts the spec into the latest AsyncAPI version. For example, if you register the spec in version 1.0, 1.1, or 1.2, the service converts it to version 2.0.0-rc1.\n\nThis functionality is disabled by default, and the service is not provisioned or configured because we do not have the UI support for AsyncAPI 2.0 yet. To enable the validation service and play with it, override the following value:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cms-asyncapi-overrides\n  namespace: kyma-installer\n  labels:\n    installer: overrides\n    component: cms\n    kyma-project.io/installation: \"\"\ndata:\n  global.cmsAsyncAPIService.enabled: \"true\"\n```\n\nAfter you override the value, you can create a DocsTopic resource using [this](https://kyma-project.io/docs/1.4/components/headless-cms/#custom-resource-docs-topic-sample-custom-resource) example. The example contains a reference to the official Slack AsyncAPI spec provided in version 1.2. After you go through the steps for the happy path, create a new DocsTopic using an invalid spec. You can use the [invalid AsyncAPI spec](https://raw.githubusercontent.com/kyma-project/kyma/release-1.4/components/cms-services/pkg/endpoint/asyncapi/v1/testdata/invalid.json) we used for testing.\n\n### Parameters object in the Headless CMS supported in the Console UI\n\nIn the previous release, we introduced a new field in the DocsTopic CR that allows you to provide custom parameters that can modify the rendering options when supported by the presentation layer. After getting your feedback, we renamed the field from **metadata** to **parameters** and enabled its support in the Console UI.\n\nFrom now on, once you provide the **spec.sources.parameters.disableRelativeLinks** parameter for a Markdown source, the UI disables relative links and informs about it in a tooltip. This applies to a use case in which you render Markdown documentation that you do not own and that has some broken relative links. This is the only use case we support so far, but if you see other applications, please let us know. You can contact us on Slack or submit a GitHub issue.\n\n## JSON Schema\n\n### Definition and guidelines\n\nWe encourage you to read brand-new [documentation](https://github.com/kyma-project/community/blob/master/guidelines/technical-guidelines/05-helm.md#defining-metadata-schema-for-kyma-charts) defining standards for creating JSON schemas for Kyma components.\n\n### Governance\n\nWe also added a governance CI Job that checks if all components have a JSON schema file with the mandatory properties.\n\n## Kiali\n\n### Installation\n\nBy default, Kiali is now enabled together with monitoring.\n\n### Upgrade\n\nKiali was upgraded to version 1.1.0.\n\n### Console integration\n\nFrom now on, you can access Kiali from the Kyma Console. If you click the **Service Mesh** section on the left navigation menu, the link redirects you to the Kiali page.\n\n![Kiali in the Console UI](./kiali-console-ui.png)\n\n### Authentication\n\nWe added an integrated authentication strategy to the Kiali dashboard to enable Single-Sign-On based on the Dex configuration.\n\n### Documentation\n\n[Kiali](https://kyma-project.io/docs/1.4/components/kiali) is now documented in the Kyma Docs.\n\n## Knative\n\n### Knative Eventing updated to 0.6\n\nKnative Eventing chart, which is the foundational layer for Kyma Event Bus, was updated to version 0.6. Read more about the update [here](https://github.com/knative/eventing/releases/tag/v0.6.0).\n\n### Knative Serving updated to 0.6.1\n\nKnative Serving chart, which by default is installed with Kyma, was also updated but to version 0.6.1. Learn more about the update details [here](https://github.com/knative/serving/releases/tag/v0.6.1).  \n\n## Kyma CLI\n\n### Test command\n\nFrom this release, the Octopus test suites can be managed fully using the Kyma CLI. You can easily run, list, check, delete, and watch both test suites and test definitions on your cluster.\n\n### Inline documentation\n\nWe improved the documentation output of the Kyma CLI. The usage, help and flag documentation, and error messages are more user-friendly now.\n\n## Service Management\n\n### Bundles renamed to addons\n\nStarting from the 1.4 release, all bundles are renamed to addons to better reflect the functionality they provide. This applies to all occurrences, including the names of repositories. See [this](https://github.com/kyma-project/kyma/issues/4783) issue for more information.\n\n### Preview of the new GCP Service Broker addon\n\nAs the Google Cloud Platform (GCP) Service Broker is being deprecated by Google, we have removed this addon from our offering. Instead, we added the preview mode of a new GCP Service Broker which you can already integrate with Kyma. See [this](https://github.com/kyma-project/addons/issues/94) issue for more information. To learn how to switch to the new addon when upgrading Kyma, read the [migration guide](https://github.com/kyma-project/kyma/blob/master/docs/migration-guides/1.3-1.4.md).\n\n### Helm Broker supports addons exposed by Git\n\nStarting from this release, you can expose your addons not only through HTTPS serves but also using Git. To do so, simply place your addons directly in a Git directory and follow the necessary addon repository structure. Read [this](https://kyma-project.io/docs/1.4/components/helm-broker/#details-create-addons-repository) document to learn more.\n\n## Service Mesh\n\nWith great power comes great... resource consumption? Not anymore! Starting with this release the components of the Service Mesh and Security areas, including the API Controller, the API Server Proxy, Dex, the IAM Kubeconfig Service, Istio sidecars, and Istio Management Plane deployments consume significantly fewer resources, helping you to stay within the limits of your license's resource quotas. See [this](https://github.com/kyma-project/kyma/issues/4855) issue for more details.\n","excerpt":"Straight from Indonesian Jakarta, we sail to Japan. Let's stop in one of its beautiful temples and ponder over what the 1.4 Kyoto Release has to offer. Being hard-working as the Japanese, Kyma busy bees introduced many improvements in their components, including the Application Connector, Console, Kiali, and Headless CMS. Read on to find out what has changed in Kyma since 1.3.","fields":{"slug":"/blog/2019/8/8/release-notes-14","assetsPath":"/assets/blog-posts/2019-08-08-release-notes-1.4/","date":"August 08, 2019","postInfo":{"fileName":"release-notes-14","year":2019,"month":8,"day":8}},"frontmatter":{"title":"Kyma 1.4 Kyoto","author":{"name":"Malgorzata Swieca, Technical Writer @Kyma"},"tags":["release-notes"],"type":"release","releaseTag":"1.4.0","redirectFrom":["/blog/release-notes-14"]}},"slidesBanner":{"bannerDuration":5000,"slides":[{"text":"Don't miss the session by Piotr Kopczynski at Helm Summit on September 11 at 15:47.","url":"https://helmsummit2019.sched.com/event/S8sS","startDate":"09/09/2019","endDate":"12/09/2019"}]},"locale":"en"}}}