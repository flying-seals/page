{"componentChunkName":"component---src-views-blog-single-index-tsx","path":"/blog/2019/1/17/release-07-plan","webpackCompilationHash":"aefb7e842b40c338951f","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/1/17/release-07-plan","post":{"id":"0a981314-f29e-56b9-b085-bab42d291446","rawMarkdownBody":"\nWe might have just reached Cairo, but it's not time to celebrate yet. We embark on our ships and ride the wave straight to our next destination - Dublin! The capital of Ireland was chosen to be the codename for the upcoming Kyma 0.7 release which is scheduled to launch on 11th February 2019. Only 4 weeks after the 0.6 release! We're pretty excited and proud about how we improved our tooling and release process, which allows us to release more frequently. Thanks to these improvements, starting with the Dublin release, we will release a new version of Kyma every 4 weeks.\n\nWhat can you expect at the end of the rainbow? \n\n<!-- overview -->\n\nAlthough we're making progress fast, we don't forget about our users. We don't leave anyone behind and we aim to make updating Kyma as simple as possible. We want all users to simply grab a new version of the Kyma installer, deploy it, upgrade their deployment to the newest version, and start exploring new features in no time. This might sound really simple, but brings a lot of challenges for our project which is still in the beta phase and changes constantly. Despite the challenges, we're getting ready to implement the easy upgrade flow in the near future. As a part of these preparations, the 0.7 release will bring a new CI/CD pipeline to verify Kyma upgradeability continuously.\n\nThe 0.6 release introduced a feature toggle that enables Knative in Kyma installation. In the Dublin release, we will integrate event publishing and subscriptions with Knative Eventing. We will also deliver the first version of the Function Controller that supports Knative as the serverless engine.\n\nWith the 0.7 release, we aim to improve quality and stability by adding more end-to-end tests and pipelines that will run these tests on long-running clusters. So far the stability tests ran exclusively on nightly clusters. With the Dublin release, we will introduce weekly clusters to help ensure that no issues pop up after a few days of working with the cluster. We will also tweak Kyma deployments to work better with cluster autoscaling, for example by adjusting the apiserver-proxy deployment and resource quotas in system Namespaces.\n\nOur goal is to run Kyma on any Kubernetes cluster offered as a managed service. Currently, our default environment is the Google Kubernetes Engine (GKE). In the upcoming release, we will tweak our deployment procedure to allow Kyma to run and install smoothly on Azure Kubernetes Service (AKS) clusters. In addition, you will be able to add and configure Azure Broker in your cluster to enable easy provisioning and binding of Microsoft Azure services in your applications.\n\nDevelopers working with Lambdas will appreciate the possibility to test them directly from the UI. You will able to provide input data and see the value the function returns without exposing it through the API gateway.\n\nIn 0.7 release, we also introduce the first version of the Asset Store which is a generic, Kubernetes-native solution that will store our documentation, images, API specifications, and client-side applications. It is an evolution of our current storage solution based on Minio.\n\nAs in the previous release, we continue on improving the security of Kyma. The Dublin release will come with the first version of authorization in UI-API Layer (GraphQL), which is based on the proof of concept we worked on.\n\nYou can also expect a couple of smaller improvements related to UI/UX, better UI tests, further refactoring for better modularization, and more. You can find all the items planned for the 0.7 release in our [Zenhub](https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/reports?report=release&release=5c0790ea1a6a4c6bf4b314c3).\n\nCome back and check out Kyma 0.7 Dublin when it's released on 11.02.2019 and keep an eye out for more Kyma news and updates on our blog.\n\nSee you around!\n","excerpt":"We might have just reached Cairo, but it's not time to celebrate yet. We embark on our ships and ride the wave straight to our next destination - Dublin! The capital of Ireland was chosen to be the codename for the upcoming Kyma 0.7 release which is scheduled to launch on 11th February 2019. Only 4 weeks after the 0.6 release! We're pretty excited and proud about how we improved our tooling and release process, which allows us to release more frequently. Thanks to these improvements, starting with the Dublin release, we will release a new version of Kyma every 4 weeks. What can you expect at the end of the rainbow?","fields":{"slug":"/blog/2019/1/17/release-07-plan","assetsPath":"/assets/blog-posts/2019-01-17-release-0.7-plan/","date":"January 17, 2019","postInfo":{"fileName":"release-07-plan","year":2019,"month":1,"day":17}},"frontmatter":{"title":"Kyma 0.7 Dublin scheduled for release on 11.02.2019","author":{"name":"Piotr Bochynski, Product Owner @Kyma"},"tags":["release"],"type":null,"releaseTag":null,"redirectFrom":["/blog/release-07-plan"]}},"assetsPath":"/assets/blog-posts/2019-01-17-release-0.7-plan/","previous":{"id":"8a388152-239d-57ff-8f44-b0eaacdbe574","rawMarkdownBody":"\nThe 0.6 release brings a lot of significant changes to Kyma. The main focus of this release was to finalize the work on Prow and replace the existing CI pipeline with the new architecture. Thus, we are excited to announce that Kyma finally uses an open-source CI tool and that Kyma 0.6 Cairo was already built using the Prow architecture. Apart from Prow, we made efforts to drive the Kyma-Knative integration forward, took further steps to modularize Kyma components and unify their naming, and significantly improved the website-related user experience.\n\nExplore the changes, try out the release, and get back to us with feedback and contribution!\n\n<!-- overview -->\n\nThe highlights of Kyma 0.6 Cairo include:\n\n- [Prow in Kyma](#prow-in-kyma) - We implemented the new open-source CI tool in Kyma.\n- [Installation with Knative](#installation-with-knative) and [Knative eventing integration](#knative-adoption-first-steps) - We enabled Knative installation with Kyma and made first steps towards Knative eventing integration.\n- [Remote Environment](#remote-environment-renaming) and [Environment Controller renaming](#environment-controller-renaming) - As part of the naming unification scheme, we renamed Remote Environments to Applications and the Environment Controller to Namespace Controller.\n- [Console backend](#backend-modularization) and [Service Catalog modularization](#modularization) - We modularized the Console backend and the Service Catalog.\n- [Google Cloud Platform Service Broker](#google-cloud-platform-service-broker) - We extended the Service Catalog with Google offerings.\n- [kyma-project.io navigation improvements](#kyma-projectio) - We improved navigation and readability of Docs on `kyma-project.io`.\n\nSee the overview of all changes in this release:\n\n- [Application Connector](#application-connector) - Remote Environment renaming\n- [Console](#console) - Luigi framework on board, new navigation structure, backend modularization, AsyncApi rendering\n- [Continuous Integration](#continuous-integration) - Prow in Kyma\n- [Eventing](#eventing) - Knative adoption first steps\n- [Installation](#installation) - Environment Controller renaming, wildcard DNS `xip.io` integration, installation with Knative\n- [Serverless](#serverless) - Upgrade to Kubeless v1, function autoscaling\n- [Service Catalog](#service-catalog) - Google Cloud Platform Service Broker, modularization, new tooling for the Service Catalog UI tests\n- [kyma-project.io](#kyma-project-io) - Linking enabled, `master` branch available in Docs, blog landing page excerpts, improved styling of Docs, scrollspy in Docs.\n\n---\n\n\n## Application Connector\n\n### Remote Environment renaming\n\nAs a step towards having a consistent naming scheme for all Kyma components, we renamed Remote Environments to **Applications**. This way, the Application Connector finally connects Applications instead of Remote Environments. This change was introduced consistently across the whole Kyma, including Application Connector components and the Console UI.\n\n## Console\n\n### Luigi framework on board\n\nThe Console UI was refactored and it now uses the [Luigi](https://github.com/kyma-project/luigi/blob/master/README.md) framework to orchestrate client-side micro frontends. With Luigi on board, the Console allows for secure and technology-agnostic UI extensibility in Kyma. \n\n### New navigation structure\n\nThe new navigation in the Console provides a more structured content. Immediately after you sign in, you can see all the Namespaces in the main content area. You also have all the cluster-wide information at hand in the left navigation panel. \n\n![](./new-navigation-structure.png)\n\n### Backend modularization\n\nAs you know, we want Kyma to be highly modular and allow you to skip the installation of components you don't need. For example, if you have your own Istio, you should be able to decide if you want to install the one Kyma provides. This requires some refactoring of the Console backend to ensure proper resiliency in the Console UI. In this release, we completed the modularization of the backend and hid it under the feature flag. The reason why it is not enabled by default is that the Console UI still requires resiliency improvements to ensure no errors occur when a certain Kyma component is not installed. The backend modularization was done based on [this](https://github.com/kyma-project/community/issues/165) decision and the referenced proposal.\n\nTo quickly switch the Console backend to work in the modular mode, run the following command in the terminal:\n\n```\nkubectl set env deployment/core-ui-api MODULE_PLUGGABILITY=true -n kyma-system\n```\n\nFor more details about the introduced changes, read the related [documentation](/docs/0.6/components/console#details-ui-api-layer).\n\n### AsyncApi rendering  \n\nWe created a new component for rendering the [AsyncApi specification](https://www.asyncapi.com/). It now fully supports the specification and improves its look and feel when compared to the very minimalistic table we had before.\n\n![](./asyncapi-rendering.png)\n\nThe other great thing we did in this area was creating the component in a very generic way in a separate repository, and donating it to the [AsyncApi organization](https://github.com/asyncapi/asyncapi-react). This means we maintain it directly from the AsyncApi organization and you can use this component not only in Kyma.\n\nFeel free to play with it and give us your feedback:\n\n- Read the related [documentation](https://github.com/asyncapi/asyncapi-react#props).\n\n- Test the component [playground](https://playground.asyncapi.io/).\n\n- Customize the component quickly in the [sandbox project](https://codesandbox.io/s/5vz8l9zlmn).  \n\n\n## Continuous Integration\n\n### Prow in Kyma\n\nAfter a few weeks of hard work, the Prow Working Group finalized our plan of having an open-source CI tool for Kyma. All Kyma repositories and components are now handled by Prow. We defined the release pipeline and already tested it when preparing this release.\n\nThe important change that Prow introduces is that external contributors are now able to see build statuses on their pull requests. They can also check logs of all executed jobs. However, to (re)run the jobs on the pull requests, external contributors need to contact a Kyma organization member as, for security reasons, this functionality is available only to internal contributors.\n\nVisit our [`test-infra`](https://github.com/kyma-project/test-infra) repository and read more about Prow and its setup in Kyma.\n\n\n## Eventing\n\n### Knative adoption first steps\n\n- Kyma eventing use cases\n\n  To better align with the Knative eventing community, we created basic use cases of Kyma eventing. These use cases are meant to help us and the community to drive the Knative eventing evolution forward. Read more about the use cases [here](https://github.com/kyma-project/community/blob/master/collaboration/archive/wg-knative/kyma-eventing-use-case.md).\n\n- Kyma-Knative eventing installation design\n\n  As an initial step towards adopting Knative eventing, we need to have a design that allows us to install Kyma eventing on top of Knative eventing. This way, it will be possible to use Knative eventing as the underlying layer in Kyma, and achieve pluggability. Read more about our plan in [this](https://github.com/kyma-project/community/issues/166) proposal.\n\n\n## Installation\n\n### Environment Controller renaming\n\nThe Environment Controller that injects limit ranges, resource quotas, and default roles into each Namespace you create, was renamed to **Namespace Controller**. Its logic, however, is still the same and the `env=true` label remains untouched. It is also worth mentioning that the Environment-to-Namespace renaming process is ongoing. As part of it, we have already renamed Environments to **Namespaces** in the Console UI.\n\n### Wildcard DNS xip.io integration\n\nYou can now test Kyma on a cluster with a wildcard DNS provided by `xip.io`. \n\nWe introduced a new `xip-patch` job to Kyma as an optionally installed patch component. This patch issues a self-signed TLS certificate for the Kyma instance and configures the domain to `{LOADBALANCER_IP}.xip.io`, where `{LOADBALANCER_IP}` is the IP address of the assigned load balancer in the Kyma cluster. \n\nThis feature allows you to install and use Kyma easier, without owning a domain or issuing the TLS certificate on your own. This solution is not suitable for a production environment. It is only a playground you can use to get to know the product better. Read more about this optional feature [here](/docs/0.6/root/kyma#installation-install-kyma-on-a-gke-cluster-with-wildcard-dns).\n\n### Installation with Knative\n\nYou can now install Kyma together with Knative and expose APIs using the `knative-ingressgateway` service. Knative installation also enables future work on integrating Kyma eventing with Knative eventing.\n\nFind out how to [install](/docs/0.6/root/kyma#installation-installation-with-knative) Kyma with Knative.\n\n\n## Serverless\n\n### Upgrade to Kubeless v1\n\nKyma now uses Kubeless v1, the first stable release of Kubeless. \n\n### Function autoscaling\n\nLambda functions use the Kubernetes Horizontal Pod Autoscaler to scale the number of Pods based on CPU usage. To prevent any unexpected scaling, autoscaling was limited to the function type. We also created a frequently scheduled load test to validate the scaling behavior on Azure. \n\nThe Horizontal Pod Autoscaler is not enabled in your local Kyma installation by default, so you need to activate it manually. Read [this](/docs/0.6/root/kyma#installation-install-kyma-locally-from-the-release-enable-horizontal-pod-autoscaler-hpa-) document to learn how to do that.\n\n\n## Service Catalog\n\n### Google Cloud Platform Service Broker\n\nKyma provides the Google Cloud Platform (GCP) Service Broker. Apart from the GCP standard integration offering, you can configure the GCP Broker for a specific GCP project in a given Kyma Namespace. Install the GCP Service Broker by provisioning the **Google Cloud Platform Service Broker Provider** class exposed by the Helm Broker. Read more about this new feature [here](/docs/0.6/components/service-brokers#overview-google-cloud-platform-broker).\n\n![](./gcp-provider-class.png)\n\n### Modularization\n\nWe split the Kyma Service Catalog module into `service-catalog` and `service-catalog-addons`. The `service-catalog` module contains the core functionality and can be excluded from the Kyma installation if the Service Catalog is already installed on the cluster. The `service-catalog-addons` module contains all features built around the core, such as automatic bindings and the UI.\n\nFollow [these](/docs/0.6/root/kyma#installation-installation-with-custom-service-catalog-deployment) steps to install Kyma with a custom Service Catalog deployment.\n\n### New tooling for the Service Catalog UI tests\n\nThe Helm Broker Bundles repository supports the OSB API contract implemented by the Service Catalog v0.1.38. We released the testing bundle that allows you to perform end-to-end UI testing for the Service Catalog.\n\nRead more about the release details [here](https://github.com/kyma-project/bundles/releases).\n\n## kyma-project.io\n\n### Linking enabled\n\nIn the past, we kept postponing the implementation of linking between documents on the `kyma-project.io` website. As a result, you could see such a temporary solution in place:\n\n![](./document-references.png)\n\nIn short, there was a simple but not very useful text reference to other documents. This was due to the fact that we couldn't support linking of documents on GitHub and `kyma-project.io` at the same time. We decided, however, to give the website documentation a priority and treat Markdown files on GitHub only as document sources. As for the documentation in the Console, linking between the documents allows you to stay in the Console without being redirected to the website's Docs.\n\nAs a follow-up to this new improvement, we also added:\n\n- [Guidelines](https://github.com/kyma-project/community/blob/master/guidelines/content-guidelines/05-links-in-docs.md) for all contributors on how to add links to documents under `kyma/docs`.\n\n- The **chain link icon** on `kyma-project.io` that allows you to remember the link to a given document section easier. When you hover the cursor over any heading in the documentation, you can now see this icon. Once you click it, the address bar in the browser gets updated with the direct link to a given section.\n\n![](./linking.png)\n\n### Master branch available in Docs\n\nSince we introduced a website-centric approach to linking in the documentation, we wanted to make sure you don't fail at reading it on GitHub as a contributor, by being constantly redirected to the website's Docs. Before Kyma 0.6 Cairo, we only rendered the release-related documentation on `kyma-project.io/docs`. Now, as one of few open-source projects, we also render documentation for the [`master`](https://kyma-project.io/docs/master) branch. This documentation is updated on the website automatically, approx. 10 minutes after every merge of changes to the `master` branch.\n\nThe good news is that we also render the documentation for pre-releases on `kyma-project.io/docs`, whenever they are available.\n\n![](./master-branch.png)\n\n### Blog landing page excerpts \n\nWe started to render only condensed excerpts of the blog posts on the landing page. Thanks to this feature, the page isn't so overloaded with information and it's easier to scroll through the list of available posts.\n\n![](./excerpts.png)\n\nWe realize there are still some things to improve in this topic. We have already aggregated our plans for the blog section in [this](https://github.com/kyma-project/website/issues/142) issue. These improvements are on our roadmap but haven't been scheduled for any particular milestone yet. Feel free to contact us if you want to contribute and improve the overall user experience in this area.\n\n### Improved styling of Docs\n\nWith a few new tweaks in the style of the Docs section, we improved its readability. The font size change, better spacing, and sections separation make the reading more pleasurable.\n\nAnother important change is the width of the content container. It is now consistent with the GitHub UI, which significantly improves the contributor experience. All images and diagrams that you see in the pull request are the same in terms of width and size with what we render on `kyma-project.io` or in the documentation in the Console.\n\n![](./styling.png)\n\n### Scrollspy\n\nAs you have probably noticed from reading our documentation section on `kyma-project.io/docs`, we adhere to the rule of rendering the whole documentation for a given topic on one site. The downside of such an approach is that you get a lot of content on a single page and it is easy to get lost if you scroll too fast. This can be easily solved by the **Scrollspy** feature that we introduce in this release. This solution spies your location on the screen while scrolling. Thanks to this approach, the navigation panel is updated with the information on the document you are currently reading. When you scroll, we highlight the name of the document that you are reading at the moment.\n\nScrollspy is available on `kyma-project.io/docs`  and in the Console documentation.\n\n![](./scrollspy.gif)\n","excerpt":"The 0.6 release brings a lot of significant changes to Kyma. The main focus of this release was to finalize the work on Prow and replace the existing CI pipeline with the new architecture. Thus, we are excited to announce that Kyma finally uses an open-source CI tool and that Kyma 0.6 Cairo was already built using the Prow architecture. Apart from Prow, we made efforts to drive the Kyma-Knative integration forward, took further steps to modularize Kyma components and unify their naming, and significantly improved the website-related user experience. Explore the changes, try out the release, and get back to us with feedback and contribution!","fields":{"slug":"/blog/2019/1/14/release-notes-06","assetsPath":"/assets/blog-posts/2019-01-14-release-notes-0.6/","date":"January 14, 2019","postInfo":{"fileName":"release-notes-06","year":2019,"month":1,"day":14}},"frontmatter":{"title":"Kyma 0.6 Cairo","author":{"name":"Karolina Zydek, Technical Writer @Kyma"},"tags":["release-notes"],"type":"release","releaseTag":"0.6.0","redirectFrom":["/blog/release-notes-06"]}},"next":{"id":"44ad5608-b991-58e0-83cb-8f8bec6003a9","rawMarkdownBody":"\nThe 0.7 release brings you features and improvements to further enhance your Kyma experience. The alpha version of the Asset Store component gives you a solution for storing assets, such as documents, files, images, or API specifications. The ongoing CI development resulted in new pipelines which you can use to run Kyma installation and intercept any installation-related issues. The Kyma-Knative integration continues, making it possible to publish Events using Knative Eventing. Other significant improvements allow you to install Kyma on AKS, keep your resources secure with the new security model, and benefit from smoother and simplified Kyma deployment process.\n<!-- overview -->\n\nThe highlights of Kyma 0.7 Dublin include:\n\n- [Asset Store](#asset-store) - We introduced a brand new component for storing assets.\n- [Publishing Events with Knative](#event-publishing-with-knative-eventing) - We enabled Event publishing using Knative Eventing.\n- [New CI pipelines](#new-ci-pipelines) - We set up new CI pipelines to run Kyma installation on GKE and identify potential issues.\n- [Kyma on AKS](#kyma-on-aks) - We enabled Kyma installation on Azure Kubernetes Service (AKS).\n- [API Server Proxy autoscaling](#api-server-proxy-autoscaling), [removed kyma-default ResourceQuota](#kyma-default-resourcequota-removed), and [tweaked startup scripts](#startup-scripts-improvements) that simplify the Kyma deployment process.\n- [UI API Layer security model (GraphQL)](#ui-api-layer-security-model) - We switched from a custom Istio RBAC implementation to Kubernetes RBAC to bring you a lightweight and flexible solution for securing your resources.\n\n\n\nSee the overview of all changes in this release:\n\n\n- [Application Connector](#application-connector) - Increased Application Registry memory limit, API secured with client certificates\n- [Asset Store](#asset-store) - Asset Store introduction\n- [Console](#console) - UI views migrated to SAP Fiori Fundamentals, view modularization, node visibility restrictions\n- [Continuous Integration](#continuous-integration) - New CI pipelines\n- [Eventing](#eventing) - Publishing integrated with Knative Eventing\n- [Installation](#installation) - Upgrade to Minikube v0.33.0, upgrade to Kubernetes v1.11.5, Kyma on Azure Kubernetes Service, resource quota removed from system Namespaces\n- [Monitoring](#monitoring) - New alert rule for Persistent Volumes, optional Prometheus Operator\n- [Security](#security) - UI API Layer security model\n- [Service Catalog](#service-catalog) - Azure Service Broker runtime bundling and installation, one-time provisioning for Helm Broker, Service Catalog standalone installation\n- [Service Mesh](#service-mesh) - Default Istio sidecar injection, API Server Proxy autoscaling, startup scripts improvements\n- [Tracing](#tracing) - Tracing UI elements renaming\n\n\n---\n\n## Application Connector\n\n### Increased Application Registry memory limit\n\nWe have increased the default memory limit for the Application Registry payload to 5 MB to enable registration of extensive API specifications.\n\n### API secured with client certificates\n\nApplication Proxy allows you to secure APIs with generated client certificates. When you register an API with a client certificate, the Application Registry generates a ready-to-use certificate and key pair for this API to secure it. You can use the generated pair or replace it with your own certificate and key. For details, see [this](/docs/0.7/components/application-connector#tutorials-register-a-secured-api) document.\n\n### Known issues\n\nIf you run Kyma on Minikube, you must expose the Nginx Ingress Controller on the dedicated NodePort. However, URLs returned from the Connector Service do not include the value for this port. To fix it, update URLs manually using the information in [this](/docs/0.7/components/application-connector#api-application-registry) guide.\n\n## Asset Store\n\n### Asset Store introduction\n\nWe have introduced the alpha version of a new, Kubernetes-native solution for storing assets, such as documents, files, images, or API specifications.\n\nThis version of the Asset Store brings you the following features included in the [Asset Store proposal](https://github.com/kyma-project/community/blob/master/collaboration/sig-core/proposals/asset-store-proposal.md):\n\n* Fetching single files and packages (zip and tar files are supported for unpacking).\n* Starting Minio in the Minio Gateway mode to push resources to cloud providers, such as Azure or Google Cloud.\n* Providing custom validation services for assets to validate them before uploading them to the storage.\n* Providing custom mutation services for assets to modify them before uploading them to the storage.\n\n\nIn the coming releases, we plan to address the remaining features from the proposal. If you are interested in contributing, feel free to contact us on [Slack](http://slack.kyma-project.io). Meanwhile, read [this](/docs/0.7/components/asset-store#overview-overview) document to find out more about the Asset Store component.\n\n### Known issues\n\nSwitching Asset Store to recommended production mode, with Minio Gateway under the hood and Google Cloud Storage support, requires additional manual configuration. This is because for this release the Minio setup must support our legacy solution and default **content** bucket setup. The problem is caused by the limitation of Google Cloud Storage which requires the bucket name to be globally unique. For details and configuration steps read [this](https://github.com/kyma-project/kyma/blob/master/resources/assetstore/README.md) document.\n\n## Console\n\n### UI views migrated to SAP Fiori Fundamentals\n\nWe have migrated Console UI views to SAP Fiori Fundamentals. For the core Console UI we used the [Fundamental NGX](https://github.com/SAP/fundamental-ngx) library, and the UI views were built on [Fundamental React](https://github.com/SAP/fundamental-react). In addition to the migration, we added the missing UI tests and improved the existing ones. This way, we covered all end-to-end scenarios for the Service Catalog views and based them on the [testing bundle](https://github.com/kyma-project/addons/tree/master/addons/testing-0.0.1).\n\n### View modularization\n\nWe have extracted the optional views configuration from the core Console UI to create separate micro frontends. The micro frontends embedded in the Console receive information about installed Kyma modules to resiliently show the UI components relevant for these modules.\n\n### Node visibility restrictions\n\nThe visibility of navigation nodes in the Console UI now depends on user access rights. For example, only `kyma-admins` can see Kyma cluster settings.\n\n### Known issues\n\nBrowsers use cached file versions from previous Kyma releases instead of fetching new ones automatically. So far, there is no built-in cache breaker mechanism. To fix this issue, you need to manually clear the browser cache to make sure the Console UI works properly after installing a new Kyma version.\n\n## Continuous Integration\n\n### New CI pipelines\n\nWe have introduced nightly and weekly CI pipelines to perform tests and identify any potential issues, such as incorrect settings or memory leaks. The pipelines run Kyma on Google Kubernetes Engine using the master branch. If you are interested in details, go to `https://status.build.kyma-project.io/?type=periodic` and search for **kyma-gke-nightly** and **kyma-gke-weekly** jobs. We are also planning to add Slack notification for test results.\n\n## Eventing\n\n### Event Publishing with Knative Eventing\n\nAs a result of continuous Kyma-Knative integration, you can now deploy Kyma with a `--knative` feature flag. It allows you to use the Publish API provided by Knative Eventing.\n\n## Installation\n\n### Upgrade to Minikube v0.33.0\n\nWe have upgraded Minikube to version [0.33.0](https://github.com/kubernetes/minikube/blob/master/CHANGELOG.md#version-0330---2019-01-17). This means we can now use the stable `kubeadm` bootstrapper instead of the deprecated `localkube`. This helps us to leverage new features and improves the stability of local installations.\n\n### Upgrade to Kubernetes v1.11.5\n\nYou can now deploy Kyma using Kubernetes v1.11.5, to enjoy improved stability and new Kubernetes feature. One of them is the Status subresource for CRDs, which summarizes the current state of the object in the system.\n\n### Kyma on AKS\n\nYou can now smoothly deploy Kyma on an AKS cluster, using a chosen release version or even a particular commit. [Install](/docs/0.7/root/kyma#installation-install-kyma-on-an-aks-cluster) Kyma on a cluster using a proprietary installer based on a Kubernetes operator. If you want to try out Kyma on a cluster without assigning the cluster to a domain you own, you can use `xip.io` which provides a wildcard DNS for any IP address. For details, see [this guide](/docs/0.7/root/kyma#installation-install-kyma-on-an-aks-cluster-with-wildcard-dns).\n\n\n### kyma-default ResourceQuota removed  \n\nYou can install Kyma on Kubernetes clusters such as AKS or GKE, which allow Node autoscaling. Therefore, we removed the `kyma-default` ResourceQuota with a memory limit defined for resources. That change affects the `kyma-system`, `kyma-integration`, and `kyma-installer` Namespaces. Namespaces labelled with `env=true` still have the `kyma-default` ResourceQuota defined.\n\n## Monitoring\n\n### New alert rule for Persistent Volumes\n\nWe are constantly increasing the number of default alert rules, so you can receive alerts for affected components. The newest addition to the set is the alert rule for Persistent Volumes, activated when the volume used in the `kyma-system` Namespace exceeds 90%.\n\n### Optional Prometheus Operator\n\nThe Prometheus Operator module used to be required in any Kyma setup. To increase flexibility, we moved the ServiceManager CRD from the Prometheus Operator to the CRD set provided by Kyma. This way, you can define Service Management resources for your components without the need to install the Prometheus Operator.\n\n## Security\n\n###  UI API Layer security model\n\nWe have switched from a custom Istio RBAC implementation based on Envoy to Kubernetes RBAC. The reason was to avoid difficulties of developing and maintaining the LUA filters for Envoy. Additionally, the current implementation uses Go, which makes it more lightweight and flexible. Read the [documentation](/docs/0.7/components/security#details-graphql) to learn the details on securing resources in GraphQL using queries, mutations, and subscriptions.\n\n## Service Catalog\n\n### Azure Service Broker runtime bundling and installation\n\nKyma allows you to integrate with the Azure Service Broker in an easy way, and to use the vast range of Service Classes it provides. Each Service Class is comprehensively described in the [documentation](https://github.com/kyma-project/addons/tree/master/addons/azure-service-broker-0.0.1/docs). Read more about the Azure Service Broker [here](https://kyma-project.io/docs/0.7/components/helm-broker/#overview-azure-broker).\n\n### One-time provisioning for Helm Broker\n\nThe Helm Broker now supports the `provisionOnlyOnce` flag which defines that the bundle should be provisioned only once for a given Namespace. We have also added this flag to the Azure Service Broker and the GCP Service Broker bundle configurations. For details, read [this](/docs/0.7/components/helm-broker#configuration-binding-bundles) document.\n\n## Service Catalog standalone installation\n\nWe took further steps to modularize the Service Catalog by moving `service-catalog-addons` and `helm-broker` charts out of the `core` chart directory. This way, it's up to you to decide which components to install. When other Kyma components will be moved out of the `core` chart, you will be able to install Kyma with the Service Catalog only.\n\n## Service Mesh\n\n### Default Istio sidecar injection\n\nBy default, the Istio sidecar injector watches all Pod creation operations on all Namespaces and injects the newly created Pods with a sidecar proxy. To disable proxy injection for a Namespace, add the `istio-injection=disabled` label. To disable proxy injection on a Pod level, add the `sidecar.istio.io/inject:false` label to a Pod.\n\n### API Server Proxy autoscaling\n\nTo increase the availability of components, we have enabled the autoscaling of the API Server Proxy component. Based on the memory usage metric, the system decides whether you should deploy an additional instance of the API Server Proxy.\n\n### Startup scripts improvements\n\nTo simplify the local deployments, the startup scripts now accept the `--password` argument. Running the scripts with this argument allows you to install Kyma locally and set a password for the admin user. This way, you don't need to fetch and decode the password generated for every deployment.  \n\n\n## Tracing\n\n### Tracing UI elements renaming             \n\nWe renamed the services and operations displayed in the Tracing UI to provide clarity and better user experience.\n","excerpt":"The 0.7 release brings you features and improvements to further enhance your Kyma experience. The alpha version of the Asset Store component gives you a solution for storing assets, such as documents, files, images, or API specifications. The ongoing CI development resulted in new pipelines which you can use to run Kyma installation and intercept any installation-related issues. The Kyma-Knative integration continues, making it possible to publish Events using Knative Eventing. Other significant improvements allow you to install Kyma on AKS, keep your resources secure with the new security model, and benefit from smoother and simplified Kyma deployment process.","fields":{"slug":"/blog/2019/2/14/release-notes-07","assetsPath":"/assets/blog-posts/2019-02-14-release-notes-0.7/","date":"February 14, 2019","postInfo":{"fileName":"release-notes-07","year":2019,"month":2,"day":14}},"frontmatter":{"title":"Kyma 0.7 Dublin","author":{"name":"Barbara Szwarc, Technical Writer @Kyma"},"tags":["release-notes"],"type":"release","releaseTag":"0.7.0","redirectFrom":["/blog/release-notes-07"]}},"slidesBanner":{"bannerDuration":5000,"slides":[{"text":"Don't miss the session by Piotr Kopczynski at Helm Summit on September 11 at 15:47.","url":"https://helmsummit2019.sched.com/event/S8sS","startDate":"09/09/2019","endDate":"12/09/2019"}]},"locale":"en"}}}