{"componentChunkName":"component---src-views-roadmap-index-tsx","path":"/roadmap/website/142/","webpackCompilationHash":"aefb7e842b40c338951f","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"modalContext":{"ticket":{"title":"Improve experience and usability of blog section","body":"\r\n\r\n**Description**\r\n\r\n- add navigation\r\n- add filtering by tag\r\n- add atom/rss and feedburner or something better\r\n- make it possible to subscribe to given tag and not all\r\n- consider restricting adding tags to only a selected number of tags. Or maybe remove tags and introduce stale categories (https://blog.github.com/). Or do both\r\n- have paging in place\r\n\r\n**Reasons**\r\n\r\nWe are getting more and more posts, and more will come and we need to improve UX if blog section to a bigger scale\r\n","url":"https://github.com/kyma-project/website/issues/142","number":142,"labels":["area/community","enhancement"],"githubUrl":"https://github.com/kyma-project/website/issues/142","repository":{"name":"website","id":139847219,"issues":[]},"dueDate":"2020-12-31T11:00:00.000Z","zenHubUrl":"https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/website/142","release":{"release_id":"5c0791ef1a6a4c6bf4b314ce","title":"Future","description":"Items selected for development but not scheduled yet.","start_date":"2020-01-01T11:00:00.000Z","desired_end_date":"2020-12-31T11:00:00.000Z","created_at":"2018-12-05T08:53:03.286Z","closed_at":null,"state":"open"},"capability":{"displayName":"Core & Supporting","epicsLabels":["area/core-and-supporting","area/community"],"id":"core-and-supporting"}}},"inModal":true,"capabilities":[{"rawMarkdownBody":"\n## Scope\n\nThe Console/Microfrontends capability relates to the way in which a user interacts with the Kyma UI. It drives the development of the Console, a modular and extensible web user interface for managing all aspects of Kyma.\n\n## Vision\n\n* User Experience\n\n    * Provide easy and intuitive user interfaces for Kyma to support its users in the best possible way.\n    * Focus on a consistent user experience based on unified [Fiori 3 Fundamentals](https://sap.github.io/fundamental/components/index.html) style guides.\n    * Enable most common user journeys in the UI so that usage of CLI is not required.\n    * Don't hide the Kubernetes nature from the user but extend it with Kyma-specific user guidance.\n\n* Extensibility & Modularity\n\n    * Use [Luigi orchestration framework](https://github.com/kyma-project/luigi) as UI extension mechanism to ease customization.\n    * Compose user interfaces from modular and highly reusable UI components.\n    * Ensure consistent and correct usage of microfrontend-hosting.\n\n* Fast & Responsive\n    \n    * Quick loading time for user interfaces\n    * Load only the essential data that is needed for rendering user interfaces and nothing more (use GraphQL).\n    * Give the user feedback for his actions (use websockets).\n\n","fields":{"slug":null,"type":"console-microfrontends"},"frontmatter":{"displayName":"Console / Microfrontends","epicsLabels":["area/console","area/luigi"],"id":"console-microfrontends"}},{"rawMarkdownBody":"\n## Scope\n\nThe Core and Supporting capability provides functionalities required to deliver the content and its visual representation. For us, content is not only regular documentation but also specifications and contextual help.\nDue to the nature of the content and the number of different areas it sits in, the Core and Supporting capability provides also many generic tools that not only support content but also other aspects of the product.\n\nIn other words, if some content must be displayed in a given UI, the capability cares also about the rest of the UI of a given business functionality and its backend.\n\n## Vision\n\n- Content is written once and reused in different contexts in an efficient way on the documentation portal, as the inline help, or in the UI applications. In other words, we provide a headless CMS that is an abstraction layer on top of a more generic files storage solution that allows you to store any static content, such as client-side applications. This is possible because of:\n  - The Kubernetes-native way of delivering content that supports distributed content sourcing and modularity. It means that content is delivered only if the documented component is enabled.\n  - Generic reusable UI components for rendering documentation and specifications that are reusable in any context. For example, you can use them in the Service Catalog view to display documentation for ServiceClasses and their instances or in the Applications view to display the documentation of connected applications.\n  - Providing the UI support for rendering specifications such as Swagger for REST API, EDM for OData, or AsyncApi for any kind of asynchronous communication.\n  - The backend that allows for the reuse of content and specification details in any UI context.\n- To support the out-of-the-box rendering of content in the Console UI and also make it easy for the Kyma users to generate a standalone documentation portal for their services.\n- To support easy content development, enable templates integration, and allow for previewing the content before publishing.\n- To support automated content validation, like links, grammar, consistency, and specification compliance.\n\n\n\n","fields":{"slug":null,"type":"core-and-supporting"},"frontmatter":{"displayName":"Core & Supporting","epicsLabels":["area/core-and-supporting","area/community"],"id":"core-and-supporting"}},{"rawMarkdownBody":"\n## Scope\n\nThe Service Management capability wraps up the Service Catalog and the Service Brokers concepts. It enables applications that run in Kubernetes clusters to easily use internally and externally managed software offerings, such as a datastore service offered by a cloud provider. It also provides a way to list, provision, and automatically bind applications with services from the Service Brokers, with no need for detailed knowledge about how those services are created or managed.\n\n## Vision\n\nThe goal of the Service Management capability is to:\n* Ensure a well-configured and hardened installation of the Service Catalog.\n* Provide simple and self-guided Service Catalog UI flows.\n* Assure that the Service Catalog UI functionality always goes hand in hand with the Service Catalog CLI.\n* Support the Service Catalog with UI as a stand-alone solution.\n* Support automated service binding injection into various types of Kubernetes applications. \n* Allow registering new types of Kubernetes applications at runtime.\n* Enable connected remote applications in the Service Catalog using the Application Broker.\n* Enable extending the Service Catalog offerings with services that will be installed in Kubernetes using the Helm Broker and the `bundles` repository.\n* Provide a set of reusable services as bundles that will extend the Kyma installation.\n* Allow users to choose a set of Namespaces where a given Service Broker will be automatically registered and available. \n* Allow users to reduce a number of Service Classes that will be exposed by a given Broker.\n* Assure that the Service Catalog UI component for bindings is used in Deployment, Function, and other types of applications UI views.\n\n\n","fields":{"slug":null,"type":"service-management"},"frontmatter":{"displayName":"Service Management","epicsLabels":["area/service-catalog"],"id":"service-management"}}],"capabilitiesNavigation":[{"displayName":"Console / Microfrontends","id":"console-microfrontends"},{"displayName":"Core & Supporting","id":"core-and-supporting"},{"displayName":"Service Management","id":"service-management"}],"ids":{"Console / Microfrontends":"console-microfrontends","Core & Supporting":"core-and-supporting","Service Management":"service-management"},"slidesBanner":{"bannerDuration":5000,"slides":[{"text":"Don't miss the session by Piotr Kopczynski at Helm Summit on September 11 at 15:47.","url":"https://helmsummit2019.sched.com/event/S8sS","startDate":"09/09/2019","endDate":"12/09/2019"}]},"locale":"en"}}}