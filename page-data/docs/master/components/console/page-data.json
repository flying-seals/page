{"componentChunkName":"component---src-views-docs-index-tsx","path":"/docs/master/components/console","webpackCompilationHash":"aefb7e842b40c338951f","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"version":"master","versions":{"releases":["0.9"],"prereleases":["1.0"],"branches":["master"]},"content":{"id":"console","displayName":"Console","description":"Overall documentation for Console","type":"components","docs":[{"order":"01-01-console","title":"Overview","source":"\nThe Console is a web-based administrative UI for Kyma. It allows you to administer the Kyma functionality and manage the basic Kubernetes resources.\n\nThe Console uses the Luigi framework to extend the UI functionality with custom micro front-ends and bring more functionality to the existing UI. You can define the micro front-ends using dedicated CustomResourceDefinitions (CRDs).\n\nUse the following CRs to modify the Console UI:\n\n- The MicroFrontend custom resource allows you to plug in micro front-ends for a specific Namespace.\n- The ClusterMicroFrontend custom resource allows you to plug in micro front-ends for the entire Cluster.\n- The BackendModule custom resource allows you to enable Console Backend Service modules.\n  ","type":"Overview"},{"order":"03-01-uiextensibility","title":"UI extensibility","source":"\nThe Kyma Console UI uses the [Luigi framework](https://github.com/kyma-project/luigi) to allow you to seamlessly extend the UI content with custom micro front-ends.\n\n## Console UI interaction with micro front-ends\n\nWhen rendering the navigation, the Kyma Console UI calls a dedicated API endpoint to check if there are any micro front-ends defined in the current context. The current context comprises the current Namespace and all global cluster micro front-ends. All the defined micro front-ends and cluster micro front-ends are mapped to the navigation model as navigation nodes with remote **viewUrls**. When you click the navigation node, the system loads the content of the micro front-end into the content area of the Console. At the same time, the Console sends the current context data to the micro front-end to ensure it is initialized properly.\n\n## Micro front-end\n\nA micro front-end is a standalone web application which is developed, tested and deployed independently from the Kyma Console application. It uses the Luigi Client library to ensure proper communication with the Console application. When you implement and deploy a micro front-end, you can plug it to the Kyma Console as a UI extension using dedicated CustomResourceDefinitions.\n\n### Luigi Client\n\nThe Luigi Client enables communication between the micro front-end and the Console application.\nInclude [Luigi Client](https://www.npmjs.com/package/@kyma-project/luigi-client) in the micro front-end's codebase as an npm dependency.\n\n```\nnpm i @kyma-project/luigi-client\n```\nIt helps to read the context data that is sent by the Console when the user activates the micro front-end in the UI.\nUse the following example to read the context data:\n\n```\nLuigiClient.addInitListener((data)=>{\n    // do stuff with the context data\n});\n```\n\nThe Luigi Client facilitates communication between the micro front-end and the Console. Use the Luigi Client API to request the Console to navigate from the micro front-end to any other route available in the application:\n\n```\nLuigiClient.linkManager().navigate('/targetRoute', null, true)\n```\n\nFor API details, see [Luigi Client API documentation](https://github.com/kyma-project/luigi/blob/master/docs/luigi-client-api.md).\n\n\n## Add a micro front-end\n\nUse the CustomResourceDefinitions to extend the Console functionality and configure different scopes for your micro front-ends.\n\n### Micro front-end for a specific Namespace\n\nYou can define a micro front-end visible only in the context of a specific Namespace.\n\n[Here](./assets/mf-namespaced.yaml) you can find a sample micro front-end entity using the **namespace** metadata attribute to enable the micro front-end **only** for the production Namespace.\n\nUsing this yaml file in your Kyma cluster results in a **Tractors Overview** micro front-end navigation node displayed under the **Hardware** category. It is available **only** in the production Namespace.\n\n![MF-one-namespace](./assets/mf-one-namespace.png)\n\n### Cluster-wide micro front-end\nYou can define a cluster-wide micro front-end available for all Namespaces in the side navigation.\n\n[Here](./assets/cmf-environment.yaml) you can find a sample ClusterMicroFrontend entity using the `namespace` value for the **placement** attribute to make the micro front-end available for all Namespaces in the cluster.\n\nUsing this yaml file in your Kyma cluster results in a **Tractors Overview** micro front-end navigation node displayed under the **Hardware** category. It is available **for every** Namespace in your cluster.\n\n### Cluster-wide micro front-end for the administration section\nYou can define a cluster micro front-end visible in the **Administration** section of the Console.\n\n[Here](./assets/cmf-cluster.yaml) you can find a sample of such ClusterMicroFrontend entity using the `cluster` value for placement  **attribute** to ensure the micro front-end is visible in the **Administration** section.\n\n![CMF-admin-section](./assets/cmf-admin-section.png)\n","type":"Details"},{"order":"03-02-console-backend-service","title":"Console Backend Service","source":"\nThe Console Backend Service is a backend service which provides an API for all views of the Console UI. This service consumes the Kubernetes API and exposes a simplified GraphQL API to allow frontends to perform Kubernetes resource operations.\n\n> **NOTE:** Read [this](/docs/master/components/security#details-graphql) security document for more information about the Kyma GraphQL implementation.\n\n## Cache\n\nFor GraphQL queries, the Console Backend Service uses caching which is based on Informers from the Kubernetes Go client. There are separate cache stores for every Kubernetes resource. The stores are synchronized when the service starts. After cache synchronization, a single connection with the Kubernetes API server is established and any event related to one of the observed resources updates the corresponding cache store. This logic ensures that cache stores are always up-to-date without sending multiple requests to the Kubernetes API server.\n\n## Modularization\n\nThe Console Backend Service consists of the Kubernetes resource logic and cache for different domains, such as the Service Catalog, Application, or Kubeless. The Console Backend Service introduces modularization changes which are based on toggling modules while the server is running. The enabled module synchronizes cache for its resource and enables the module's logic for all server requests. If you disable a given module, every GraphQL query, mutation, and subscription related to this module returns an error.\n\nThese are the available Console Backend Service pluggable modules which contain the GraphQL resolver logic, where:\n- `apicontroller` relates to the API Controller.\n- `authentication` relates to IDP Presets.\n- `application` relates to the Application Connector.\n- `content` relates to documentation.\n- `kubeless` relates to Serverless.\n- `servicecatalog` relates to the Service Catalog, including Service Classes, Service Instances, and Service Bindings.\n- `servicecatalogaddons` relates to the Service Catalog add-ons, such as ServiceBindingUsage, and UsageKinds.\n\nTo enable a given module, install the corresponding Kyma component. It includes the BackendModule custom resource with the same name as the name of a given module.\n","type":"Details"},{"order":"03-03-CR-security-guidelines","title":"Security guidelines for MicroFrontend and ClusterMicroFrontend CRs","source":"\nFor security reasons, follow the listed guidelines when you configure the web server for the MicroFrontend or ClusterMicroFrontend:\n - Make the MicroFrontend or ClusterMicroFrontend accessible only through HTTPS.\n - Make the **Access-Control-Allow-Origin** HTTP header as restrictive as possible.\n - Set the **X-Content-Type HTTP** header to `nosniff`.\n - Set the **X-Frame-Options** HTTP header to `sameorigin` or `allow-from ALLOWED_URL`.\n - Add Content Security Policies (CSPs).\n","type":"Details"},{"order":"06-01-microfrontend","title":"MicroFrontend","source":"\nThe `microfrontends.ui.kyma-project.io` CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to extend the Kyma Console. It allows you to extend the Console for the specific Namespace. A micro frontend is added to the Console automatically based on the `yaml` file. To avoid naming conflicts with the core system, the root node receives the `mf-` prefix in the URL. Additionally, the **navigationContext** and **viewGroup** [node configuration](https://github.com/kyma-project/luigi/blob/master/docs/navigation-parameters-reference.md#node-parameters) parameters are set to allow simple navigation. To get the up-to-date CRD and show the output in the `yaml` format, run this command:\n\n```\nkubectl get crd microfrontends.ui.kyma-project.io -o yaml\n```\n\n## Sample custom resource\n\nThis is a sample CR that extends the Console.\n\n```yaml\napiVersion: ui.kyma-project.io/v1alpha1\nkind: MicroFrontend\nmetadata:\n  name: sample-microfrontend\n  namespace: production\nspec:\n  version: 0.0.1\n  category: Sample Category\n  viewBaseUrl: https://sample-microfrontend-url.com\n  navigationNodes:\n    - label: Sample List\n      navigationPath: items\n      viewUrl: /\n    - label: Details\n      navigationPath: items/:id\n      showInNavigation: false\n      viewUrl: /:id\n```\n\nThis table lists all the possible parameters of a given resource together with their descriptions:\n\n\n| Field   |      Mandatory?      |  Description |\n|:----------:|:-------------:|:------|\n| **metadata.name** | **YES** | Specifies the name of the CR. |\n| **metadata.namespace** | **YES** | Specifies the target Namespace for the CR. |\n| **spec.version** | **NO** | Specifies the version of the micro front-end. |\n| **spec.category** | **NO** | Specifies the category name under which the micro front-end appears in the navigation. |\n| **spec.viewBaseUrl** | **YES** |  Specifies the address of the micro front-end. The address has to begin with `https://`.  |\n| **spec.navigationNodes** | **YES** | The list of navigation nodes specified for the micro front-end. |\n| **spec.navigationNodes.label** | **YES** | Specifies the name used to display the micro front-end's node in the Console UI. |\n| **spec.navigationNodes.navigationPath** | **NO** | Specifies the path used for routing within the Console. |\n| **spec.navigationNodes.viewUrl** | **NO** | Specifies the URL used to display the content of a micro front-end. |\n| **spec.navigationNodes.showInNavigation** | **NO** | The Boolean that specifies if the micro front-end's node is visible in the navigation or not. |\n","type":"Custom Resource"},{"order":"06-02-clustermicrofrontend","title":"ClusterMicroFrontend","source":"\nThe `clustermicrofrontends.ui.kyma-project.io` CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to extend the Kyma Console. It allows you to extend the Console for the entire Cluster. The cluster micro frontend  is added to Console automatically based on the `yaml` file. To avoid naming conflicts with the core system, the root node receives the `cmf-` prefix in the URL. Additionally,  **navigationContext** and **viewGroup**  [node configuration](https://github.com/kyma-project/luigi/blob/master/docs/navigation-parameters-reference.md#node-parameters) parameters are set to allow simple navigation. To get the up-to-date CRD and show the output in the `yaml` format, run this command:\n\n```\nkubectl get crd clustermicrofrontends.ui.kyma-project.io -o yaml\n```\n\n## Sample custom resource\n\nThis is a sample CR that extends the Console.\n\n```yaml\napiVersion: ui.kyma-project.io/v1alpha1\nkind: ClusterMicroFrontend\nmetadata:\n  name: sample-microfrontend\nspec:\n  version: 0.0.1\n  category: category-name\n  viewBaseUrl: https://sample-microfrontend-url.com\n  placement: cluster\n  navigationNodes:\n    - label: Sample List\n      navigationPath: items\n      viewUrl: /\n    - label: Details\n      navigationPath: items/:id\n      showInNavigation: false\n      viewUrl: /:id\n```\n\nThis table lists all the possible parameters of a given resource together with their descriptions:\n\n\n| Field   |      Mandatory?      |  Description |\n|:----------:|:-------------:|:------|\n| **metadata.name** | **YES** | Specifies the name of the CR. |\n| **spec.version** | **NO** | Specifies the version of the cluster micro front-end. |\n| **spec.category** | **NO** | Defines the category name under which the cluster micro front-end appears in the navigation. |\n| **spec.viewBaseUrl** | **YES** | Specifies the address of the cluster micro front-end. The address has to begin with `https://`.  |\n| **spec.placement** | **NO** |  Specifies if the cluster micro front-end should be visible in the Namespace navigation or settings navigation. The placement value has to be either `namespace` or `cluster`. |\n| **spec.navigationNodes** | **YES** | The list of navigation nodes specified for the cluster micro front-end. |\n| **spec.navigationNodes.label** | **YES** | Specifies the name used to display the cluster micro front-end's node in the Console UI. |\n| **spec.navigationNodes.navigationPath** | **NO** | Specifies the path that is used for routing within the Console. |\n| **spec.navigationNodes.viewUrl** | **NO** | Specifies the URL used to display the content of the cluster micro-front end. |\n| **spec.navigationNodes.showInNavigation** | **NO** | The Boolean that specifies if the cluster micro front-end's node is visible in the navigation or not. |\n","type":"Custom Resource"},{"order":"06-03-backendmodule","title":"BackendModule","source":"\nThe `backendmodules.ui.kyma-project.io` CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to enable Console Backend Service modules.\n\nTo get the up-to-date CRD and show the output in the `yaml` format, run this command:\n\n```\nkubectl get crd backendmodules.ui.kyma-project.io -o yaml\n```\n\n## Sample custom resource\n\nThis is a sample CR that enables the `servicecatalog` module in the Console Backend Service:\n\n```\napiVersion: ui.kyma-project.io/v1alpha1\nkind: BackendModule\nmetadata:\n  name: servicecatalog\n```\n\n## Custom resource parameters\n\nThis table lists all the possible parameters of a given resource together with their descriptions:\n\n| Parameter   |      Mandatory      |  Description |\n|:----------:|:-------------:|:------|\n| **metadata.name** |    **YES**   | Specifies the name of the CR. It must be the same as the name of a given Console Backend Service module. |\n\n## Related resources and components\n\nThese components use this CR:\n\n| Component   |   Description |\n|:----------:|:------|\n| Console Backend Service |  The component reacts to every action of adding or deleting the BackendModule custom resource and enables or disables a given Console Backend Service module accordingly. |\n","type":"Custom Resource"}]},"navigation":{"root":[{"displayName":"Kyma","id":"kyma"}],"components":[{"displayName":"Security","id":"security"},{"displayName":"Service Catalog","id":"service-catalog"},{"displayName":"Helm Broker","id":"helm-broker"},{"displayName":"Application Connector","id":"application-connector"},{"displayName":"Event Bus","id":"event-bus"},{"displayName":"Service Mesh","id":"service-mesh"},{"displayName":"Serverless","id":"serverless"},{"displayName":"Monitoring","id":"monitoring"},{"displayName":"Tracing","id":"tracing"},{"displayName":"API Gateway","id":"api-gateway"},{"displayName":"Logging","id":"logging"},{"displayName":"Backup","id":"backup"},{"displayName":"Console","id":"console"},{"displayName":"Asset Store","id":"asset-store"},{"displayName":"Headless CMS","id":"headless-cms"}]},"manifest":{"root":[{"displayName":"Kyma","id":"kyma"}],"components":[{"displayName":"Security","id":"security"},{"displayName":"Service Catalog","id":"service-catalog"},{"displayName":"Helm Broker","id":"helm-broker"},{"displayName":"Application Connector","id":"application-connector"},{"displayName":"Event Bus","id":"event-bus"},{"displayName":"Service Mesh","id":"service-mesh"},{"displayName":"Serverless","id":"serverless"},{"displayName":"Monitoring","id":"monitoring"},{"displayName":"Tracing","id":"tracing"},{"displayName":"API Gateway","id":"api-gateway"},{"displayName":"Logging","id":"logging"},{"displayName":"Backup","id":"backup"},{"displayName":"Console","id":"console"},{"displayName":"Asset Store","id":"asset-store"},{"displayName":"Headless CMS","id":"headless-cms"}]},"assetsPath":"/assets/docs/master/console/docs/assets/","docsType":"components","topic":"console","slidesBanner":{"bannerDuration":5000,"slides":[{"text":"Don't miss the session by Piotr Kopczynski at Helm Summit on September 11 at 15:47.","url":"https://helmsummit2019.sched.com/event/S8sS","startDate":"09/09/2019","endDate":"12/09/2019"}]},"locale":"en"}}}