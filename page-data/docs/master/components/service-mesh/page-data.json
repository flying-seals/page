{"componentChunkName":"component---src-views-docs-index-tsx","path":"/docs/master/components/service-mesh","webpackCompilationHash":"aefb7e842b40c338951f","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"version":"master","versions":{"releases":["0.9"],"prereleases":["1.0"],"branches":["master"]},"content":{"id":"service-mesh","displayName":"Service Mesh","description":"Overall documentation for Service Mesh","type":"components","docs":[{"order":"01-01-service-mesh","title":"Overview","source":"\nKyma Service Mesh is the component responsible for service-to-service communication, proxying, service discovery, traceability, and security. Kyma Service Mesh\nis based on [Istio](https://istio.io/docs/concepts/what-is-istio/) open platform. The main principle of Kyma Service Mesh operation is the process of injecting Pods of every service with an Envoy - a sidecar proxy which intercepts the communication between the services and regulates it by applying and enforcing the rules you create. Kyma [Dex](https://github.com/coreos/dex), which is also a part of the Service Mesh, allows you to integrate any [OpenID Connect](https://openid.net/connect/)-compliant identity provider or a SAML2-based enterprise authentication server with your solution.\n\nSee this [Istio diagram](https://istio.io/docs/concepts/what-is-istio/arch.svg) to understand the relationship between the Istio components and Services.\n"},{"order":"03-01-sidecar-proxy-injection","title":"Sidecar Proxy Injection","source":"\nBy default, the Istio sidecar injector watches all Pod creation operations on all Namespaces and injects the newly created Pods with a sidecar proxy.\n\nYou can disable sidecar proxy injection for either an entire Namespace or a single Deployment.\n\n* To disable sidecar proxy injection for a Namespace, set the **istio-injection** label value to `disabled` for the Namespace in which you want to disable the sidecar proxy injection. Use this command: `kubectl label namespace {YOUR_NAMESPACE} istio-injection=disabled`                                                                                                                                                                                \n* To disable sidecar proxy injection for a Deployment, add this annotation to the Deployment configuration file: `sidecar.istio.io/inject: \"false\"`\n\nRead the [Installing the Sidecar](https://istio.io/docs/setup/kubernetes/additional-setup/sidecar-injection/) document to learn more about sidecar proxy injection.\n","type":"Details"},{"order":"03-02-istio-patch","title":"Istio patch","source":"\nAs a core component, Istio installs with every Kyma deployment by default. The installation consists of two steps:\n\n1. Istio installs using the official, raw charts from the currently supported release. The charts that are currently\nused are stored in the `resources/istio` directory. The installation is customized by enabling security in Istio.\n\n>**NOTE:** Every installation of Istio for Kyma must have security enabled.\n\n2. A custom Istio patch is applied to further customize the Istio installation. A Kubernetes job introduces these changes:\n  - Sets a memory limit for every sidecar.\n  - Modifies Istio components to use Zipkin in the `kyma-system` Namespace, instead of the default `istio-system`.\n  - Adds a webhook to the Istio Pilot.\n  - Creates a TLS certificate for the Ingress Gateway.\n  - Deletes all resources related to the `prometheus`, `tracing`, `grafana`, and `servicegraph`charts.\n  - Enables sidecar injection in all Namespaces, except those labeled with `istio-injection: disabled`.\n\nTo learn more about the custom Istio patch applied in Kyma, see the `components/istio-kyma-patch/` directory.\n\n## Use an existing Istio installation with Kyma\n\nYou can use an existing installation of Istio running on Kubernetes with Kyma. The custom Istio patch is applied to such an installation.\n\n>**NOTE:** You cannot skip applying the Istio patch in the Kyma installation process.\n\nTo allow such implementation, you must install Kyma without Istio. Read [this](/docs/master/root/kyma#installation-custom-component-installation) document for more details.\n","type":"Details"},{"order":"03-03-istio-rbac","title":"Istio RBAC configuration","source":"\nAs a core component, Istio is installed with Kyma by default. The [ClusterRbacConfig](https://istio.io/docs/reference/config/authorization/istio.rbac.v1alpha1/) custom resource (CR), which defines the global behavior of Istio, is created as a part of the installation process.\n\nThe default Istio RBAC configuration is defined in [this](https://github.com/kyma-project/kyma/blob/master/resources/core/charts/istio-rbac/templates/rbac-config.yaml) file. \n\n## Override the default configuration\n\nTo override the default configuration of Istio RBAC, edit the ClusterRbacConfig CR on a running cluster. This CR is created in the `kyma-system` Namespace and therefore requires admin permissions to edit it. \n\nTo show the current Istio RBAC configuration in the `yaml` format, run: \n```bash\nkubectl get -n kyma-system clusterrbacconfig -o yaml\n```\n\nTo edit the Istio RBAC configuration, run: \n```bash\nkubectl edit -n kyma-system clusterrbacconfig\n```\n\n> **NOTE:** The `ClusterRbacConfig` object is a singleton, which means that only a single object of this kind can exist in a cluster. Additionally, the only valid name for the object is `default`. As such, the best way to customize Istio RBAC is by editing the existing `ClusterRbacConfig` object. \n","type":"Details"}]},"navigation":{"root":[{"displayName":"Kyma","id":"kyma"}],"components":[{"displayName":"Security","id":"security"},{"displayName":"Service Catalog","id":"service-catalog"},{"displayName":"Helm Broker","id":"helm-broker"},{"displayName":"Application Connector","id":"application-connector"},{"displayName":"Event Bus","id":"event-bus"},{"displayName":"Service Mesh","id":"service-mesh"},{"displayName":"Serverless","id":"serverless"},{"displayName":"Monitoring","id":"monitoring"},{"displayName":"Tracing","id":"tracing"},{"displayName":"API Gateway","id":"api-gateway"},{"displayName":"Logging","id":"logging"},{"displayName":"Backup","id":"backup"},{"displayName":"Console","id":"console"},{"displayName":"Asset Store","id":"asset-store"},{"displayName":"Headless CMS","id":"headless-cms"}]},"manifest":{"root":[{"displayName":"Kyma","id":"kyma"}],"components":[{"displayName":"Security","id":"security"},{"displayName":"Service Catalog","id":"service-catalog"},{"displayName":"Helm Broker","id":"helm-broker"},{"displayName":"Application Connector","id":"application-connector"},{"displayName":"Event Bus","id":"event-bus"},{"displayName":"Service Mesh","id":"service-mesh"},{"displayName":"Serverless","id":"serverless"},{"displayName":"Monitoring","id":"monitoring"},{"displayName":"Tracing","id":"tracing"},{"displayName":"API Gateway","id":"api-gateway"},{"displayName":"Logging","id":"logging"},{"displayName":"Backup","id":"backup"},{"displayName":"Console","id":"console"},{"displayName":"Asset Store","id":"asset-store"},{"displayName":"Headless CMS","id":"headless-cms"}]},"assetsPath":"/assets/docs/master/service-mesh/docs/assets/","docsType":"components","topic":"service-mesh","slidesBanner":{"bannerDuration":5000,"slides":[{"text":"Don't miss the session by Piotr Kopczynski at Helm Summit on September 11 at 15:47.","url":"https://helmsummit2019.sched.com/event/S8sS","startDate":"09/09/2019","endDate":"12/09/2019"}]},"locale":"en"}}}