{"componentChunkName":"component---src-views-docs-index-tsx","path":"/docs/master/components/service-catalog","webpackCompilationHash":"aefb7e842b40c338951f","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"version":"master","versions":{"releases":["0.9"],"prereleases":["1.0"],"branches":["master"]},"content":{"id":"service-catalog","displayName":"Service Catalog","description":"Overall documentation for Service Catalog","type":"components","docs":[{"order":"01-01-service-catalog","title":"Overview","source":"\nThe Service Catalog groups reusable, integrated services from all [Service Brokers](#service-brokers-overview) registered in Kyma. Its purpose is to provide an easy way for Kyma users to access services that the Service Brokers manage and use them in their applications.\n\nDue to the fact that Kyma runs on Kubernetes, you can easily instantiate a service that a third party provides and maintains, such as a database. You can consume it from Kyma without extensive knowledge about the clustering of such a datastore service and the responsibility for its upgrades and maintenance. You can also easily provision an instance of the software offering that a Service Broker registered in Kyma exposes, and bind it to an application running in the Kyma cluster.\n\nYou can perform the following operations in the Service Catalog:\n\n- Expose the consumable services by listing them with all the details, including the documentation and the consumption plans.\n- Consume the services by provisioning them in a given Namespace.\n- Bind the services to the applications through Secrets.\n\n>**NOTE:** Kyma uses the Service Catalog based on the one provided by [Kubernetes](https://github.com/kubernetes-incubator/service-catalog). Kyma also supports the experimental version of the Service Catalog without api-server and etcd. Read [this](#details-experimental-features) document for more information.\n"},{"order":"02-01-architecture-service-catalog","title":"Architecture","source":"\nThe diagram and steps describe the Service Catalog workflow and the roles of specific cluster and Namespace-wide resources in this process:\n\n![Service Catalog flow](./assets/service-catalog-flow.svg)\n\n1. The Kyma installation results in the registration of the default Service Brokers in the Kyma cluster. The Kyma administrator can manually register other ClusterServiceBrokers in the Kyma cluster. The Kyma user can also register a Service Broker in a given Namespace.\n\n2. Inside the cluster, each ClusterServiceBroker exposes services that are ClusterServiceClasses in their different variations called ClusterServicePlans. Similarly, the ServiceBroker registered in a given Namespace exposes ServiceClasses and ServicePlans only in this specific Namespace.\n\n3. In the Console UI or CLI, the Kyma user lists all exposed cluster-wide and Namespace-specific services and requests to create instances of those services in the Namespace.\n\n4. The Kyma user creates bindings to the ServiceInstances to allow the given applications to access the provisioned services.\n"},{"order":"03-01-resources","title":"Resources","source":"\nThis document includes an overview of resources that the Kyma Service Catalog provides.\n\n>**NOTE:** The \"Cluster\" prefix in front of resources means they are cluster-wide. Resources without that prefix refer to the Namespace scope.   \n\n* **ClusterServiceBroker** is an endpoint for a set of managed services that a third party offers and maintains.\n\n* **ClusterServiceClass** is a managed service exposed by a given ClusterServiceBroker. When a cluster administrator registers a new Service Broker in the Service Catalog, the Service Catalog controller obtains new services exposed by the Service Broker and renders them in the cluster as ClusterServiceClasses. A ClusterServiceClass is synonymous with a service in the Service Catalog.\n\n* **ClusterServicePlan** is a variation of a ClusterServiceClass that offers different levels of quality, configuration options, and the cost of a given service. Contrary to the ClusterServiceClass, which is purely descriptive, the ClusterServicePlan provides technical information to the ClusterServiceBroker on this part of the service that the ClusterServiceBroker can expose.\n\n* **ServiceBroker** is any Service Broker registered in a given Namespace where it exposes ServiceClasses and ServicePlans that are available only in that Namespace.\n\n* **ServiceClass**  is a Namespace-scoped representation of a ClusterServiceClass. Similarly to the ClusterServiceClass, it is synonymous with a service in the Service Catalog.\n\n* **ServicePlan** is a Namespace-scoped representation of a ClusterServicePlan.\n\n* **ServiceInstance** is a provisioned instance of a ClusterServiceClass to use in one or more cluster applications.\n\n* **ServiceBinding** is a link between a ServiceInstance and an application that cluster users create to request credentials or configuration details for a given ServiceInstance.\n\n* **Secret** is a basic resource to transfer credentials or configuration details that the application uses to consume a ServiceInstance. The service binding process leads to the creation of a Secret.\n\n* **ServiceBindingUsage** is a Kyma custom resource that allows the ServiceBindingUsage controller to inject Secrets into a given application.\n\n* **UsageKind** is a Kyma custom resource that defines which resources can be bound with the ServiceBinding and how to bind them.\n","type":"Details"},{"order":"03-02-provisioning-and-binding","title":"Provisioning and binding","source":"\nProvisioning a service means creating an instance of a service. When you consume a specific ClusterServiceClass or a ServiceClass, and the system provisions a ServiceInstance, you need credentials for this service. To obtain credentials, create a ServiceBinding resource using the Service Catalog API. One instance can have numerous bindings to use in the application. When you raise a binding request, the system returns the credentials in the form of a Secret. The system creates a Secret in a given Namespace.\n\n> **NOTE:** The security in Kyma relies on the Kubernetes concept of a [Namespace](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) which is a security boundary. If the Secret exists in the Namespace, the administrator can inject it to any Deployment. The Service Broker cannot prevent other applications from consuming a created Secret. Therefore, to ensure a stronger level of isolation and security, use a dedicated Namespace and request separate bindings for each Deployment.\n\nThe Secret allows you to run the service successfully. However, a problem appears each time you need to change the definition of the `yaml` file in the Deployment to specify the Secrets' usage. The manual process of editing the file is tedious and time-consuming. Kyma handles it by offering a custom resource called ServiceBindingUsage. This custom resource applies the Kubernetes [PodPreset](https://kubernetes.io/docs/concepts/workloads/pods/podpreset/) resource and allows you to enforce an automated flow in which the Binding Usage Controller injects ServiceBindings into a given Deployment or Function.\n\n\n## Provisioning and binding flow\n\nThe diagram shows an overview of interactions between all resources related to Kyma provisioning and binding, and the reverting, deprovisioning, and unbinding operations.\n\n![Kyma provisioning and binding](./assets/provisioning-and-binding.png)\n\nThe process of provisioning and binding invokes the creation of three custom resources:\n- ServiceInstance\n- ServiceBinding\n- ServiceBindingUsage\n\nThe system allows you to create these custom resources in any order, but within a timeout period.\n\nWhen you invoke the deprovisioning and unbinding actions, the system deletes all three custom resources. Similar to the creation process dependencies, the system allows you to delete ServiceInstance and ServiceBinding in any order, but within a timeout period. However, before you delete the ServiceBinding, make sure you remove the ServiceBindingUsage first. For more details, see the [section](#details-provisioning-and-binding-delete-a-servicebinding) on deleting a ServiceBinding.\n\n### Provision a service\n\nTo provision a service, create a ServiceInstance custom resource. Generally speaking, provisioning is a process in which the Service Broker creates a new instance of a service. The form and scope of this instance depends on the Service Broker.\n\n![Kyma provisioning](./assets/provisioning.png)\n\n### Create a ServiceBinding\n\nKyma binding operation consists of two phases:\n\n1. The system gathers the information necessary to connect to the ServiceInstance and authenticate it. The Service Catalog handles this phase directly, without the use of any additional Kyma custom resources.\n2. The system must make the information it collected available to the application. Since the Service Catalog does not provide this functionality, you must create a ServiceBindingUsage custom resource.\n\n![Kyma binding](./assets/binding.png)\n\n> **TIP:** You can create the ServiceBinding and ServiceBindingUsage resources at the same time.\n\n### Define other types of resources\n\nThe UsageKind is a cluster-wide custom resource which allows you to bind a ServiceInstance to any kind of resource. By default, Kyma provides two UsageKinds which enable binding either to a Deployment or Function. You can add more UsageKinds if you want to bind your ServiceInstance to other types of resources. The UsageKind contains information on how the binding to these custom resources is conducted. The ServiceBindingUsage uses this information to inject Secrets to the application.\n\n![Kyma UsageKind](./assets/usagekind.png)\n\n\n### Delete a ServiceBinding\n\nKyma unbinding can be achieved in two ways:\n- Delete the ServiceBindingUsage. The Service Binding Usage Controller deletes the Secret injection, but the Secret itself still exists in the Namespace.\n- Delete the ServiceBinding. It deletes the Secret and triggers the deletion of all related ServiceBindingUsages.\n\n![Kyma unbinding](./assets/unbinding.png)\n\n### Deprovision a service\n\nTo deprovision a given service, delete the ServiceInstance custom resource. As part of this operation, the Service Broker deletes any resource created during the provisioning. When the process completes, the service becomes unavailable.\n\n![Kyma deprovisioning](./assets/deprovisioning.png)\n\n> **NOTE:** You can deprovision a service only if no corresponding ServiceBinding for a given ServiceInstance exists.\n","type":"Details"},{"order":"03-03-backup-and-restore","title":"Service Catalog backup and restore","source":"\nIn the production setup, the Service Catalog uses the etcd database cluster which is defined in the Service Catalog [`etcd-stateful`](https://github.com/kyma-project/kyma/blob/master/resources/service-catalog/charts/etcd-stateful/templates) sub-chart. The [etcd backup operator](https://github.com/coreos/etcd-operator/blob/master/doc/user/walkthrough/backup-operator.md) executes the backup procedure.\n\n### Backup\n\nTo execute the backup process, set the following values in the [`core`](https://github.com/kyma-project/kyma/blob/master/resources/core/values.yaml) chart:\n\n| Property name              | Description |\n|---------------------------------------------------|---|\n| **global.etcdBackup.enabled**                       | If set to `true`, the [`etcd-operator`](https://github.com/kyma-project/kyma/blob/master/resources/core/charts/etcd-operator) chart and the Service Catalog backup [sub-chart](https://github.com/kyma-project/kyma/blob/master/resources/service-catalog/charts/etcd-stateful/templates/05-backup-job.yaml) install the CronJob which periodically executes the [etcd backup](https://github.com/kyma-project/kyma/tree/master/components/etcd-backup-job) application. The etcd-operator also creates a [Secret](https://github.com/kyma-project/kyma/blob/master/resources/core/charts/etcd-operator/templates/etcd-backup-abs-storage-secret.yaml) with the **storage-account** and **storage-key** keys. For more information on how to configure the backup CronJob, see the [etcd backup](https://github.com/kyma-project/kyma/blob/master/components/etcd-backup-job/README.md) documentation. |\n| **global.etcdBackup.containerName**                 | The Azure Blob Storage (ABS) container to store the backup. |\n| **etcd-operator.backupOperator.abs.storageAccount** | The name of the storage account for the ABS. It stores the value for the **storage-account** Secret key. |\n| **etcd-operator.backupOperator.abs.storageKey**     | The key value of the storage account for the ABS. It stores the value for the **storage-key** Secret key. |\n\n> **NOTE:** If you set the **storageAccount**, **storageKey**, and **containerName** properties, the **global.etcdBackup.enabled** must be set to `true`.\n\n### Restore\n\nFollow these steps to restore the etcd cluster from the existing backup.\n\n1. Export the **ABS_PATH** environment variable with the path to the last successful backup file.\n```bash\nexport ABS_PATH=$(kubectl get cm -n kyma-system sc-recorded-etcd-backup-data -o=jsonpath='{.data.abs-backup-file-path-from-last-success}')\nexport BACKUP_FILE_NAME=etcd.backup\n```\n\n2. Download the backup to the local workstation using the portal or the [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest). Set the downloaded file path:\n```bash\nexport BACKUP_FILE_NAME=/path/to/downloaded/file\n```\n\n3. Copy the backup file to every running Pod of the StatefulSet.\n```bash\nfor i in {0..2};\ndo\nkubectl cp ./$BACKUP_FILE_NAME kyma-system/service-catalog-etcd-stateful-$i:/$BACKUP_FILE_NAME\ndone\n```\n\n4. Restore the backup on every Pod of the StatefulSet.\n```bash\nfor i in {0..2};\ndo\n  remoteCommand=\"etcdctl snapshot restore /$BACKUP_FILE_NAME \"\n  remoteCommand+=\"--name service-catalog-etcd-stateful-$i --initial-cluster \"\n  remoteCommand+=\"service-catalog-etcd-stateful-0=https://service-catalog-etcd-stateful-0.service-catalog-etcd-stateful.kyma-system.svc.cluster.local:2380,\"\n  remoteCommand+=\"service-catalog-etcd-stateful-1=https://service-catalog-etcd-stateful-1.service-catalog-etcd-stateful.kyma-system.svc.cluster.local:2380,\"\n  remoteCommand+=\"service-catalog-etcd-stateful-2=https://service-catalog-etcd-stateful-2.service-catalog-etcd-stateful.kyma-system.svc.cluster.local:2380 \"\n  remoteCommand+=\"--initial-cluster-token etcd-cluster-1 \"\n  remoteCommand+=\"--initial-advertise-peer-urls https://service-catalog-etcd-stateful-$i.service-catalog-etcd-stateful.kyma-system.svc.cluster.local:2380\"\n\n  kubectl exec service-catalog-etcd-stateful-$i -n kyma-system -- sh -c \"rm -rf service-catalog-etcd-stateful-$i.etcd\"\n  kubectl exec service-catalog-etcd-stateful-$i -n kyma-system -- sh -c \"rm -rf /var/run/etcd/backup.etcd\"\n  kubectl exec service-catalog-etcd-stateful-$i -n kyma-system -- sh -c \"$remoteCommand\"\n  kubectl exec service-catalog-etcd-stateful-$i -n kyma-system -- sh -c \"mv -f service-catalog-etcd-stateful-$i.etcd /var/run/etcd/backup.etcd\"\n  kubectl exec service-catalog-etcd-stateful-$i -n kyma-system -- sh -c \"rm $BACKUP_FILE_NAME\"\ndone\n```\n\n5. Delete old Pods.\n```bash\nkubectl delete pod service-catalog-etcd-stateful-0 service-catalog-etcd-stateful-1 service-catalog-etcd-stateful-2 -n kyma-system\n```\n","type":"Details"},{"order":"03-04-experimental-features","title":"Experimental features","source":"\nThe Service Catalog requires its own instance of api-server and etcd, which increases the complexity of the cluster configuration and maintenance costs.\nIn case of api-server downtime, all Service Catalog resources are unavailable.\nFor this reason, Kyma developers contribute to the Service Catalog project to remove the dependency on these external components and replace them \nwith a native Kubernetes solution - CustomResourceDefinitions (CRDs).\n\n### Enable CRDs\n\nTo enable the CRDs feature in the Service Catalog, override the **service-catalog-apiserver.enabled** and **service-catalog-crds.enabled** parameters\nin the installation file:\n- For the local installation, modify the `service-catalog-overrides` ConfigMap in the [installer-config-local.yaml](https://github.com/kyma-project/kyma/blob/master/installation/resources/installer-config-local.yaml.tpl#L73) file:\n    ```\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: service-catalog-overrides\n      namespace: kyma-installer\n      labels:\n        installer: overrides\n        component: service-catalog\n        kyma-project.io/installation: \"\"\n    data:\n      etcd-stateful.etcd.resources.limits.memory: 256Mi\n      etcd-stateful.replicaCount: \"1\"\n      service-catalog-apiserver.enabled: \"false\"\n      service-catalog-crds.enabled: \"true\"\n    ```\n- For the cluster installation, add the `service-catalog-overrides` ConfigMap to the [installer-config-cluster.yaml.tpl](https://github.com/kyma-project/kyma/blob/master/installation/resources/installer-config-cluster.yaml.tpl) file: \n    ```\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: service-catalog-overrides\n      namespace: kyma-installer\n      labels:\n        installer: overrides\n        component: service-catalog\n        kyma-project.io/installation: \"\"\n    data:\n      service-catalog-apiserver.enabled: \"false\"\n      service-catalog-crds.enabled: \"true\"\n    ```\n","type":"Details"},{"order":"06-01-service-binding-usage","title":"ServiceBindingUsage","source":"\nThe `servicebindingusages.servicecatalog.kyma-project.io` CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to inject Secrets to the application. To get the up-to-date CRD and show the output in the `yaml` format, run this command:\n\n```\nkubectl get crd servicebindingusages.servicecatalog.kyma-project.io -o yaml\n```\n\n## Sample custom resource\n\nThis is a sample resource in which the ServiceBindingUsage injects a Secret associated with the `redis-instance-binding` ServiceBinding to the `redis-client` Deployment in the `production` Namespace. This example has the **conditions.status** field set to `true`, which means that the ServiceBinding injection is successful. If this field is set to `false`, the **message** and **reason** fields appear.\n\n```\napiVersion: servicecatalog.kyma-project.io/v1alpha1\nkind: ServiceBindingUsage\nmetadata:\n name: redis-client-binding-usage\n namespace: production\n \"ownerReferences\": [\n    {\n       \"apiVersion\": \"servicecatalog.k8s.io/v1beta1\",\n       \"kind\": \"ServiceBinding\",\n       \"name\": \"redis-instance-binding\",\n       \"uid\": \"65cc140a-db6a-11e8-abe7-0242ac110023\"\n    }\n ],\nspec:\n serviceBindingRef:\n   name: redis-instance-binding\n usedBy:\n   kind: deployment\n   name: redis-client\n parameters:\n   envPrefix:\n     name: \"pico-bello\"\nstatus:\n    conditions:\n    - lastTransitionTime: 2018-06-26T10:52:05Z\n      lastUpdateTime: 2018-06-26T10:52:05Z\n      status: \"True\"\n      type: Ready\n```\n\n## Custom resource parameters\n\nThis table lists all the possible parameters of a given resource together with their descriptions:\n\n\n| Parameter   |      Mandatory      |  Description |\n|----------|:-------------:|------|\n| **metadata.name** |    YES   | Specifies the name of the CR. |\n| **metadata.namespace** |    YES   | Specifies the Namespace in which the CR is created. |\n| **metadata.ownerReferences** |    YES   | Contains an ownerReference to the binding specified at **spec.serviceBindingRef.name** field if the binding exists. |\n| **spec.serviceBindingRef.name** |    YES   | Specifies the name of the ServiceBinding. |\n| **spec.usedBy** |    YES   | Specifies the application into which the Secret is injected. |\n| **spec.usedBy.kind** |    YES   | Specifies the name of the UsageKind custom resource. |\n| **spec.usedBy.name** |    YES   | Specifies the name of the application. |\n| **spec.parameters.envPrefix** |    NO   | Defines the prefix of the environment variables that the ServiceBindingUsage injects. The prefixing is disabled by default. |\n| **spec.parameters.envPrefix.name** |    YES   | Specifies the name of the prefix. This field is mandatory if **envPrefix** is specified.  |\n| **status.conditions** |    NO   | Specifies the state of the ServiceBindingUsage.|\n| **status.conditions.lastTransitionTime** |    NO   | Specifies time when the Service Binding Usage Controller processes the ServiceBindingUsage for the first time or when the **status.conditions.status** field changes. |\n| **status.conditions.lastUpdateTime** |    NO   | Specifies the time of the last ServiceBindingUsage condition update. |\n| **status.conditions.status** |    NO   |  Specifies whether the status of the **status.conditions.type** field is `true` or `false`. |\n| **status.conditions.type** |    NO   | Defines the type of the condition. The value of this field is always `ready`. |\n| **message** |    NO   | Describes in a human-readable way why the ServiceBinding injection has failed. |\n| **reason** |    NO   | Specifies a unique, one-word, CamelCase reason for the condition's last transition. |\n\n\n## Related resources and components\n\nThese are the resources related to this CR:\n\n| Custom resource   |   Description |\n|----------|------|\n| [UsageKind](#custom-resource-usagekind) |  Provides information on where to inject Secrets. |\n| [ServiceBinding](https://kubernetes.io/docs/concepts/extend-kubernetes/service-catalog/#api-resources) |  Provides Secrets to inject.  |\n\n\nThese components use this CR:\n\n| Component   |   Description |\n|----------|------|\n| Service Binding Usage Controller |  Reacts to every action of creating, updating, or deleting ServiceBindingUsages in all Namespaces, and uses ServiceBindingUsage data to inject binding. |\n| Console Backend Service |  Exposes the given CR to the Console UI. It also allows you to create and delete a ServiceBindingUsage. |\n","type":"Custom Resource"},{"order":"06-02-usage-kind","title":"UsageKind","source":"\nThe `usagekinds.servicecatalog.kyma-project.io` CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to define which resources can be bound with the ServiceBinding and how to bind them. To get the up-to-date CRD and show the output in the `yaml` format, run this command:\n\n```\nkubectl get crd usagekinds.servicecatalog.kyma-project.io -o yaml\n```\n\n## Sample custom resource\n\nThis is a sample resource that allows you to bind a given resource with the ServiceBinding. This example has a **resource** section specified as `function`. You can adjust this section to point to any other kind of resource.\n\n```\napiVersion: servicecatalog.kyma-project.io/v1alpha1\nkind: UsageKind\nmetadata:\n   name: function\nspec:\n   displayName: Function\n   resource:\n     group: kubeless.io\n     kind: function\n     version: v1beta1\n   labelsPath: spec.deployment.spec.template.metadata.labels\n```\n\n## Custom resource parameters\n\nThis table lists all the possible parameters of a given resource together with their descriptions:\n\n\n| Parameter   |      Mandatory      |  Description |\n|----------|:-------------:|------|\n| **metadata.name** |    YES   | Specifies the name of the CR. |\n| **spec.displayName** |    YES   | Provides a human-readable name of the UsageKind. |\n| **spec.resource** |    YES   | Specifies a resource which is bound with the ServiceBinding. The target resource is specified by its resource group, kind, and version. |\n| **spec.resource.group** |    YES   | Specifies the group of the resource. |\n| **spec.resource.kind** |    YES   | Specifies the kind of the resource. |\n| **spec.resource.version** |    YES   | Specifies the version of the resource. |\n| **spec.labelsPath** |    YES   | Specifies a path to the key that contains labels which are later injected into Pods. |\n\n\n## Related resources and components\n\nThese are the resources related to this CR:\n\n| Custom resource   |   Description |\n|----------|------|\n| [ServiceBindingUsage](#custom-resource-servicebindingusage) |  Contains the reference to the UsageKind. |\n\nThese components use this CR:\n\n| Component   |   Description |\n|----------|------|\n| Service Binding Usage Controller |  Uses the UsageKind **spec.resource** and **spec.labelsPath** parameters to find a resource and a path to which it should inject Secrets. |\n| Console Backend Service |  Exposes the given CR to the Console UI. |\n","type":"Custom Resource"},{"order":"07-01-cli-reference","title":"CLI reference","source":"\nManagement of the Service Catalog is based on Kubernetes resources and the custom resources specifically defined for Kyma. Manage all of these resources through [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/).\n\n## Details\n\nThis section describes the resource names to use in the kubectl command line, the command syntax, and examples of use.\n\n### Resource types\n\nService Catalog operations use the following resources:\n\n| Singular name      | Plural name         |\n| ------------------ |---------------------|\n|clusterservicebroker|clusterservicebrokers|\n|clusterserviceclass |clusterserviceclasses|\n|clusterserviceplan  |clusterserviceplans  |\n|secret              |secrets              |\n|servicebinding      |servicebindings      |\n|servicebindingusage |servicebindingusages |\n|servicebroker       |servicebrokers       |\n|serviceclass        |serviceclasses       |\n|serviceinstance     |serviceinstances     |\n|serviceplan         |serviceplans         |\n\n\n### Syntax\n\nFollow the `kubectl` syntax, `kubectl {command} {type} {name} {flags}`, where:\n\n* {command} is any command, such as `describe`.\n* {type} is a resource type, such as `clusterserviceclass`.\n* {name} is the name of a given resource type. Use {name} to make the command return the details of a given resource.\n* {flags} specifies the scope of the information. For example, use flags to define the Namespace from which to get the information.\n\n### Examples\nThe following examples show how to create a ServiceInstance, how to get a list of ClusterServiceClasses and a list of ClusterServiceClasses with human-readable names, a list of ClusterServicePlans, and a list of all ServiceInstances.\n\n* Create a ServiceInstance using the example of the Redis ServiceInstance for the 0.1.40 version of the Service Catalog:\n\n```\ncat <<EOF | kubectl create -f -\napiVersion: servicecatalog.k8s.io/v1beta1\nkind: ServiceInstance\nmetadata:\n  name: my-instance\n  namespace: stage\n\nspec:\n  clusterServiceClassExternalName: redis\n  clusterServicePlanExternalName: micro\n  parameters:\n     \"imagePullPolicy\": \"Always\"\nEOF\n```\n\n* Get the list of all ClusterServiceClasses:\n```\nkubectl get clusterserviceclasses\n```\n* Get the list of all ClusterServiceClasses and their human-readable names:\n```\nkubectl get clusterserviceclasses -o=custom-columns=NAME:.metadata.name,EXTERNAL\\ NAME:.spec.externalName\n```\n\n* Get the list of all ClusterServicePlans and associated ClusterServiceClasses:\n```\nkubectl get clusterserviceplans -o=custom-columns=NAME:.metadata.name,EXTERNAL\\ NAME:.spec.externalName,EXTERNAL\\ SERVICE\\ CLASS:.spec.clusterServiceClassRef\n```\n* Get the list of all ServiceInstances from all Namespaces:\n```\nkubectl get serviceinstances --all-namespaces\n```\n"},{"order":"08-01-broker-registration","title":"Register a broker in the Service Catalog","source":"\nThis tutorial shows you how to register a broker in the Service Catalog. The broker can be either a Namespace-scoped ServiceBroker or a cluster-wide ClusterServiceBroker. Follow this guide to register a cluster-wide or Namespace-scoped version of the sample [UPS Broker](https://github.com/kubernetes-incubator/service-catalog/tree/master/charts/ups-broker).\n\n## Prerequisites\n\n* [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl)\n* [helm](https://github.com/helm/helm#install)\n\n## Steps\n\n1. Clone the [`service-catalog`](https://github.com/kubernetes-incubator/service-catalog) repository:\n    ```\n    git clone https://github.com/kubernetes-incubator/service-catalog.git\n    ```\n\n2. Check out one of the official tags. For example:\n\n    ```\n    git fetch --all --tags --prune\n    git checkout tags/v0.1.39 -b v0.1.39\n    ```\n3. Create the `ups-broker` Namespace:\n    ```\n    kubectl create namespace ups-broker\n    ```\n\n4. Run this command to install the chart with the `ups-broker` name in the `ups-broker` Namespace:\n      ```\n     helm install ./charts/ups-broker --name ups-broker --namespace ups-broker\n     ```\n\n5. Register a broker:\n  * Run this command to register a ClusterServiceBroker:\n     ```\n    kubectl create -f ./contrib/examples/walkthrough/ups-clusterservicebroker.yaml\n    ```\n  * To register the UPS Broker as a ServiceBroker in the `ups-broker` Namespace, run:\n    ```\n    kubectl create -f ./contrib/examples/walkthrough/ups-servicebroker.yaml -n ups-broker\n    ```     \n    After you successfully register your ServiceBroker or ClusterServiceBroker, the Service Catalog periodically fetches services from this broker and creates ServiceClasses or ClusterServiceClasses from them.\n\n6. Check the status of your broker:\n  * To check the status of your ClusterServiceBroker, run:\n     ```\n    kubectl get clusterservicebrokers ups-broker -o jsonpath=\"{.status.conditions}\"\n    ```\n  * To check the status of the ServiceBroker, run:\n    ```\n    kubectl get servicebrokers ups-broker -n ups-broker -o jsonpath=\"{.status.conditions}\"\n    ```\n\n    The output looks as follows:\n    ```\n    {\n    \"lastTransitionTime\": \"2018-10-26T12:03:32Z\",\n    \"message\": \"Successfully fetched catalog entries from broker.\",\n    \"reason\": \"FetchedCatalog\",\n    \"status\": \"True\",\n    \"type\": \"Ready\"\n    }\n    ```\n\n7. View Service Classes that this broker provides:\n  * To check the ClusterServiceClasses, run:\n      ```\n     kubectl get clusterserviceclasses\n      ```\n  * To check the ServiceClasses, run:\n      ```\n      kubectl get serviceclasses -n ups-broker\n      ```\n\n      These are the UPS Broker Service Classes:\n      ```\n      NAME                                   EXTERNAL NAME\n      4f6e6cf6-ffdd-425f-a2c7-3c9258ad2468   user-provided-service\n      5f6e6cf6-ffdd-425f-a2c7-3c9258ad2468   user-provided-service-single-plan\n      8a6229d4-239e-4790-ba1f-8367004d0473   user-provided-service-with-schemas\n      ```\n","type":"Tutorials"},{"order":"11-01-overview","title":"Overview","source":"\nUI Contracts are contracts between the Service Catalog views in the Kyma Console UI and the [Open Service Broker API](https://www.openservicebrokerapi.org/) (OSBA) specification.\n\nThere are three types of OSBA fields:\n* Mandatory fields which are crucial to define\n* Optional fields which you can but do not have to define\n* Conventions which are proposed fields that can be passed in the **metadata** object\n\nThe Service Catalog is OSBA-compliant, which means that you can register a Service Class that has only the mandatory fields.\nHowever, it is recommended to provide more detailed Service Class definitions for better user experience.\n\nIn the Kyma Console UI, there are two types of views:\n- Catalog view\n- Instances view\n\nRead the [Catalog view](#ui-contracts-catalog-view) and [Instances view](#ui-contracts-instances-view) documents to:\n- Understand the contract mapping between the Kyma Console UI and the OSBA\n- Learn which fields are primary to define, to provide the best user experience\n- See which fields are used as fallbacks if you do not provide the primary ones\n","type":"UI Contracts"},{"order":"11-02-catalog-view","title":"Catalog view","source":"\nThis document describes the mapping of [OSBA service objects](https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/spec.md#service-objects), [plan objects](https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/spec.md#plan-object), and [conventions](https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/profile.md#service-metadata) in the Kyma Console Catalog view.\n\n## Catalog page\n\nThese are the OSBA fields used in the main Catalog page:\n\n| Number | OSBA field                        | Fallbacks  | Description                                                                                                                |\n| ------ | --------------------------------- | ---------- | -------------------------------------------------------------------------------------------------------------------------- |\n| (1)    | **metadata.displayName**              | **name***, **id***| If **metadata.displayName**, **name**, or **id** fields are not present, a given Service Class does not appear on the landing page. |\n| (2)    | **metadata.providerDisplayName**      | -          | If not provided, UI does not display this information.                                                                     |\n| (3)    | **description\\***                     | -          | If not provided, UI does not display this information.                                                                     |\n| (4)    | **metadata.labels\\*\\***               | -          | If not provided, UI does not display any labels.                                                                           |\n| (5)    | **metadata.labels.local\\*\\*** and/or **metadata.labels.showcase\\*\\*** | - | If not provided, it is not possible to choose a Basic Filter.                                                 |\n| (6)    | **tags**                              | -          | If not provided, it is not possible to filter by Tag.                                                                         |\n| (7)    | **metadata.labels.connected-app\\*\\*** | -          | If not provided, it is not possible to choose Connected Applications.                                                          |\n| (8)    | **metadata.providerDisplayName**      | -          | If not provided, it is not possible to filter by Provider.                                                                    |\n\n\\*Fields with an asterisk are required OSBA attributes.\n\n\\*\\***metadata.labels** is the custom object that is not defined in the [OSBA metadata convention](https://github.com/openservicebrokerapi/servicebroker/blob/master/profile.md#service-metadata).\n\n![alt text](./assets/catalog-page.png)\n\n## Catalog Details page\n\nThese are the OSBA fields used in the detailed Service Class view:\n\n| Number | OSBA field                   | Fallbacks      | Description                                                       |\n| ------ | ---------------------------- | -------------- | ----------------------------------------------------------------- |\n| (1)    | **metadata.displayName**         | **name***, **id***     | -                                                                 |\n| (2)    | **metadata.providerDisplayName** | -              | If not provided, UI does not display this information.            |\n| (3)    | not related to OSBA          | -              | -                                                                 |\n| (4)    | **metadata.documentationUrl**    | -              | If not provided, the link with documentation does not appear.     |\n| (5)    | **metadata.supportUrl**          | -              | If not provided, the link with support does not appear.           |\n| (6)    | **tags**                         | -              | If not provided, UI does not display tags.                        |\n| (7)    | **metadata.longDescription**     | **description\\***  | If not provided, the **General Information** panel does not appear. |\n| (8)    | not related to OSBA          | -              | -                                                                 |\n\n\\*Fields with an asterisk are required OSBA attributes.\n\n![alt text](./assets/catalog-details-page.png 'Catalog Details')\n\n## Add to Namespace\n\nThese are the OSBA fields used in the **Add to Namespace** window:\n\n| Number | OSBA field                | Fallbacks            | Description |\n| ------ | ------------------------- | -------------------- | ----------- |\n| (1)    | **plan.metadata.displayName** | **plan.name***, **plan.id*** |             |\n| (2)    | not related to OSBA       | -                    |             |\n| (3)    | not related to OSBA       | -                    |             |\n\n\\*Fields with an asterisk are required OSBA attributes.\n\n![alt text](./assets/add-to-namespace.png)\n\n### Plan schema\n\nA [plan object](https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/spec.md#plan-object) in the OSBA can have the **schemas** field. Schema is used to generate a form which enables provisioning of the Service Class.\n\nSee the sample schema:\n\n```json\n{\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"properties\": {\n            \"imagePullPolicy\": {\n              \"default\": \"IfNotPresent\",\n              \"enum\": [\n                \"Always\",\n                \"IfNotPresent\",\n                \"Never\"\n              ],\n              \"title\": \"Image pull policy\",\n              \"type\": \"string\"\n            },\n            \"redisPassword\": {\n              \"default\": \"\",\n              \"format\": \"password\",\n              \"description\": \"Redis password. Defaults to a random 10-character alphanumeric string.\",\n              \"title\": \"Password (Defaults to a random 10-character alphanumeric string)\",\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\"\n        }\n```\n\nThis sample renders in the following way:\n\n![alt text](./assets/schema-form.png)\n\nFollow these rules when you design schema objects:\n\n* If the field has limited possible values, use the **enum** field. It renders as a dropdown menu, so it prevents the user from making mistakes.\n* If the field is required for the Service Class, mark it as **required**. UI blocks provisioning if you do not fill in the required fields.\n* Fill the **default** value for a field whenever possible, it makes the provisioning faster.\n* If the field, such as the password field, must be starred, use the **format** key with the **password** value.\n","type":"UI Contracts"},{"order":"11-03-instances-view","title":"Instances View","source":"\nThis document describes the mapping of [OSBA service objects](https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/spec.md#service-objects), [plan objects](https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/spec.md#plan-object), and [conventions](https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/profile.md#service-metadata) in the Kyma Console Instances view.\n\n## Service Instances page\n\nThese are the OSBA fields used in the main Instances page:\n\n| Number | OSBA field                | Fallbacks            | Description                                                                  |\n| ------ | ------------------------- | -------------------- | ---------------------------------------------------------------------------- |\n| (1)    | not related to OSBA       | -                    | It is the name of the Service Instance, created during service provisioning. |\n| (2)    | **metadata.displayName**      | **name***, **id***           | If not provided, UI does not display this information.                       |\n| (3)    | **plan.metadata.displayName** | **plan.name***, **plan.id***| If not provided, UI does not display this information.                       |\n| (4)    | not related to OSBA       | -                    |                                                                              |\n| (5)    | not related to OSBA       | -   | |                                                                             |\n\n\n\\*Fields with an asterisk are required OSBA attributes.\n\n![alt text](./assets/instances.png 'Service Instances')\n\n## Service Instance Details page\n\nThese are the OSBA fields used in the detailed Service Instance view:\n\n| Number | OSBA field                | Fallbacks            | Description                                           |\n| ------ | ------------------------- | -------------------- | ----------------------------------------------------- |\n| (1)    | **metadata.displayName**      | **name***, **id***           | -                                                     |\n| (2)    | **plan.metadata.displayName** | **plan.name***, **plan.id*** | -                                                     |\n| (3)    | **metadata.documentationUrl** | -                    | If not provided, UI does not display this information |\n| (4)    | **metadata.supportUrl**       | -                    | If not provided, UI does not display this information |\n| (5)    | **description\\***             | -                    | If not provided, UI does not display this information |\n\n\\*Fields with an asterisk are required OSBA attributes.\n\n![alt text](./assets/instances-details.png 'Service Instance Details')\n","type":"UI Contracts"},{"order":"13-01-service-brokers","title":"Overview","source":"\nA Service Broker is a server compatible with the [Open Service Broker API](https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md) specification. Each Service Broker registered in Kyma presents the services it offers to the Service Catalog and manages their lifecycle.\n\nThe Service Catalog lists all services that the Service Brokers offer. Use the Service Brokers to:\n* Provision and deprovision an instance of a service.\n* Create and delete a ServiceBinding to link a ServiceInstance to an application.\n\nEach of the Service Brokers available in Kyma performs these operations in a different way. See the documentation of a given Service Broker to learn how it operates.\n\nThe Kyma Service Catalog is currently integrated with the following Service Brokers:\n\n* [Application Broker](/docs/master/components/application-connector#architecture-application-connector-components-application-broker)\n* [Helm Broker](/docs/master/components/helm-broker/#overview-overview)\n\nYou can also install these brokers using the Helm Broker's bundles:\n\n* [Google Cloud Platform (GCP) Broker](#service-brokers-gcp-broker)\n* [Azure Service Broker](#service-brokers-azure-service-broker)\n\nTo get the bundles that the Helm Broker provides, go to the [`bundles`](https://github.com/kyma-project/bundles) repository. To build your own Service Broker, follow the [Open Service Broker API](https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md) specification. For details on how to register a sample Service Broker in the Service Catalog, see [this](#tutorials-register-a-broker-in-the-service-catalog) tutorial.\n\n>**NOTE:** The Service Catalog has the Istio sidecar injected. To enable the communication between the Service Catalog and Service Brokers, either inject Istio sidecar into all brokers or disable mutual TLS authentication.\n","type":"Service Brokers"},{"order":"13-02-gcp-broker","title":"GCP Broker","source":"\n>**NOTE:** The Google Cloud Platform (GCP) Service Broker is in the experimental phase.\n\nGoogle Cloud Platform (GCP) Service Broker is an implementation of the [Open Service Broker](https://www.openservicebrokerapi.org/) (OSB) API hosted on GCP. It simplifies the delivery of GCP services to applications that run on Kyma. By creating GCP resources and managing their corresponding permissions, the Service Broker makes it easy to consume GCP services from within a Kubernetes cluster.\n\nKyma provides Namespace-scoped Google Cloud Platform Service Broker. In each Namespace, you can configure the Google Cloud Platform Broker against different Google Cloud Platforms. Install the Google Cloud Platform Service Broker by provisioning the **Google Cloud Platform Service Broker** class provided by the Helm Broker.\n\n![Service Catalog view without GCP Classes](./assets/gcp-class.png)\n\nOnce you provision the **Google Cloud Platform Service Broker** class, the Google Cloud Platform Service Broker classes are available in the Service Catalog view in a given Namespace.\n\n![Service Catalog view without GCP Classes](./assets/gcp-classes.png)\n\nFor more information about provisioning the **Google Cloud Platform Service Broker** class, go to the service class overview in the Service Catalog UI.\n","type":"Service Brokers"},{"order":"13-03-azure-broker","title":"Azure Service Broker","source":"\nThe Microsoft Azure Service Broker is an open-source, [Open Service Broker](https://www.openservicebrokerapi.org/)-compatible API server that provisions managed services in the Microsoft Azure public cloud. Kyma provides Namespace-scoped Azure Service Broker. In each Namespace, you can configure the Azure Service Broker against different subscriptions. Install the Azure Service Broker by provisioning the **Azure Service Broker** class provided by the Helm Broker.\n\n![azure broker class](./assets/azure-service-broker-class.png)\n\nOnce you provision the **Azure Service Broker** class, the Azure Service Broker classes are available in the Service Catalog view in a given Namespace.\nThe Azure Service Broker provides these Service Classes to use with the Service Catalog:\n\n* Azure SQL Database\n* Azure Database for MySQL\n* Azure Redis Cache\n* Azure Application Insights\n* Azure CosmosDB\n* Azure Event Hubs\n* Azure IoT Hub\n* Azure Key Vault\n* Azure SQL Database\n* Azure SQL Database Failover Group\n* Azure Service Bus\n* Azure Storage\n* Azure Text Analytics\n\nSee the details of each Service Class and its specification in the Service Catalog UI.\nFor more information about the Service Brokers, see [this](#service-brokers-service-brokers) document.\n\n>**NOTE:** Kyma uses the Microsoft Azure Service Broker open source project. To ensure the best performance and stability of the product, Kyma uses a version of the Azure Service Broker that precedes the newest version released by Microsoft.\n","type":"Service Brokers"}]},"navigation":{"root":[{"displayName":"Kyma","id":"kyma"}],"components":[{"displayName":"Security","id":"security"},{"displayName":"Service Catalog","id":"service-catalog"},{"displayName":"Helm Broker","id":"helm-broker"},{"displayName":"Application Connector","id":"application-connector"},{"displayName":"Event Bus","id":"event-bus"},{"displayName":"Service Mesh","id":"service-mesh"},{"displayName":"Serverless","id":"serverless"},{"displayName":"Monitoring","id":"monitoring"},{"displayName":"Tracing","id":"tracing"},{"displayName":"API Gateway","id":"api-gateway"},{"displayName":"Logging","id":"logging"},{"displayName":"Backup","id":"backup"},{"displayName":"Console","id":"console"},{"displayName":"Asset Store","id":"asset-store"},{"displayName":"Headless CMS","id":"headless-cms"}]},"manifest":{"root":[{"displayName":"Kyma","id":"kyma"}],"components":[{"displayName":"Security","id":"security"},{"displayName":"Service Catalog","id":"service-catalog"},{"displayName":"Helm Broker","id":"helm-broker"},{"displayName":"Application Connector","id":"application-connector"},{"displayName":"Event Bus","id":"event-bus"},{"displayName":"Service Mesh","id":"service-mesh"},{"displayName":"Serverless","id":"serverless"},{"displayName":"Monitoring","id":"monitoring"},{"displayName":"Tracing","id":"tracing"},{"displayName":"API Gateway","id":"api-gateway"},{"displayName":"Logging","id":"logging"},{"displayName":"Backup","id":"backup"},{"displayName":"Console","id":"console"},{"displayName":"Asset Store","id":"asset-store"},{"displayName":"Headless CMS","id":"headless-cms"}]},"assetsPath":"/assets/docs/master/service-catalog/docs/assets/","docsType":"components","topic":"service-catalog","slidesBanner":{"bannerDuration":5000,"slides":[{"text":"Don't miss the session by Piotr Kopczynski at Helm Summit on September 11 at 15:47.","url":"https://helmsummit2019.sched.com/event/S8sS","startDate":"09/09/2019","endDate":"12/09/2019"}]},"locale":"en"}}}