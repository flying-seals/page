{"componentChunkName":"component---src-views-docs-index-tsx","path":"/docs/1.0/components/asset-store","webpackCompilationHash":"aefb7e842b40c338951f","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"version":"1.0","versions":{"releases":["0.9"],"prereleases":["1.0"],"branches":["master"]},"content":{"id":"asset-store","displayName":"Asset Store","description":"Overall documentation for Asset Store","type":"components","docs":[{"order":"01-01-asset-store","title":"Overview","source":"\nThe Asset Store is a Kubernetes-native solution for storing assets, such as documents, files, images, API specifications, and client-side applications.\n\nThis solution has a number of benefits:\n- It is flexible. You can use it for storing various types of assets, such as Markdown documents, ZIP, PNG, or JS files.\n- It is scalable. It allows you to store assets on a production system, using cloud provider storage services. At the same time, you can apply it to local development and use Minio to store assets on-premise.\n- It is multi-cloud and not locked into one vendor. When using the Asset Store in a production system, you can seamlessly switch between different major service providers, such as AWS S3 or Azure Blob.\n- It is location-independent. It allows you to expose files directly to the Internet and replicate them to different regions. This way, you can access them easily, regardless of your location.\n"},{"order":"02-01-asset-store","title":"Architecture","source":"\n## Resources\n\nThe whole concept of the Asset Store relies on the following components:\n\n- **Asset custom resource** (CR) is an obligatory [CR](#custom-resource-asset) in which you define the asset you want to store in a given storage bucket. Its definition requires the asset name and mode, the name of the Namespace in which it is available, the address of its web location, and the name of the bucket in which you want to store it. Optionally, you can specify the validation and mutation requirements that the asset must meet before it is stored.\n\n- **Asset Controller** (AC) manages the [Asset CR lifecycle](#details-asset-custom-resource-lifecycle).\n\n- **Bucket CR** is an obligatory [CR](#custom-resource-bucket) in which you define the name of the bucket for storing assets.\n\n- **Bucket Controller** manages the [Bucket CR lifecycle](#details-bucket-custom-resource-lifecycle).\n\n- **Validation Service** is an optional service which ensures that the asset meets the validation requirements specified in the Asset CR before uploading it to the bucket. The service returns the validation status to the AC.\n\n- **Mutation Service** is an optional service which ensures that the asset is modified according to the mutation specification defined in the Asset CR before it is uploaded to the bucket. The service returns the modified asset to the AC.\n\n- [**Metadata Service**](#details-asset-metadata-service) is an optional service which extracts metadata from assets. The metadata information is stored in the CR status. The service returns the asset metadata to the AC.\n\n- **Minio Gateway** is a Minio cluster mode which is a production-scalable storage solution. It ensures flexibility of using asset storage services from major cloud providers, including Azure Blob Storage, Amazon S3, and Google Cloud Storage.\n\n## Asset flow\n\nThis diagram provides an overview of the basic Asset Store workflow and the role of particular components in this process:\n\n![](./assets/asset-store-architecture.svg)\n\n1. The Kyma user creates a bucket through a Bucket CR.\n2. The Bucket Controller listens for new Events and acts upon receiving the Bucket CR creation Event.\n3. The Bucket Controller creates the bucket in the Minio Gateway storage.\n4. The Kyma user creates an Asset CR which specifies the reference to the asset source location and the name of the bucket for storing the asset.\n5. The AC listens for new Events and acts upon receiving the Asset CR creation Event.\n6. The AC reads the CR definition, checks if the Bucket CR is available, and if its name matches the bucket name referenced in the Asset CR. It also verifies if the Bucket CR is in the `Ready` phase.\n7. If the Bucket CR is available, the AC fetches the asset from the source location provided in the CR. If the asset is a ZIP or TAR file, the AC unpacks and optionally filters the asset before uploading it into the bucket.\n8. Optionally, the AC validates, modifies the asset, or extracts asset's metadata if such a requirement is defined in the Asset CR. The AC communicates with the validation, mutation, and metadata services to validate, modify the asset, or extract asset's metadata according to the specification defined in the Asset CR.\n9. The AC uploads the asset to Minio Gateway, into the bucket specified in the Asset CR.\n10. The AC updates the status of the Asset CR with the storage location of the file in the bucket.\n"},{"order":"03-01-asset-cr-lifecycle","title":"Asset custom resource lifecycle","source":"\nLearn about the lifecycle of the Asset custom resource (CR) and how its creation, removal, or a change in the bucket reference affects other Asset Store components.\n\n>**NOTE:** This lifecycle also applies to the ClusterAsset CR.\n\n## Create an Asset CR\n\nWhen you create an Asset CR, the Asset Controller (AC) receives a CR creation Event, reads the CR definition, verifies if the bucket exists, downloads the asset, unpacks it, and stores it in Minio Gateway.\n\n![](./assets/create-asset.svg)\n\n## Remove an Asset CR\n\nWhen you remove the Asset CR, the AC receives a CR deletion Event and deletes the CR from Minio Gateway.\n\n![](./assets/delete-asset.svg)\n\n## Change the bucket reference\n\nWhen you modify an Asset CR by updating the bucket reference in the Asset CR to a new one while the previous bucket still exists, the lifecycle starts again. The asset is created in a new storage location and this location is updated in the Asset CR.\n\nUnfortunately, this causes duplication of data as the assets from the previous bucket storage are not cleaned up by default. Thus, to avoid multiplication of assets, first remove one Bucket CR and then modify the existing Asset CR with a new bucket reference.\n\n![](./assets/modify-bucket-ref-asset.svg)\n\n## Change the Asset CR specification\n\nWhen you modify the Asset CR specification, the lifecycle starts again. The previous asset content is removed and no longer available.\n\n![](./assets/modify-asset.svg)\n","type":"Details"},{"order":"03-02-bucket-cr-lifecycle","title":"Bucket custom resource lifecycle","source":"\nLearn about the lifecycle of the Bucket custom resource (CR) and how its creation and removal affect other Asset Store components.\n\n>**NOTE:** This lifecycle also applies to the ClusterBucket CR.\n\n## Create a Bucket CR\n\nWhen you create a Bucket CR, the Bucket Controller (BC) receives a CR creation Event and creates a bucket with the name specified in the CR. It is created in the Minio Gateway storage under the `{CR_NAME}-{GENERATED_ID}` location. The status of the CR contains a reference URL to the created bucket.\n\n\n![](./assets/create-bucket.svg)\n\n\n## Remove a Bucket CR\n\nWhen you remove the Bucket CR, the BC receives a CR deletion Event and removes the bucket with the whole content from Minio Gateway.\n\nThe Asset Controller (AC) also monitors the status of the referenced bucket. The AC checks the Bucket CR status to make sure the bucket exists. If you delete the bucket, the AC receives information that the files are no longer accessible and the bucket was removed. The AC updates the status of the Asset CR to `ready: False` and removes the asset storage reference. The Asset CR is still available and you can use it later for a new bucket.\n\n![](./assets/delete-bucket.svg)\n","type":"Details"},{"order":"03-03-minio-gateway","title":"Minio and Minio Gateway","source":"\nThe whole concept of the Asset Store relies on Minio as the storage solution. It supports Kyma's manifesto and the \"batteries included\" rule by providing you with this on-premise solution by default.\n\nDepending on the usage scenario, you can:\n- Use Minio for local development.\n- Store your assets on a production scale using Minio in a [Gateway mode](https://github.com/minio/minio/tree/master/docs/gateway).\n\nThe Asset Store ensures that both usage scenarios work for Kyma, without additional configuration of the built-in controllers.\n\n## Development mode storage\n\nMinio is an open-source asset storage server with Amazon S3 compatible API. You can use it to store various types of assets, such as documents, files, or images.\n\nIn the context of the Asset Store, the Asset Controller stores all assets in Minio, in a dedicated storage space.\n\n![](./assets/minio.svg)\n\n\n## Production storage\n\nFor the production purposes, the Asset Store uses Minio Gateway which:\n\n- Is a multi-cloud solution that offers the flexibility to choose a given cloud provider for the specific Kyma installation, including Azure, Amazon, and Google\n- Allows you to use various cloud providers that support the data replication and CDN configuration\n- Is compatible with Amazon S3 APIs\n\n\n![](./assets/minio-gateway.svg)\n","type":"Details"},{"order":"03-04-asset-metadata-service","title":"Asset Metadata Service","source":"\nThe Asset Metadata Service is an HTTP server that exposes the functionality for extracting metadata from files. It contains a simple HTTP endpoint which accepts `multipart/form-data` forms. The service extracts front matter YAML metadata from text files of all extensions. \n\nThe main purpose of the service is to provide metadata extraction for Asset Store controllers. That's why it is only available inside the cluster. To use it, define `metadataWebhookService` in Asset and ClusterAsset custom resources.\n\n## Front matter metadata\n\nFront matter YAML metadata are YAML properties added at the beginning of a file, between `---` lines. The following snippet represents an exemplary Markdown file with metadata specified:\n\n```markdown\n\n---\ntitle: Example document title\ndescription: Description of the page\norder: 3\narray:\n - foo\n - bar\n---\n\n## Lorem ipsum\nDolores sit amet\n\n```\n\n## Use the service outside the Kyma cluster\n\nYou can expose the service for development purposes. To use the Asset Metadata Service on a local machine, run the following command:\n\n```bash\nkubectl port-forward deployment/assetstore-asset-metadata-service 3000:3000 -n kyma-system\n```\n\nYou can access the service on port `3000`.\n\n### Metadata files\n\nTo extract metadata from files, send the multipart form **POST** request to the `/v1/extract` endpoint. Specify the relative or absolute path to the file as a field name.\nTo do the multipart request using `curl`, run the following command:\n\n```bash\ncurl -v -F foo/foo.md=@foo.md -F bar/bar.yaml=@bar.yaml http://localhost:3000/v1/extract\n```\n\nThe result is as follows:\n\n```json\n{\n  \"data\": [\n    {\n      \"filePath\": \"foo/foo.md\",\n      \"metadata\": {\n        \"no\": 3,\n        \"title\": \"Access logs\",\n        \"type\": \"Details\"\n      }\n    },\n    {\n      \"filePath\": \"bar/bar.yaml\",\n      \"metadata\": {\n        \"number\": 9,\n        \"title\": \"Hello world\",\n        \"url\": \"https://kyma-project.io\"\n      }\n    }\n  ]\n}\n```\n\nSee the [OpenAPI specification](./assets/asset-metadata-service-openapi.yaml) for the full API documentation. You can use the [Swagger Editor](https://editor.swagger.io) to preview and test the API service.\n","type":"Details"},{"order":"03-04-asset-upload-service","title":"Asset Upload Service","source":"\nThe Asset Upload Service is an HTTP server that exposes the file upload functionality for Minio. It contains a simple HTTP endpoint which accepts `multipart/form-data` forms. It can upload files to the private and public system buckets.\n\nThe main purpose of the service is to provide a solution for hosting static files for components that use the Asset Store, such as the Application Connector.\nYou can also use the Asset Upload Service for development purposes to host files for the Asset Store, without the need to rely on external providers.\n\n## System buckets\n\nThe Asset Upload Service creates two system buckets, `system-private-{generated-suffix}` and `system-public-{generated-suffix}`, where `{generated-suffix}` is a Unix nano timestamp in the 32-base number system. The public bucket has a read-only policy specified.\n\nTo enable the service scaling and to maintain the bucket configuration data between the application restarts, the Asset Upload Service stores its configuration in the `assetstore-asset-upload-service` ConfigMap.\n\nOnce you upload the files, system buckets store them permanently. There is no policy to clean system buckets periodically.\n\nThe diagram describes the Asset Upload Service flow:\n\n\n![](./assets/asset-upload-service.svg)\n\n\n## Use the service outside the Kyma cluster\n\nYou can expose the service for development purposes. To use the Asset Upload Service on a local machine, run the following command:\n\n```bash\nkubectl port-forward deployment/assetstore-asset-upload-service 3000:3000 -n kyma-system\n```\n\nYou can access the service on port `3000`.\n\n\n### Upload files\n\nTo upload files, send the multipart form **POST** request to the `/v1/upload` endpoint. The endpoint recognizes the following field names:\n\n- `private` that is an array of files to upload to a private system bucket.\n- `public` that is an array of files to upload to a public system bucket.\n- `directory` that is an optional directory for storing the uploaded files. If you do not specify it, the service creates a directory with a random name. If the directory and files already exist, the service overwrites them.\n\nTo do the multipart request using `curl`, run the following command:\n\n```bash\ncurl -v -F directory='example' -F private=@sample.md -F private=@text-file.md -F public=@archive.zip http://localhost:3000/v1/upload\n```\n\nThe result is as follows:\n\n```json\n{\n   \"uploadedFiles\": [\n      {\n         \"fileName\": \"text-file.md\",\n         \"remotePath\": \"https://minio.kyma.local/private-1b0sjap35m9o0/example/text-file.md\",\n         \"bucket\": \"private-1b0sjap35m9o0\",\n         \"size\": 212\n      },\n      {\n         \"fileName\": \"archive.zip\",\n         \"remotePath\": \"https://minio.kyma.local/public-1b0sjaq6t6jr8/example/archive.zip\",\n         \"bucket\": \"public-1b0sjaq6t6jr8\",\n         \"size\": 630\n      },\n      {\n         \"fileName\": \"sample.md\",\n         \"remotePath\": \"https://minio.kyma.local/private-1b0sjap35m9o0/example/sample.md\",\n         \"bucket\": \"private-1b0sjap35m9o0\",\n         \"size\": 4414\n      }\n   ]\n}\n```\n\nSee the [OpenAPI specification](./assets/asset-upload-service-openapi.yaml) for the full API documentation. You can use the [Swagger Editor](https://editor.swagger.io) to preview and test the API service.\n","type":"Details"},{"order":"06-01-asset","title":"Asset","source":"\nThe `assets.assetstore.kyma-project.io` CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to define an asset to store in a cloud storage bucket. To get the up-to-date CRD and show the output in the `yaml` format, run this command:\n\n```\nkubectl get crd assets.assetstore.kyma-project.io -o yaml\n```\n\n## Sample custom resource\n\nThis is a sample Asset CR configuration:\n\n```\napiVersion: assetstore.kyma-project.io/v1alpha2\nkind: Asset\nmetadata:\n  name: my-package-assets\n  namespace: default\nspec:\n  source:\n    mode: package\n    url: https://some.domain.com/structure.zip\n    filter: .*\\.md$\n  bucketRef:\n    name: my-bucket\n\n```\n\n### Validation and mutation webhook services\n\nYou can also define validation and mutation services:\n- **Validation webhook** performs the validation of fetched assets before the Asset Controller uploads them into the bucket. It can be a list of several different validation webhooks and all of them should be processed even if one fails. It can refer either to the validation of a specific file against a specification or to the security validation. The validation webhook returns the validation status when the validation completes.\n- **Mutation webhook** acts similarly to the validation service. The difference is that it mutates the asset instead of just validating it. For example, this can mean asset rewriting through the `regex` operation or `keyvalue`, or the modification in the JSON specification. The mutation webhook returns modified files instead of information on the status.\n\n```\napiVersion: assetstore.kyma-project.io/v1alpha2\nkind: Asset\nmetadata:\n  name: my-package-assets\n  namespace: default\nspec:\n  source:\n    mode: single\n    url: https://some.domain.com/main.js\n    validationWebhookService:\n    - name: swagger-operations-svc\n      namespace: default\n      endpoint: \"/validate\"\n      filter: \\.js$\n    mutationWebhookService:\n    - name: swagger-operations-svc\n      namespace: default\n      endpoint: \"/mutate\"\n      filter: \\.js$\n      metadata:\n        rewrite: keyvalue\n        pattern: \\json|yaml\n        data:\n          basePath: /test/v2\n    metadataWebhookService:\n    - name: swagger-operations-svc\n      namespace: default\n      endpoint: \"/extract\"\n      filter: \\.js$\n  bucketRef:\n    name: my-bucket\nstatus:\n  phase: Failed\n  reason: ValidationFailed\n  message: \"The file is not valid against the provided json schema\"\n  lastHeartbeatTime: \"2018-01-03T07:38:24Z\"\n  observedGeneration: 1\n  assetRef:\n    assets:\n    - README.md\n    - directory/subdirectory/file.md\n    baseUrl: https://minio.kyma.local/test-sample-1b19rnbuc6ir8/asset-sample\n\n```\n\n## Custom resource parameters\n\nThis table lists all possible parameters of a given resource together with their descriptions:\n\n\n| Parameter   |      Mandatory      |  Description |\n|:----------:|:-------------:|:------|\n| **metadata.name** |    **YES**   | Specifies the name of the CR. |\n| **metadata.namespace** |    **YES**   | Defines the Namespace in which the CR is available. |\n| **spec.source.mode** |    **YES**   | Specifies if the asset consists of one file or a set of compressed files in the ZIP or TAR formats. Use `single` for one file and `package` for a set of files. |\n| **spec.source.url** |    **YES**   | Specifies the location of the file. |\n| **spec.source.filter** |    **NO**   | Specifies the regex pattern used to select files to store from the package. |\n| **spec.source.validationwebhookservice** |    **NO**   | Provides specification of the validation webhook services. |\n| **spec.source.validationwebhookservice.name** |    **YES**   | Provides the name of the validation webhook service. |\n| **spec.source.validationwebhookservice.namespace** |    **YES**   | Provides the Namespace in which the service is available. |\n| **spec.source.validationwebhookservice.endpoint** |    **NO**   | Specifies the endpoint to which the service sends calls. |\n| **spec.source.validationwebhookservice.filter** |    **NO**   | Specifies the regex pattern used to select files sent to the service. |\n| **spec.source.mutationwebhookservice** |    **NO**   | Provides specification of the mutation webhook services. |\n| **spec.source.mutationwebhookservice.name** |    **YES**   | Provides the name of the mutation webhook service. |\n| **spec.source.mutationwebhookservice.namespace** |    **YES**   | Provides the Namespace in which the service is available. |\n| **spec.source.mutationwebhookservice.endpoint** |    **NO**   | Specifies the endpoint to which the service sends calls. |\n| **spec.source.mutationwebhookservice.filter** |    **NO**   | Specifies the regex pattern used to select files sent to the service. |\n| **spec.source.metadatawebhookservice** |    **NO**   | Provides specification of the metadata webhook services. |\n| **spec.source.metadatawebhookservice.name** |    **YES**   | Provides the name of the metadata webhook service. |\n| **spec.source.metadatawebhookservice.namespace** |    **YES**   | Provides the Namespace in which the service is available. |\n| **spec.source.metadatawebhookservice.endpoint** |    **NO**   | Specifies the endpoint to which the service sends calls. |\n| **spec.source.metadatawebhookservice.filter** |    **NO**   | Specifies the regex pattern used to select files sent to the service. |\n| **spec.bucketref.name** |    **YES**   | Provides the name of the bucket for storing the asset. |\n| **status.phase** |    **Not applicable**   | The Asset Controller adds it to the Asset CR. It describes the status of processing the Asset CR by the Asset Controller. It can be `Ready`, `Failed`, or `Pending`. |\n| **status.reason** |    **Not applicable**   | Provides the reason why the Asset CR processing failed or is pending.  |\n| **status.message** |    **Not applicable**   | Describes a human-readable message on the CR processing progress, success, or failure. |\n| **status.lastheartbeattime** |    **Not applicable**   | Provides the last time when the Asset Controller processed the Asset CR. |\n| **status.observedGeneration** |    **Not applicable**   | Specifies the most recent generation that the Asset Controller observes. |\n| **status.assetref** |    **Not applicable**   | Provides details on the location of the assets stored in the bucket.   |\n| **status.assetref.assets** |    **Not applicable**   | Provides the relative path to the given asset in the storage bucket. |\n| **status.assetref.baseurl** |    **Not applicable**   | Specifies the absolute path to the location of the assets in the storage bucket. |\n\n\n> **NOTE:** The Asset Controller automatically adds all parameters marked as **Not applicable** to the Asset CR.\n\n\n## Related resources and components\n\nThese are the resources related to this CR:\n\n| Custom resource |   Description |\n|:----------:|:------|\n| Bucket |  The Asset CR uses the name of the bucket specified in the definition of the Bucket CR. |\n\nThese components use this CR:\n\n| Component   |   Description |\n|:----------:|:------|\n| Asset Store |  Uses the Asset CR for the detailed asset definition, including its location and the name of the bucket in which it is stored. |\n","type":"Custom Resource"},{"order":"06-02-bucket","title":"Bucket","source":"\nThe `buckets.assetstore.kyma-project.io` CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to define the name of the cloud storage bucket for storing assets. To get the up-to-date CRD and show the output in the `yaml` format, run this command:\n\n```\nkubectl get crd buckets.assetstore.kyma-project.io -o yaml\n```\n\n## Sample custom resource\n\nThis is a sample resource that defines the storage bucket configuration.\n\n```\napiVersion: assetstore.kyma-project.io/v1alpha2\nkind: Bucket\nmetadata:\n  name: test-sample\n  namespace: default\nspec:\n  region: \"us-east-1\"\n  policy: readonly\nstatus:\n  lastHeartbeatTime: \"2019-02-04T11:50:26Z\"\n  message: Bucket policy has been updated\n  phase: Ready\n  reason: BucketPolicyUpdated\n  remoteName: test-sample-1b19rnbuc6ir8\n  observedGeneration: 1\n  url: https://minio.kyma.local/test-sample-1b19rnbuc6ir8\n```\n\n## Custom resource parameters\n\nThis table lists all possible parameters of a given resource together with their descriptions:\n\n\n| Parameter   |      Mandatory      |  Description |\n|:----------:|:-------------:|:------|\n| **metadata.name** |    **YES**   | Specifies the name of the CR which is also used to generate the name of the bucket in the bucket storage. |\n| **metadata.namespace** |    **YES**   | Specifies the Namespace in which the CR is available. |\n| **spec.region** |    **NO**   | Specifies the location of the [region](https://github.com/kyma-project/kyma/blob/master/components/asset-store-controller-manager/config/crds/assetstore_v1alpha2_bucket.yaml#L48) under which the Bucket Controller creates the bucket. If the field is empty, the Bucket Controller creates the bucket under the default location. |\n| **spec.policy** | **NO** | Specifies the type of bucket access. Use `none`, `readonly`, `writeonly`, or `readwrite`. |\n| **status.lastheartbeattime** |    **Not applicable**    | Provides the last time when the Bucket Controller processed the Bucket CR. |\n| **status.message** |    **Not applicable**    | Describes a human-readable message on the CR processing success or failure. |\n| **status.phase** |    **Not applicable**    | The Bucket Controller automatically adds it to the Bucket CR. It describes the status of processing the Bucket CR by the Bucket Controller. It can be `Ready` or `Failed`. |\n| **status.reason** |    **Not applicable**    | Provides information on the Bucket CR processing success or failure. |\n| **status.url** |    **Not applicable**   | Provides the address of the bucket storage under which the asset is available. |\n| **status.remoteName** |    **Not applicable**   | Provides the name of the bucket in the storage. |\n| **status.observedGeneration** |    **Not applicable**   | Specifies the generation that the Bucket Controller observes. |\n\n> **NOTE:** The Bucket Controller automatically adds all parameters marked as **Not applicable** to the Bucket CR.\n\n## Related resources and components\n\nThese are the resources related to this CR:\n\n| Custom resource |   Description |\n|:----------:|:------|\n| Asset |  Provides the name of the storage bucket which the Asset CR refers to. |\n\nThese components use this CR:\n\n| Component   |   Description |\n|:----------:|:------|\n| Asset Store |  Uses the Bucket CR for the storage bucket definition. |\n","type":"Custom Resource"},{"order":"06-03-clusterasset","title":"ClusterAsset","source":"\nThe `clusterassets.assetstore.kyma-project.io` CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to define an asset to store in a cloud storage bucket. To get the up-to-date CRD and show the output in the `yaml` format, run this command:\n\n```\nkubectl get crd clusterassets.assetstore.kyma-project.io -o yaml\n```\n\n## Sample custom resource\n\nThis is a sample ClusterAsset CR configuration:\n\n```\napiVersion: assetstore.kyma-project.io/v1alpha2\nkind: ClusterAsset\nmetadata:\n  name: my-package-assets\nspec:\n  source:\n    mode: package\n    url: https://some.domain.com/structure.zip\n    filter: .*\\.md$\n  bucketRef:\n    name: my-bucket\n\n```\n\n### Validation and mutation webhook services\n\nYou can also define validation and mutation services:\n- **Validation webhook** performs the validation of fetched assets before the ClusterAsset Controller uploads them into the bucket. It can be a list of several different validation webhooks and all of them should be processed even if one fails. It can refer either to the validation of a specific file against a specification or to the security validation. The validation webhook returns the validation status when the validation completes.\n- **Mutation webhook** acts similarly to the validation service. The difference is that it mutates the asset instead of just validating it. For example, this can mean asset rewriting through the `regex` operation or `keyvalue`, or the modification in the JSON specification. The mutation webhook returns modified files instead of information on the status.\n\n```\napiVersion: assetstore.kyma-project.io/v1alpha2\nkind: ClusterAsset\nmetadata:\n  name: my-package-assets\nspec:\n  source:\n    mode: single\n    url: https://some.domain.com/main.js\n    validationWebhookService:\n    - name: swagger-operations-svc\n      namespace: default\n      endpoint: \"/validate\"\n      filter: \\.js$\n    mutationWebhookService:\n    - name: swagger-operations-svc\n      namespace: default\n      endpoint: \"/mutate\"\n      filter: \\.js$\n      metadata:\n        rewrite: keyvalue\n        pattern: \\json|yaml\n        data:\n          basePath: /test/v2\n    metadataWebhookService:\n    - name: swagger-operations-svc\n      namespace: default\n      endpoint: \"/extract\"\n      filter: \\.js$\n  bucketRef:\n    name: my-bucket\nstatus:\n  phase: Failed\n  reason: ValidationFailed\n  message: \"The file is not valid against the provided json schema\"\n  lastHeartbeatTime: \"2018-01-03T07:38:24Z\"\n  observedGeneration: 1\n  assetRef:\n    assets:\n    - README.md\n    - directory/subdirectory/file.md\n    baseUrl: https://minio.kyma.local/test-sample-1b19rnbuc6ir8/asset-sample\n\n```\n\n## Custom resource parameters\n\nThis table lists all possible parameters of a given resource together with their descriptions:\n\n\n| Parameter   |      Mandatory      |  Description |\n|:----------:|:-------------:|:------|\n| **metadata.name** |    **YES**   | Specifies the name of the CR. |\n| **spec.source.mode** |    **YES**   | Specifies if the asset consists of one file or a set of compressed files in the ZIP or TAR formats. Use `single` for one file and `package` for a set of files. |\n| **spec.source.url** |    **YES**   | Specifies the location of the file. |\n| **spec.source.filter** |    **NO**   | Specifies the regex pattern used to select files to store from the package. |\n| **spec.source.validationwebhookservice** |    **NO**   | Provides specification of the validation webhook services. |\n| **spec.source.validationwebhookservice.name** |    **YES**   | Provides the name of the validation webhook service. |\n| **spec.source.validationwebhookservice.namespace** |    **YES**   | Provides the Namespace in which the service is available. |\n| **spec.source.validationwebhookservice.endpoint** |    **NO**   | Specifies the endpoint to which the service sends calls. |\n| **spec.source.validationwebhookservice.filter** |    **NO**   | Specifies the regex pattern used to select files sent to the service. |\n| **spec.source.mutationwebhookservice** |    **NO**   | Provides specification of the mutation webhook services. |\n| **spec.source.mutationwebhookservice.name** |    **YES**   | Provides the name of the mutation webhook service. |\n| **spec.source.mutationwebhookservice.namespace** |    **YES**   | Provides the Namespace in which the service is available. |\n| **spec.source.mutationwebhookservice.endpoint** |    **NO**   | Specifies the endpoint to which the service sends calls. |\n| **spec.source.mutationwebhookservice.metadata** |    **NO**   | Provides detailed metadata specific for a given mutation service and its functionality. |\n| **spec.source.mutationwebhookservice.filter** |    **NO**   | Specifies the regex pattern used to select files sent to the service. |\n| **spec.source.metadatawebhookservice** |    **NO**   | Provides specification of the metadata webhook services. |\n| **spec.source.metadatawebhookservice.name** |    **YES**   | Provides the name of the metadata webhook service. |\n| **spec.source.metadatawebhookservice.namespace** |    **YES**   | Provides the Namespace in which the service is available. |\n| **spec.source.metadatawebhookservice.endpoint** |    **NO**   | Specifies the endpoint to which the service sends calls. |\n| **spec.source.metadatawebhookservice.filter** |    **NO**   | Specifies the regex pattern used to select files sent to the service. |\n| **spec.bucketref.name** |    **YES**   | Provides the name of the bucket for storing the asset. |\n| **status.phase** |    **Not applicable**   | The ClusterAsset Controller adds it to the ClusterAsset CR. It describes the status of processing the ClusterAsset CR by the ClusterAsset Controller. It can be `Ready`, `Failed`, or `Pending`. |\n| **status.reason** |    **Not applicable**   | Provides the reason why the ClusterAsset CR processing failed or is pending.  |\n| **status.message** |    **Not applicable**   | Describes a human-readable message on the CR processing progress, success, or failure. |\n| **status.lastheartbeattime** |    **Not applicable**   | Provides the last time when the ClusterAsset Controller processed the ClusterAsset CR. |\n| **status.observedGeneration** |    **Not applicable**   | Specifies the most recent generation that the ClusterAsset Controller observes. |\n| **status.assetref** |    **Not applicable**   | Provides details on the location of the assets stored in the bucket.   |\n| **status.assetref.assets** |    **Not applicable**   | Provides the relative path to the given asset in the storage bucket. |\n| **status.assetref.baseurl** |    **Not applicable**   | Specifies the absolute path to the location of the assets in the storage bucket.   |\n\n\n> **NOTE:** The ClusterAsset Controller automatically adds all parameters marked as **Not applicable** to the ClusterAsset CR.\n\n\n## Related resources and components\n\nThese are the resources related to this CR:\n\n| Custom resource |   Description |\n|:----------:|:------|\n| ClusterBucket |  The ClusterAsset CR uses the name of the bucket specified in the definition of the ClusterBucket CR. |\n\nThese components use this CR:\n\n| Component   |   Description |\n|:----------:|:------|\n| Asset Store |  Uses the ClusterAsset CR for the detailed asset definition, including its location and the name of the bucket in which it is stored. |\n","type":"Custom Resource"},{"order":"06-04-clusterbucket","title":"ClusterBucket","source":"\nThe `clusterbuckets.assetstore.kyma-project.io` CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to define the name of the cloud storage bucket for storing assets. To get the up-to-date CRD and show the output in the `yaml` format, run this command:\n\n```\nkubectl get crd clusterbuckets.assetstore.kyma-project.io -o yaml\n```\n\n## Sample custom resource\n\nThis is a sample resource that defines the storage bucket configuration.\n\n```\napiVersion: assetstore.kyma-project.io/v1alpha2\nkind: ClusterBucket\nmetadata:\n  name: test-sample\nspec:\n  region: \"us-east-1\"\n  policy: readonly\nstatus:\n  lastHeartbeatTime: \"2019-02-04T11:50:26Z\"\n  message: Bucket policy has been updated\n  phase: Ready\n  reason: BucketPolicyUpdated\n  remoteName: test-sample-1b19rnbuc6ir8\n  url: https://minio.kyma.local/test-sample-1b19rnbuc6ir8\n  observedGeneration: 1\n```\n\n## Custom resource parameters\n\nThis table lists all possible parameters of a given resource together with their descriptions:\n\n\n| Parameter   |      Mandatory      |  Description |\n|:----------:|:-------------:|:------|\n| **metadata.name** |    **YES**   | Specifies the name of the CR which is also the prefix of the bucket name in the bucket storage. |\n| **spec.region** |    **NO**   | Specifies the location of the [region](https://github.com/kyma-project/kyma/blob/master/components/asset-store-controller-manager/config/crds/assetstore_v1alpha2_bucket.yaml#L48) under which the ClusterBucket Controller creates the bucket. If the field is empty, the ClusterBucket Controller creates the bucket under the default location. |\n| **spec.policy** | **NO** | Specifies the type of bucket access. Use `none`, `readonly`, `writeonly`, or `readwrite`. |\n| **status.lastheartbeattime** |    **Not applicable**    | Provides the last time when the ClusterBucket Controller processed the ClusterBucket CR. |\n| **status.message** |    **Not applicable**    | Describes a human-readable message on the CR processing success or failure. |\n| **status.phase** |    **Not applicable**    | The ClusterBucket Controller automatically adds it to the ClusterBucket CR. It describes the status of processing the ClusterBucket CR by the ClusterBucket Controller. It can be `Ready` or `Failed`. |\n| **status.reason** |    **Not applicable**    | Provides information on the ClusterBucket CR processing success or failure. |\n| **status.url** |    **Not applicable**   | Provides the address of the bucket storage under which the asset is available. |\n| **status.remoteName** |    **Not applicable**   | Provides the name of the bucket in storage. |\n| **status.observedGeneration** |    **Not applicable**   | Specifies the most recent generation that the ClusterBucket Controller observes. |\n\n> **NOTE:** The ClusterBucket Controller automatically adds all parameters marked as **Not applicable** to the ClusterBucket CR.\n\n## Related resources and components\n\nThese are the resources related to this CR:\n\n| Custom resource |   Description |\n|:----------:|:------|\n| ClusterAsset |  Provides the name of the storage bucket which the ClusterAsset CR refers to. |\n\nThese components use this CR:\n\n| Component   |   Description |\n|:----------:|:------|\n| Asset Store |  Uses the ClusterBucket CR for the storage bucket definition. |\n","type":"Custom Resource"}]},"navigation":{"root":[{"displayName":"Kyma","id":"kyma"}],"components":[{"displayName":"Security","id":"security"},{"displayName":"Service Catalog","id":"service-catalog"},{"displayName":"Helm Broker","id":"helm-broker"},{"displayName":"Application Connector","id":"application-connector"},{"displayName":"Event Bus","id":"event-bus"},{"displayName":"Service Mesh","id":"service-mesh"},{"displayName":"Serverless","id":"serverless"},{"displayName":"Monitoring","id":"monitoring"},{"displayName":"Tracing","id":"tracing"},{"displayName":"API Gateway","id":"api-gateway"},{"displayName":"Logging","id":"logging"},{"displayName":"Backup","id":"backup"},{"displayName":"Console","id":"console"},{"displayName":"Asset Store","id":"asset-store"},{"displayName":"Headless CMS","id":"headless-cms"}]},"manifest":{"root":[{"displayName":"Kyma","id":"kyma"}],"components":[{"displayName":"Security","id":"security"},{"displayName":"Service Catalog","id":"service-catalog"},{"displayName":"Helm Broker","id":"helm-broker"},{"displayName":"Application Connector","id":"application-connector"},{"displayName":"Event Bus","id":"event-bus"},{"displayName":"Service Mesh","id":"service-mesh"},{"displayName":"Serverless","id":"serverless"},{"displayName":"Monitoring","id":"monitoring"},{"displayName":"Tracing","id":"tracing"},{"displayName":"API Gateway","id":"api-gateway"},{"displayName":"Logging","id":"logging"},{"displayName":"Backup","id":"backup"},{"displayName":"Console","id":"console"},{"displayName":"Asset Store","id":"asset-store"},{"displayName":"Headless CMS","id":"headless-cms"}]},"assetsPath":"/assets/docs/1.0/asset-store/docs/assets/","docsType":"components","topic":"asset-store","slidesBanner":{"bannerDuration":5000,"slides":[{"text":"Don't miss the session by Piotr Kopczynski at Helm Summit on September 11 at 15:47.","url":"https://helmsummit2019.sched.com/event/S8sS","startDate":"09/09/2019","endDate":"12/09/2019"}]},"locale":"en"}}}