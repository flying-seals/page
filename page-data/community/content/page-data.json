{"componentChunkName":"component---src-views-community-index-tsx","path":"/community/content","webpackCompilationHash":"aefb7e842b40c338951f","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"content":{"id":"content","displayName":"Content","description":"Kyma content guidelines","type":"guidelines","docs":[{"order":"README","title":"Overview","source":" \n\nThese guidelines provide rules and tips to all who contribute content to the Kyma repositories.\n\nRead about:\n\n- The [content strategy](#content-strategy-content-strategy) for the Kyma documentation. Learn about the obligatory and optional document types.\n- [Formatting](#formatting-formatting), [style and terminology](#style-and-terminology-style-and-terminology) that apply to the content created throughout the Kyma organization.\n- Rules for creating [diagrams](#diagrams-diagrams) and [screenshots](#screenshots-screenshots).\n- Tips and hints on how to write [release notes](#release-notes-release-notes).\n- Guidelines for making [cross-references](#links-in-docs-links-in-docs) between documents in the [`community`](https://github.com/kyma-project/community) repository and [`kyma/docs`](https://github.com/kyma-project/kyma/tree/master/docs) folder.\n- The [documentation toggle](#toggle-toggle) that you can use to create several versions of a given document section and switch between them.\n"},{"order":"01-content-strategy","title":"Content Strategy","source":"\nContent Strategy is a term that relates to the approach you need to to define before you start content development. You need to know:\n* Who you write for\n* What to document\n* How and where to develop the content\n* Where the content will be visible\n* What types of content you have\n* How the reader will navigate through the content\n* What the review process is\n\n## Location and context\n\nOne of the main Kyma principles is to care about the developer experience. That is why the Kyma content developers' focus is to provide documentation in the context of the developer, inside the cluster, and in the Console UI. This makes it easy to access and its version corresponds to the given cluster version.\n\nIt is important to remember that you need to convince developers to use Kyma before they start to work on it. That is why technical documentation must be exposed to the public without a prerequisite to start a cluster first. Publicly available documentation should not only contain the technical content but also a more overarching explanation and showcases that help to convince developers and the business decision makers to use Kyma.\n\nThis reasoning leads to a strategy of having two different locations for the documentation:\n- A specific Kyma instance (cluster):\n    - Contextual help in the Service Catalog so the Kyma user does not have to search for the documentation of a specific service in the general location.\n    - The Docs view in the Console UI with the overarching documentation.\n- A publicly available Kyma documentation portal.\n\n## Structure\n\nThe decision for the document structure is to take a standard approach with the topic-oriented documentation. Looking at the structure of Kyma, there are two types of topics to differentiate:\n* Component\n* Task\n\nThe content creation starts with the component-oriented structure that is easier to follow without clear customer expectations. In the long-term, once the Kyma content developers create the whole content and know what customers want, they need to assess the task-oriented structure.\n\nTo be more precise, now readers need to know at the start what such terms as `Service Catalog` or `Serverless` mean as this is their starting point. In the long-term, they may prefer a topic, such as `Extensibility`, to see documents explaining how to quickly extend the application by provisioning external services through the catalog, and how to quickly extend the application with the lambda.\n\n## Topic types\n\nEvery independent Kyma component is a separate documentation topic. The only exceptions from this rule are as follows:\n- Kyma is an overall topic treated as a grouping point for the overarching Kyma documentation.\n- For the publicly available documentation, there needs to be a separate topic for handling more business and marketing-oriented documentation with showcases.\n\n## Documentation types\n\nThere is a set of documents that a given technical topic must include. You can also add additional document types to expose a specific topic better. To propose a new document type, create an [issue](https://github.com/kyma-project/community/issues) in the `community` repository and mark it with the `area/documentation` label.  \n\n### Obligatory\n\nEach technical topic must have the following document types arranged in the fixed order. Follow the `{document-type-number}-(document-number)-{document-name}.md` format to name the documents. For example, use `06-02-clustermicrofrontend.md` to name the second document of the **Custom Resource** type that describes the `clustermicrofrontend.ui.kyma-project.io` CustomResourceDefinition (CRD).\n\n>**NOTE:** The Kyma content developers create templates for a given document type once there are at least two documents to use as a base for such a template.\n\n1. [**Overview**](https://github.com/kyma-project/community/blob/master/guidelines/templates/resources/overview.md) (`01`) - Use it to describe the component in general. It serves as an entry point for the topic. Make sure it is short but descriptive.\n2. [**Architecture**](https://github.com/kyma-project/community/blob/master/guidelines/templates/resources/architecture.md) (`02`) - Use it to describe in detail the architecture of the component. Include a diagram in this document.\n3. [**Details**](https://github.com/kyma-project/community/blob/master/guidelines/templates/resources/details.md) (`03`) - Use it to describe more technical details of the component that do not fit into any other document type. Among other things, include a detailed explanation of the application lifecycle that describes how the resource is created and what other resources are created, how it is updated, how it is removed, and what each operation means from the technical point of view.\n4. **Installation** (`04`) - Use it to describe the installation process. This includes guides for local, cluster, or component installation, as well as documents describing installation scripts.\n5. [**Configuration**](https://github.com/kyma-project/community/blob/master/guidelines/templates/resources/configuration.md) (`05`) - Use it to describe configuration options for a given component. Define the settings that a user can change and the expected outcome of such changes. Include the table structure with the settings in the document.\n6. [**Custom Resource**](https://github.com/kyma-project/community/blob/master/guidelines/templates/resources/custom-resource.md) (`06`) - Use it to document details of CRDs that are part of a given component.\n7. [**CLI Reference**](https://github.com/kyma-project/community/blob/master/guidelines/templates/resources/cli-reference.md) (`07`) - Use it to describe the syntax and the use of CLI commands for a given component.\n8. [**Tutorials**](https://github.com/kyma-project/community/blob/master/guidelines/templates/resources/tutorials.md) (`08`) - Use it to provide a clear step-by-step instruction that helps the user to understand a given concept better. The user must be able to go through all the steps of the document and complete them. There is no separate tutorial type. The document does not have to explicitly point out the example used as, at the end, the explicit reference to the example will be in the main content of the guide.\n9. **API** (`09`) - Use it to document the exposed external API of components that the Kyma administrators use to integrate them with Kyma.\n10. [**Troubleshooting**](https://github.com/kyma-project/community/blob/master/guidelines/templates/resources/troubleshooting.md) (`10`) - Use it to explain all details needed for Kyma and its components' troubleshooting.\n\n### Optional\n\n>**NOTE:** Place the optional types of documents right after the obligatory types.\n\nYou can add the following document type to the Kyma documentation:\n- **UI Contracts** (`11`) - Use it to describe the mapping of OSBA service objects, plan objects, and conventions in the Kyma Console view.\n- **Examples** (`12`) - Use it to demonstrate a given Kyma feature or concept in a form of a short demo.\n- **Service Brokers** (`13`) - Use it to describe Service Brokers that Kyma provides.\n\n## The content source\n\nThe Kyma content developers write the content in [Markdown](https://daringfireball.net/projects/markdown/) and store it in [Git](https://git-scm.com/) repositories.\n\n## Audience\n\nFor the documentation that is part of the Kyma cluster, the audience is the Kyma user. The assumption is that a person that gained access to the cluster and can sign in to the Console already knows the basics and knows what to use Kyma for. Therefore, the intended audience are the following technical people that operate the cluster:\n- Developers\n- Administrators\n\nAs for the documentation that is published in the publicly available portal, the audience is much more diverse and it requires much more documentation to understand what Kyma is. Nevertheless, the assumption is that the audience has the basic technical understanding of such terms as containers, cloud, and Kubernetes:\n- Developers\n- Technical analysts\n- Business decision makers\nBecause of such a diversified audience, the navigation of the Kyma portal needs to clearly separate technical content from the more showcase-based content.\n\n>**NOTE:** When you write a given document type, adjust its voice and tone to the audience that you address. See the **Voice and tone** section in the [guidelines](https://github.com/YaaS/REST_API_Documentation_Guidelines/blob/master/010_About_Style_And_Standards.html.md#voice-and-tone) for more details.\n\n### The assumed reader's knowledge\n\nThe assumption is that the audience is familiar with the following terms and does not require the explanation of technical concepts behind them:\n- Kubernetes\n- Docker and containers\n\n## The main purpose of instructions\n\nOne of the main Kyma principles is that CLI is, metaphorically speaking, the first-level citizen. Therefore, the documentation's main focus is to explain concepts and provide step-by-step instructions using CLI commands instead of Console UI screenshots. The only exception from the rule applies to the components that cannot be managed through the CLI, in which case screenshots are essential to explain specific functionalities.\n\n## Quality\n\nA technical writer must review any content produced for Kyma. The review not only checks the language quality of a given document but also verifies its structure, consistency, and compliance with the guidelines.\n\n## Release notes\n\nRelease notes are written and by default displayed in the release notes section of the GitHub repository. The owner of the release notes, similarly to any other content, is the team that owns the component that the release notes describe. Technical writers must review and accept all release notes.\n\nAll release notes must be visible in one view in the Kyma documentation portal.\n"},{"order":"02-diagrams","title":"Diagrams","source":"\nSame as with the screenshots, diagrams are worth a thousand words. Therefore, rather than pile up a block of text to describe a given concept, use a diagram to visualize it instead.\n\nTo convey the intended message effectively in a diagram, follow these basic principles:\n- Everything that means the same should look the same.\n- Limit visual noise.\n- Keep it simple but descriptive.\n\nFor details on how to format diagrams and their elements in Kyma documents, see the particular document sections.\n\n## Tool\n\nUse [draw.io](https://www.draw.io) as a recommended tool. Export the diagram as an SVG and save it under the corresponding `assets` directory.\n\n## Size\n\nKeep your diagram reasonable in size. Preview the image at full size to see how it fits into the whole document. The diagram should be large enough to be legible and convey the intended message, but should not dominate the whole document. To demonstrate large concepts, simplify the diagram or divide it into a few smaller ones.\n\n>**NOTE:** The diagrams keep their original aspect ratio on both the Console UI and the `kyma-project.io` website. However, the maximum width on the website is 860px. Any diagram that exceeds that limit is resized to the maximum width. \n\n## Background\n\nKeep the background of the diagram **white** as it renders well both on Github and in the UI.\n\n## Shapes\n\nDo not use fill that is other than **white** in boxes or similar shapes unless you add an actor to the diagram. Apply **blue** (HEX: #0A6ED1) fill for the shape that refers to a given actor.\n\n> **NOTE:** Same as in the Unified Modeling Language (UML), the term **actor** refers to a role played by a human user, external hardware, or any other entity.\n\n## Outlines\n\nUse **grey** (HEX: #D2D5D9) for the shape outlines. Set the outlines of the main shapes to 2pt and the outlines of the secondary shapes to 1pt.  \n\nIf you need color differentiation for shape outlines, use **turquoise** (HEX: #24CACC) or **green** (HEX: #ACD62F).\n\n> **NOTE:** Do not overuse colors. Use them only when you need to differentiate one shape from another. Explain the meaning of different colors in the legend under the diagram.\n\n## Text\n\nUse **black** both for the primary and secondary texts.\nUse the following **Helvetica** font sizes:\n- 15pt for headings\n- 13pt for the primary text, such as secondary shape names\n- 12pt for the secondary text, such as the description text for connectors\n\nBold the headings. Position the text horizontally in a text box or shape.\nWhen you add a title to the main shape, put the text inside the shape.\n\n## Steps\n\nMark multiple areas or steps on the diagram using **blue** (HEX: #0A6ED1) round stamps with white numbers.\n\nExplain the steps under the diagram with the ordered list.\n\n## Connectors\n\nUse 1pt, **rounded**, **grey** (HEX: #959CA4) lines to connect shapes.\n\n## Examples\n\nSee the exemplary diagrams for reference.\n\n* Example 1\n\n![Example 1](./assets/example-1.png)\n\n* Example 2\n\n![Example 2](./assets/example-2.png)\n"},{"order":"03-documentation-toggle","title":"Toggle","source":"\nThe documentation toggle is a feature that allows you to render several versions of a given section in one document or have several versions of one document.\nThe toggle renders the text in Github documents in the form of expandable sections and shows it as tabs on the `http://kyma-project.io` website.\n\nYou can use the toggle to include instructions for different operating systems (OS) in one guide or to describe installation guides that differ only in a few steps.  \n\n## Writing rules\n\nFollow these rules when inserting toggles in documents:\n\n* Toggles belonging to one group must start with the `<div tabs name=\"{toggle-name}\">` tag and end with the `</div>` tag, where **name** is a distinctive ID of a specific toggle used for linking. It can be any name describing the content of the documentation toggle.\n\nSee an example:\n```markdown\n<div tabs name=\"installation\">\n{toggle content}\n</div>\n```\n\n* A single toggle must start with the `<details>` tag and end with the `</details>` tag.\n* Insert the title of the toggle between `<summary>` and `</summary>` tags. Every part of the title must start from a new line.\n\nSee an example:\n\n  ``` markdown\n  <summary>\n  From release\n  </summary>\n  ```\n\n* Leave a blank line after the `</summary>` tag. Only this way the content can render.\n* Add content using Markdown syntax.\n* Use this indentation when you add the toggle as a regular document section:\n  - No spaces for the div element\n  - Two spaces for other elements\n* Use this indentation when you add a toggle under a list:\n  - Four spaces for the div element\n  - Six spaces for other elements\n\n## Examples\n\nThis section contains exemplary uses of the toggle in Markdown documents.\n\n* See an example of the toggle added as a regular document section:\n\n<div tabs name=\"installation\">\n  <details>\n  <summary>\n  From release\n  </summary>\n\n  When you install Kyma locally from a release, follow [this](https://kyma-project.io/docs/master/root/kyma/#installation-install-kyma-locally) guide.\n  Ensure that you created the local Kubernetes cluster with `10240Mb` memory and `30Gb` disk size.\n  ```\n  ./scripts/minikube.sh --domain \"kyma.local\" --vm-driver \"hyperkit\" --memory 10240Mb --disk-size 30g\n  ```\n\n  Run the following command before triggering the Kyma installation process:\n  ```\n  kubectl -n kyma-installer patch configmap installation-config-overrides -p '{\"data\": {\"global.knative\": \"true\", \"global.kymaEventBus\": \"false\", \"global.natsStreaming.clusterID\": \"knative-nats-streaming\"}}'\n  ```\n  </details>\n  <details>\n  <summary>\n  From sources\n  </summary>\n\n  When you install Kyma locally from sources, add the `--knative` argument to the `run.sh` script. Run this command:\n\n  ```\n  ./run.sh --knative\n  ```\n  </details>\n</div>\n\n\nThe code renders on `kyma-project.io` as follows:\n\n![](./assets/toggle_flat_structure.png)\n\n* See an example of the toggle added under a list:\n\n1. First element\n2. Second element\n    <div tabs name=\"installation\">\n      <details>\n      <summary>\n      From release\n      </summary>\n\n      When you install Kyma locally from a release, follow [this](https://kyma-project.io/docs/master/root/kyma/#installation-install-kyma-locally) guide.\n      Ensure that you created the local Kubernetes cluster with `10240Mb` memory and `30Gb` disk size.\n      ```\n      ./scripts/minikube.sh --domain \"kyma.local\" --vm-driver \"hyperkit\" --memory 10240Mb --disk-size 30g\n      ```\n\n      Run the following command before triggering the Kyma installation process:\n      ```\n      kubectl -n kyma-installer patch configmap installation-config-overrides -p '{\"data\": {\"global.knative\": \"true\", \"global.kymaEventBus\": \"false\", \"global.natsStreaming.clusterID\": \"knative-nats-streaming\"}}'\n      ```\n      </details>\n      <details>\n      <summary>\n      From sources\n      </summary>\n\n      When you install Kyma locally from sources, add the `--knative` argument to the `run.sh` script. Run this command:\n\n      ```\n      ./run.sh --knative\n      ```\n      </details>\n    </div>\n\n\nThe code renders on `kyma-project.io` as follows:\n\n![](./assets/toggle_in_list.png)\n"},{"order":"04-formatting","title":"Formatting","source":"\nThese are the guidelines for formatting text and using specific elements such as lists, tables, headings, and links. For guidelines regarding the creation of diagrams, see [this document](#diagrams-diagrams).\n\n## Code formatting\n\nIt is important to consistently format items such as code or filenames to quickly distinguish them while reading technical documentation. The following tables outline when to use **bold** font and when to use `code` font:\n\n### Use bold font for these items:\n\nItems       | Examples\n----------- | ----------------------------------------------------------------------\nParameters   | The **env** attribute is optional.\nHTTP headers | The Authorization Proxy validates the JWT token passed in the **Authorization Bearer** request header.\nEvents       | The service publishes an **order.created** event.\nRoles        | Only the users with the **kyma_admin** role can list Pods in the Kyma system Namespaces.\nUI elements  | Click **Subscribe**.\nVariables    | Click **Project** > **{Your Project Name}**.\n\n### Use code font for these items:\n\nItems                     | Examples\n------------------------- | -----------------------------------------------------------------------------------------------\nCode examples             | Get the list of all Pods in a Namespace using the `kubectl get pods -n {namespace}` command.\nValues                    | Set the partial attribute to `true` to perform a partial replacement.\nEndpoints                 | Send a POST request to the `/{tenant}/categories/{categoryId}/media/{mediaId}/commit` endpoint.\nFile names                | Open the `deployment.yaml` file.\nPath names                | Save the file in the `\\services\\repository` folder.\nRepository names          | The file is located in the `Kyma` repository.\nStatus and error codes    | A successful response includes a status code of `200 OK`.\nParameter and value pairs | The controller adds the `env=true` label to all newly created Namespaces.\nMetadata names            | When you create a Markdown document, define its `title` and `type`.\n\n>**NOTE:** When you mention specific configuration files in your documents, consider linking to them instead of just mentioning their names. When you link to a file, use its name without the format extension. See the following example:\n> `To adjust the number of Pods in your Deployment, edit the [deployment](./deployment.yaml) file.`\n\n## Content formatting\n\nFormat the content in an attention-grabbing way. In general, content is easier to read when it is in chunks. Consider breaking up endless paragraphs by using a list or a table. Use action verbs and present tense for headings to engage the reader, and also follow the guidelines for the best way to include links and images. When you include lists, tables, code samples, or images, precede them with a brief explanation of what they describe.\n\n### Panels\n\nPanels are colorful containers that call out important or additional information within a topic. To call attention to a specific note, a word of caution or a tip, use the `>**{TYPE}:**`format, where `{TYPE}` is **NOTE**, **TIP**, or **CAUTION**.\nUse:\n- The blue **NOTE** panel to point to something specific, usually relating to the topic.\n- The red **CAUTION** panel to call attention to something critical that can cause inoperable behavior.\n- The green **TIP** panel to share helpful advice, such as a shortcut to save time.\n\nSee an example:\n\n>**NOTE:** Provision a Public IP for Ingress and a DNS record before you start the installation.\n\n### Ordered and unordered lists\n\nAs you write about your topic, use lists to create visual clarity within your content. List items in a category or in a sequence. Use an ordered list for sequential, instructional steps. Unordered lists are appropriate for items that have no sequential order, such as a list of valid file types. Follow these guidelines:\n* Make list content consistent in structure. For example, make all the bullet points sentences, questions, or sentence fragments, but do not mix types.\n* Punctuate bullet points consistently. If they are sentences, use periods. If they are sentence fragments, do not use periods.\n* Avoid ending bullet points with semicolons or commas.\n* Capitalize the first letter of each bullet point consistently. Capitalize the first letter unless the list items are always lowercased, as with parameters names.\n* Emphasize the beginning of the bullet point to capture the main idea.\n* If readers must perform list items in order, as in a step-by-step procedure, use an ordered list and maintain consistency in structure.\n\n### Tables\n\nAnother effective way to chunk content is to use tables. Use tables when content needs comparison, or as a way to provide information mapping. Think of a table as a list with optional columns useful to provide and organize more information than belongs in a list. Make sure tables are not too long or hard to read, causing the reader to scroll a lot. If possible, break up a long table into multiple tables.\n\nWhen creating a table, centralize the columns that have choice-type values, such as `Yes/No` or `true/false`. See the example:\n```\n| Parameter   |      Required      |  Description |\n|-------------|:------------------:|--------------|\n|             |       Yes/No       |              |\n```\n\n### Headings\nIdeally, headings fit into one line in the generated output. Be concise, but also make sure to adequately describe the main point of the document or a section. Follow these guidelines when writing headings:\n\n* Write headings in sentence case. For example, **Expose a service**.\n* Use action verbs and present tense verbs in headings when possible, especially in tutorials. For example, **Add a document type**.\n* While gerunds are acceptable in body-level content, DO NOT use gerunds in headings. Use **Create a storefront** instead of **Creating a storefront**.\n* Avoid stacked headings, which are headings without body-level content in between. For example, DO NOT use a Heading 2 (H2) to introduce one or more Heading 3s. Instead, add a paragraph after the H2 that describes the main idea of the content in the headings that follow.\n* Do not use small headings, such as Heading 4 (H4) and smaller. Use Heading 1 (H1) for the document title, and Heading 2s (H2) and Heading 3s (H3) to organize the content of the document.\n\n### Links\n\nLinking is a great tool to use to incorporate a lot of content into your document with fewer words. That being said, overuse of linking can cause \"link rot\" when links break, and if a page has more links than content, it is not very pleasing to read. Choose carefully when and how to link by using these best practices.\n\n- Use absolute links to link to other repositories and external sources.\n- Use relative links to link to documents or files located in the same repository.\n- Every link has the potential to go bad over time and the more links you include, the higher the chance that one will break. If something is not central to the subject at hand, is well-known by your audience, or can be found with a simple search, there is no point in linking.\n- Choose the link text carefully. Do not link entire phrases which become overemphatic. Instead, choose the noun, such as an article or specification within the phrase that helps the reader understand where the navigation leads them. You can also use the title of the article or book as the link, but do not include the author and publisher.\n\n>**NOTE:** If you want to make any cross-reference between the documents in the `kyma/docs` folder, read [this](#links-in-docs-links-in-docs) document.\n"},{"order":"05-links-in-docs","title":"Links in docs","source":"\nThese are the guidelines for making cross-references between the documents in the [`kyma/docs`](https://github.com/kyma-project/kyma/tree/master/docs) folder.\n\n>**NOTE:** The linking works only on the [Kyma website](https://kyma-project.io/docs). Currently, the cross-references between [GitHub documentation](https://github.com/kyma-project/kyma/tree/master/docs) is not available.\n\n## Links between documents in the same topic\n\nIf you want to link to another document in the same topic, create a reference using the `#{type}-{title}-{header}` pattern, where:\n- `{type}` is a metadata type of the document that you want to reference.\n- `{title}` is a metadata title of the document that you want to reference.\n- `{header}` is a header located in the document that you want to reference.\n\n>**NOTE:** All variables must consist of lowercase characters separated with dashes (-).\n\nIf the `{type}` doesn't exist, the pattern has the form of `#{title}-{title}-{header}`. If you want to create a reference to the whole `{type}`, use the `#{type}-{type}` pattern.\n\n>**TIP:** You can copy the reference to the documentation directly from the website. See the reference to the Helm Broker **Details** document:\n\n![Same topic reference](./assets/reference-1.png)\n\n### Links to the assets folder\n\nTo add a reference to a YAML, JSON, SVG, PNG, or JPG file located in the `assets` folder in the same topic, use GitHub relative links. For example, write `[Here](./assets/mf-namespaced.yaml) you can find a sample micro front-end entity.` When you click such a link on the `kyma-project.io` website, it opens the file content in the same tab.\n\n## Links between documents in different topics\n\nIf you want to link to a document in a different topic, create a reference using the `/{type-of-topic}/{id}#{type}-{title}-{header}` pattern, where:\n- `{type-of-topic}` is a type of topic that you want to reference. Apart from documents related directly to Kyma, all components have the `components` type of topic. For Kyma, use `root` in place of topic type.\n- `{id}` is an ID of the topic that you want to reference. It is identical with the name of the component. For example, write `helm-broker` or `kyma`.\n- `{type}` is a metadata type of the document that you want to reference.\n- `{title}` is a metadata title of the document that you want to reference.\n- `{header}` is a header located in the document that you want to reference.\n\n>**NOTE:** All variables must consist of lowercase characters separated with dashes (-).\n\nIf the `{type}` doesn't exist, the pattern has the form of `/{type-of-topic}/{id}#{title}-{title}-{header}`. If you want to create a reference to the whole `{type}`, use the `/{type-of-topic}/{id}#{type}-{type}` pattern.\n\n>**TIP:** You can copy the reference to the documentation directly from the website. See the cross-topic references to the Helm Broker **Details** document and to the Kyma **Overview**:\n\n![Different topic reference](./assets/reference-2.png)\n\n![Kyma reference](./assets/reference-3.png)\n\n## Links in documentation toggles\n\nTo link to a document in a documentation toggle, the toggle must start with the `<div tabs name=\"{toggle-name}\">` tag and end with the `</div>` tag, where **name** is a distinctive ID used for linking. To learn more about how to use toggles, read [this](#toggle-toggle) document.\n\nIf you want to link to a document in a documentation toggle, create a reference using `/{type-of-topic}/{id}#{type}-{title}-{header}` pattern as described in the previous sections, and add `--{toggle-name}--{tab-name}--{header}`, where:\n- `{toggle-name}` is a value of the **name** attribute in the `<div>` HTML tag in the toggle that you want to reference.\n- `{tab-name}` is a title of the tab containing the header that you want to reference.\n- `{header}` is a header located in the document that you want to reference.\n\n>**NOTE:** All variables must consist of lowercase characters separated with dashes (-). Change any character that is not a letter or number into a dash (-) and squash consecutive dashes (--) into one (-).\n\nFor example, the **Choose the release to install** heading changes into the `choose-the-release-to-install` header or the **Lorem ipsum dolor sit (amet)** heading becomes the `lorem-ipsum-dolor-sit-amet` header.\n\n### Examples\n\n- Absolute links\n\n  This is an absolute link to a document in a documentatin toggle:\n  ```markdown\n  https://kyma-project.io/docs/root/kyma/#installation-install-kyma-on-a-cluster--provider-installation--gke--choose-the-release-to-install\n  ```\n  In the absolute link example:\n  - `{toggle-name}` is `provider-installation`\n  - `{tab-name}` is `gke`\n  - `{header}` is `choose-the-release-to-install`\n\n\n- Relative links\n\n  To use a recommended relative link to a document in a documentation toggle which is in the same topic, use the following pattern:\n  ```markdown\n  #installation-install-kyma-on-a-cluster--provider-installation--gke--choose-the-release-to-install\n  ```\n"},{"order":"06-release-notes","title":"Release notes","source":"\nInformation in release notes must provide readers with everything they need to know to understand the change in the software. A lot of business decisions are made based on the information in release notes. Therefore, always write from the user's perspective, not the developer's perspective. The content of release notes answers the following questions:\n\n* What has changed because of this feature or resolved issue?\n* How was the behavior different before this release?\n* Are there changes to the UI?\n* Are there changes to the functionality?\n* Does an error message appear?\n* Was the enhancement based upon customer feedback?\n\nBecause the release notes contain critical information and act as an important communication tool, follow these guidelines so that the documentation is informative and consistent. When authoring release notes, follow the [Style and Terminology](#style-and-terminology-style-and-terminology) for many agreed-upon standards. Read [this](https://github.com/kyma-project/website/blob/master/docs/write-blog-posts.md) document to learn how to add the release notes as a blog post on a website.\n\n## Headlines\nA headline is short, interesting, and summarizes your release notes. Write headlines in sentence case.\n\n## Write about new features\nWhen writing about new features, write an enticing paragraph instead of a short, bulleted list. This is an opportunity to market the new feature to customers from a business perspective.\n\n## Write about resolved issues\nWhen writing about resolved issues, don't call them bugs. Use the term **resolved issues** because it has a more positive tone. A bulleted list of resolved issues is okay, but ensure that the descriptions make sense.\n\n## Bulleted lists\nFor ease of reading, use the same sentence structure throughout a bulleted list. For example, the following items match in sentence structure:\n- Feature xyz - This one is really cool.\n- Feature abc - This one is really, really, cool.\n\nDon't add an entry that doesn't match, such as:\n- Feature JKL: it's not so cool\n"},{"order":"07-screenshots","title":"Screenshots","source":"\nAs someone once said, a picture is worth a thousand words. Therefore, whenever you need to illustrate operations performed on the UI, use a screenshot to convey the information visually.\n\nFollow these basic principles when you place screenshots in your content:\n- Do not overuse screenshots and limit visual noise.\n- Do not use directional indicators such as \"above\" and \"below\" to refer to screenshots. Instead, include a brief introduction before each screenshot that describes its purpose and any necessary details.\n- Do not include the mouse pointer in your screenshots, unless it shows a function related to the content.\n- Do not include unnecessary elements, such as the browser toolbar. Include only elements that are relevant for the given content.\n\nFor details on how to format screenshots and their elements in Kyma documents, see the particular document sections.\n\n## Tool\n\nAdjust or capture your screenshots using any tool that outputs high quality images, such as [Snagit](https://www.techsmith.com/screen-capture.html), [Lightshot](https://app.prntscr.com), or [Monosnap](https://www.monosnap.com/welcome). The desired image format is SVG, but PNG and JPG formats are also acceptable.\nUse an online tool such as [TinyPNG](https://tinypng.com/) to compress images and limit the size of each image to 1MB, or smaller.\nIf you want to control the size of the image relative to the screen size, use one of these standard percentages: 100%, 75%, 50%, or 25%.\n\n>**NOTE:** The images keep their original aspect ratio on both the Console UI and the `kyma-project.io` website. However, the maximum width on the website is 860px. Any image that exceeds that limit is resized to the maximum width. \n\nName the file as `{screenshot-name}` and save it under the corresponding `assets` directory.\n\n## Borders\n\nUse **grey** (HEX: #D2D5D9) 1pt border for the screenshot.\n\n## Steps\n\nIf necessary, mark multiple areas or steps on the screenshot using **blue** (HEX: #0A6ED1) round stamps with white numbers.\nExplain the steps under the screenshot with the ordered list.\n\n## Indicators\n\nTo highlight a certain area of your screenshot, use **red** (HEX: #EF2727) 10pt for arrows or boxes.\n\n> **NOTE:** Use arrows and boxes sparingly, only to point to an exceptionally important area of the screenshot. Do not use more than one indicator in one screenshot to avoid visual noise.\n\n## Examples\n\nSee the exemplary screenshots for reference:\n\n* Example 1\n\n![Example 1](./assets/screenshot-example1.png)\n\n* Example 2\n\n![Example 2](./assets/screenshot-example2.png)\n"},{"order":"08-style-and-terminology","title":"Style and terminology","source":"\nThese are the guidelines for the grammar, preferred word choices, and the list of terms to capitalize when writing Kyma documentation. The goal of these guidelines is to have all contributors write in the same way to ensure a uniform flow throughout the whole Kyma documentation.\n\n## Grammar\n\nThese are the generally accepted grammar rules for writing Kyma documentation.\n\n### Active voice\n\nUse active voice whenever possible. Active voice is clear, concise, and it avoids misinterpretation. It is also easier for non-native speakers to understand. Passive voice is indirect, uses more words, and can be misleading because it reverses the logical order of events.\n\n✅ The endpoint path includes your service name.   \n⛔️ Your service name is to be included in the endpoint path.\n\n### Voice and tone\n\nThere are different tones for different types of technical documentation. The documentation can range from instructional to somewhat conversational, but always with the goal of helping users understand how to use the product for practical purposes and, in blogs and release notes, also helping business users understand changes. While writing Kyma documentation, use semi-formal style and imperative mood. The imperative mood tells the reader directly to do something. Use the imperative mood to write instructional documentation such as procedures and tutorials. Other moods can imply optional behavior.\n\n> **NOTE:** Avoid using unnecessary words such as \"please\" or \"remember.\"\n\n✅ Click **Add**.  \n✅ Click the **Add** button.  \n⛔️ Please, click **Add**.    \n⛔️ Remember to click **Add**.\n\n✅ Click **Upload** and select one or more documents.  \n⛔️ If you want to upload a document, you can click **Upload**.\n\n\n### Tenses\n\nUse present tense. In technical writing, present tense is easier to read than past or future tense. Simple verbs are easier to read and understand than complex verbs, such as verbs in the progressive or perfect tense. The more concise and straightforward you are, the better.\n\n✅ If the information does not match, an error message **appears**.  \n⛔️ If the information does not match, an error **will appear**.\n\n### Pronouns\n\nUse the second person and the pronouns \"you,\" \"your,\" and \"yours\" to speak directly to the reader. Do not use the first person pronouns \"we,\" \"us,\" or \"let's.\"\n\n### Contractions\n\nDo not use contractions in the documentation. They may be difficult for non-native English speakers to understand. Specifically, do not use the following:\n\n⛔️ Any \"will\" contractions, such as \"you’ll\" or \"we’ll.\"  \n⛔️ Any \"would\" contractions, such as \"we’d\" or \"you’d.\"   \n⛔️ Any contractions that sound like other words, such as \"they’re\" (there), \"it’s\" (its), or \"you’re\" (your).   \n⛔️ Avoid using contractions for negative imperatives such as \"don’t.\" Instead, use \"do not,\" which has more power.\n\n### Articles\n\nAlways verify the use of the articles \"a\", \"an\", and \"the\" where appropriate. Use \"the\" when you refer to a specific example. Use \"a\" when you refer to something non-specific or hypothetical.\n\n> **NOTE:** Use `Kyma` whenever you refer to the name of our product:   \n✅ Kyma is awesome.  \n⛔️ The Kyma is not awesome.\n\n### Punctuation\n\nUse colons and semicolons sparingly. Use the colon ( : ) to introduce a list of things. The semicolon ( ; ) separates two distinct clauses within one sentence. The phrase after a semicolon is a complete sentence. However, the preferred method is without a colon or semicolon.\n\nUse serial commas. A missing serial comma can create confusion about whether the statement applies to each list item individually, or whether the last two items are connected.\n\n✅ In your request, include the values for the request date, name, and ID.   \n⛔️ In your request, include the values for the request date, name and ID.\n\nAvoid using parenthesis. Use lists instead, to make your sentences as simple as possible.\n\n✅ Consider which tasks, such as unit tests, linting, and compilation, are relevant and necessary for your example.  \n⛔️ The author of each example should consider which tasks (i.e. unit tests, linting and compilation) are relevant and necessary for their example.\n\n## Terminology\n\nHere is the preferred terminology to use in the Kyma documentation:\n\n* Use American English spelling, not British English.   \n  ✅ The **color** of the message changes from blue to red if there are errors.  \n  ⛔️ The **colour** of the message changes from blue to red if there are errors.\n\n* \"application,\" not \"app\"\n* \"repository,\" not \"repo\"\n* \"document,\" not \"doc\"\n* \"as shown in the example,\" not \"below,\" nor \"above\"  \n✅ In your request, supply the values as shown in the example:   \n✅ In your request, supply the values for the following parameters:    \n⛔️ In your request, supply the values as shown below:\n\n* \"backend,\"  not \"back end\" or \"back-end\"\n* \"frontend,\" not \"front end\" or \"front-end\"\n* \"email,\" not \"e-mail\"\n* \"fill in,\" not \"complete\"\n* \"ID,\" not \"id\"\n* \"for example,\" not \"e.g.\"    \nDon't use \"e.g.\" in documentation. Use the words \"for example\" or \"such as\" instead. Don't use \"for example\" in the middle of the sentence.   \n✅ There are many variables in the file. For example, you can configure the host ID.   \n✅ There are some variables that are inherited from the parent process, such as user ID, date, and permissions.   \n⛔️ There are many variables in the file, for example, user ID, that can be configured.  \n\n* \"key-value,\" not \"key/value,\" nor \"key:value\"\n* \"can,\" not \"it is possible\"\n* \"must,\" not \"should\"\n* \"single sign on (SSO),\" not \"single sign-on\"\n* \"typically,\" not \"usually\"\n* \"using,\" not \"via\"\n* \"run,\" not \"execute\"\n* \"API Micro Gateway,\" not \"API Gateway\"\n* \"connect/connection,\" not \"integrate/integration\"\n* \"custom resource,\" not \"Custom Resource\" or \"CustomResource\"\n* \"Application\" to describe an external solution connected to Kyma through the Application Connector, \"application\" to describe software\n\n> **NOTE:** Do not use words such as \"currently\" or \"now\" to indicate that something is in the transitional phase of development. Avoid promising anything and mention only those components and functionalities that are already in use.\n\n### Command line arguments\n\nUse short command line arguments whenever possible.\n\n* `-n`, not `--namespace`\n\n Short command line arguments can differ between the tools as shown in the following example:\n\n* Kubernetes: `kubectl -n` equals `kubectl --namespace`\n* Helm: `helm -n` equals `helm --name`, not `helm --namespace`\n\nIn such a case, explain the context in the document.\n\n## Capitalized terms\n\nThis is the list of the Kubernetes resources capitalized in Kyma documentation. However, if these words are not used in relation to Kubernetes resources, do not capitalize them.\n\n- ConfigMap\n- CronJob\n- CustomResourceDefinition\n- Deployment\n- Function\n- Event\n- Ingress\n- Namespace\n- Node\n- PodPreset\n- Pod\n- Secret\n- ServiceBinding\n- ServiceClass\n- ServiceInstance\n\nAll of the Kyma components, such as the Service Catalog or Service Brokers, are capitalized as well. Whenever you point to the outside sources, do some search to check whether the name of the source starts with a capital letter or not.\n\n>**NOTE:** Kubernetes itself is also capitalized. Do not write it in lowercase or in the abbreviated version.       \n  ✅ Kubernetes  \n  ⛔️ kubernetes   \n  ⛔️ k8s\n\nIn case of any further doubts concerning the style and standards of writing, see [Microsoft Writing Style Guide](https://docs.microsoft.com/en-us/style-guide/welcome/).\n"}]},"navigation":{"get-started":[{"displayName":"Get started","id":"get-started"}],"contributing":[{"displayName":"Contributing","id":"contributing"}],"guidelines":[{"displayName":"Content","id":"content"}]},"manifest":{"get-started":[{"displayName":"Get started","id":"get-started"}],"contributing":[{"displayName":"Contributing","id":"contributing"}],"guidelines":[{"displayName":"Content","id":"content"}]},"assetsPath":"/assets/community/content/docs/assets/","docsType":"guidelines","topic":"content","slidesBanner":{"bannerDuration":5000,"slides":[{"text":"Don't miss the session by Piotr Kopczynski at Helm Summit on September 11 at 15:47.","url":"https://helmsummit2019.sched.com/event/S8sS","startDate":"09/09/2019","endDate":"12/09/2019"}]},"locale":"en"}}}