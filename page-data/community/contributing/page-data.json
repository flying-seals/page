{"componentChunkName":"component---src-views-community-index-tsx","path":"/community/contributing","webpackCompilationHash":"aefb7e842b40c338951f","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"content":{"id":"contributing","displayName":"Contributing","description":"Guidelines how to contribute to Kyma","type":"contributing","docs":[{"order":"README","title":"Overview","source":"\nRead the **Contributing** section to understand the Code of Conduct and contribution rules in Kyma. Also, learn some best practices covering Git workflow."},{"order":"01-code-of-conduct","title":"Code of Conduct","source":"\nThis document makes a reference to the rules of behavior for all contributors and maintainers in the community. All members agree to follow them to foster the growth of the community of tolerance, respect, and mutual understanding.\n\nIn the attempt to adopt the best practices from the most renowned open-source and cloud-native projects, and work closely with the Cloud Native Computing Foundation (CNCF), our community members undertake to follow the rules outlined in the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md). Read it to learn about the harassment-free environment, examples of unacceptable behavior, and the responsibilities of the project maintainers.\n\n>**NOTE:** If you observe any instance of abusive, harassing, or otherwise unacceptable behavior, report it as an issue to the project maintainers specified in the `CODEOWNERS` document.\n"},{"order":"02-contributing","title":"Contributing rules","source":"\nAs a Kyma contributor, you must follow certain guidelines and rules.\n\n## Guidelines\n\nGo to the **Guidelines** section to read about rules and tips for providing [content](/guidelines/content/) and [code](/guidelines/technicalities/) to the Kyma repositories. Also, learn how to create a new [repository](/guidelines/repository/), and how the [release process](/guidelines/release/) looks in Kyma. Make your life easier using various document types [templates](/guidelines/templates/) prepared for those who would like to contribute.\n\n## Documentation types\n\nGo to [this](/guidelines/templates/#overview-overview) document to see an overview of document templates used in specific Kyma repositories. The templates themselves are collected in the [`resources`](https://github.com/kyma-project/community/tree/master/guidelines/templates/resources/) subfolder in the `community` repository.\n\nExtend the list whenever you define a new template for other document types. Make sure to update one of the tables in the [**Document types templates**](/guidelines/templates/#document-types-templates-document-types-templates) document after you add new templates to the [`resources`](https://github.com/kyma-project/community/tree/master/guidelines/templates/resources/) subfolder.\n\n## Agreements and licenses\n\nRead the subsections to learn the details of the agreements to submit and licences to comply with as a Kyma contributor.\n\n### Individual contributor license agreement\n\nAs a Kyma contributor, you must accept the Kyma project's licenses and submit the\n[Individual Contributor License Agreement](https://gist.github.com/CLAassistant/bd1ea8ec8aa0357414e8) before you contribute code or content to any Kyma repository. Kyma maintainers will not accept contributions made without such consent. This applies to all contributors, including those contributing on behalf of a company. If you agree to the content of the Agreement, click the link posted by the CLA assistant as a comment to the pull request (PR). The CLA assistant saves your decision for future contributions and notifies you if there is any change to the CLA in the meantime.\n\n### Corporate contributor license agreement\n\nEmployees of a company who contribute code need to submit one company agreement in addition to the individual agreement above. This is mainly for the protection of the contributing employees.\n\nAn authorized company representative needs to download, fill in, and print\nthe [Corporate Contributor License Agreement](./assets/SAP%20Corporate%20Contributor%20License%20Agreement%20(5-26-15).pdf) form. Scan it and send it to [info@kyma-project.io](mailto:info@kyma-project.io). The form contains a list of employees who are authorized to contribute on behalf of your company. To report any changes on the list, contact [info@kyma-project.io](mailto:info@kyma-project.io).\n\n## Contribution rules\n\nIf you are a contributor, follow these basic rules:\n\n* The contribution workflow in all Kyma repositories bases on the principles of the [GitHub flow](https://guides.github.com/introduction/flow/). Thus, the `master` branch is the most important one. Avoid working directly on it. When you work on new features or bug fixes, work on separate branches.\n* Work on forks of Kyma repositories.\n* You can merge a PR if you receive an approval from at least one code owner from each part of the repository to which you contribute in your PR.\n\nEvery contributor commits to the following agreement:\n\n* In every PR, include a description or a reference to a detailed description of the steps that the maintainer goes through to check if a PR works and does not break any other functionality.\n* Provide clear and descriptive commit messages.\n* Label your PRs.\n* Follow the accepted documentation rules and use appropriate templates.\n* As the creator of the PR, you are responsible for ensuring that the PR follows the correct review and approval flow.\n\n## Contribution process\n\nThis section explains how you can contribute code or content to any Kyma repository, propose an improvement, or report a bug. The contributing process applies both to the members of the Kyma organization and the external contributors.\n\n### Contribute code or content\n\nTo contribute code or content to a given Kyma repository, follow these steps:\n\n1. Make sure that the change is valid and approved. If you are an external contributor, **open a GitHub issue** before you make a contribution.\n2. Fork the Kyma repository that you want to contribute to.\n3. Clone it locally, add a remote upstream repository for the original repository, and set up the `master` branch to track the remote `master` branch from the upstream repository. See the [**Git Workflow**](#git-wokflow-git-wokflow) document to learn how to configure your fork.\n4. Create a new branch out of the local `master` branch of the forked repository.\n5. Commit and push changes to your new branch. Create a clear and descriptive commit message in which you specify what you have changed. See the [**Git workflow**](#git-wokflow-git-wokflow) document for commit message guidelines.\n6. Create a PR from your branch on the forked repository to the `master` branch of the original, upstream repository. Fill in the PR template according to instructions.\n7. Read and accept the Contributor Licence Agreement (CLA).\n8. If there are merge conflicts on your PR, squash your commits and rebase the `master` branch.\n9. In your PR:\n- Provide a reference to any related GitHub issue.\n- Make sure that the [**Allow edits from maintainers**](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) option is selected to allow upstream repository maintainers, and those with the push access to the upstream repository, to commit to your forked branch.\n- Choose at least one `area/{capability}`Â label from the available list and add it to your PR to categorize changes you made. Labels are required to include your PR in the `CHANGELOG.md` file and classify it accordingly.\n10. After you create a PR, relevant CI tests need to complete successfully.\n- If you are a Kyma organization member, all related CI tests run automatically after you create a PR. If a test fails, check the reason by clicking the **Details** button next to the given job on your PR. Make the required changes and the tests rerun. If you want to run a specific test, add the `/test {test-name}` or `/retest {test-name}` comment to your PR. To rerun all failed tests, add the `/retest` comment.\n- If you are an external contributor, contact the repository maintainers specified in the [`CODEOWNERS`](https://github.com/kyma-project/community/blob/master/CODEOWNERS) file to review your PR and add the `/test all` comment to your PR to trigger all tests. A Kyma organization member needs to rerun the tests manually each time you commit new changes to the PR.\n\n11. Wait for the Kyma maintainers to review and approve your PR. The maintainers can approve it, request enhancements to your change, or reject it.\n\n> **NOTE:** The reviewer must check if all related CI tests have completed successfully before approving the PR.\n\n13. When the maintainers approve your change, merge the PR. If you are an external contributor, contact the repository maintainers specified in the `CODEOWNERS` file to merge the PR for you.\n\n### Report an issue\n\nIf you find a bug to report or you want to propose a new feature, go to the GitHub issue tracker of a given repository and create an issue. If you are not certain which repository your bug or feature relates to, raise it on the `kyma` repository.\n\n> **NOTE:** The repository maintainers handle only well-documented, valid issues that have not been reported yet. Before you create one, check if there are no duplicates. Provide all details and include examples. When you report a bug, list the exact steps necessary to reproduce it.\n\nSee the [**Issues workflow**](/governance/#issues-workflow-issues-workflow) document for details on issues triage and processing workflow.\n\n## Maintenance rules\n\nEvery maintainer reviews each contribution according to the rules listed in this document.\n\nAlthough it is the responsibility of the owner of the PR to ensure that the maintainers review and approve the PR, maintainers need to coordinate the overall number of unreviewed and unapproved PRs in their queue, and, if required, take appropriate measures to handle them effectively.\n\nTo learn more about maintainers' responsibilities and rules for appointing new maintainers, and removing the existing ones, refer to the [**Kyma working model**](/governance/#kyma-working-model-kyma-working-model) document.\n\n## Owners\n\nTo identify the owners of particular parts of your repository, see the [`CODEOWNERS`](https://github.com/kyma-project/community/blob/master/CODEOWNERS) file in the root directory.\n"},{"order":"03-git-workflow","title":"Git wokflow","source":"\nThis document is the best practice guide that contains the rules to follow when working with Kyma repositories.\n\n### Basic rules\n\nEach contributor and maintainer in Kyma must follow this workflow:\n\n* Work on forked repositories.\n* Create branches on the fork and avoid working directly on the `master` branch.\n* Squash and rebase your commits before you merge your pull request.\n\n### Benefits\n\nThe unified workflow has the following benefits:\n* It encourages external contribution.\n* The history of commits and merges is clean and readable.\n* There are fewer merge conflicts and, when they appear, they are easier to solve.\n\n## Prepare the fork\n\nA fork is a copy of the repository from which you raise pull requests to propose changes to the original repository.\nThe unified Kyma contribution workflow that bases on forks allows both the members of the Kyma organization and the external contributors to contribute code and content through the same process. This keeps the main repositories clean as contributors create branches only on the forked repositories.\n\n>**NOTE:** This guide aims to explain how to work with forks on your local copy of the repository. In case you are a contributor who suggests minor changes using GitHub UI, it is recommended to use a [Pull bot](https://probot.github.io/apps/pull/). This bot keeps your fork up to date by creating and merging a pull request with latest changes into the master branch of your fork.\n\n### Steps\n\n>**NOTE:** The document refers to the original repository as the upstream repository and to the forked repository as the origin repository.\n\nFork a Kyma repository, clone it locally and configure the remote before you start to contribute.\n\n>**NOTE:** When you use two-factor authentication, generate an [SSH key](https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/) and add it to your GitHub account. Use the SSH address to clone the forked repository.\n\nPerform these steps when you configure the fork for the first time:\n\n1. Fork a repository.\n\nIn GitHub, locate the Kyma repository you want to work on and click the **Fork** button in the upper-right corner of the repository's main page.\n\n2. Clone the fork to your local machine.\n\nTo introduce changes locally, clone the forked repository on your local machine. On GitHub repository's main page, select the **Clone and download** option to copy the fork's HTTPS address. Use either the terminal and the `git clone https://github.com/{your-username}/{your-fork-name}.git` command or the Git GUI to clone the forked repository.  \n\n3. Add a Git remote for the original repository.\n\nConfigure a remote repository that points to the upstream repository. This allows you to synchronize changes you make on the fork with the original repository.\n\nIn the terminal, navigate to the location of your fork and perform the following steps:\n\n-  Run the `git remote -v` command to list the current configured remote repository for your fork.\n\nThe result is as follows:\n\n```\norigin  https://github.com/{your-username}/{your-fork}.git (fetch)\norigin  https://github.com/{your-username}/{your-fork}.git (push)\n```\nSee the example:\n```\norigin\thttps://github.com/i000000/community.git (fetch)\norigin\thttps://github.com/i000000/community.git (push)\n```\n\n- Specify a new remoteÂ upstreamÂ repository to synchronize with the fork:\n\n```\ngit remote add upstream https://github.com/{original-owner}/{original-repository}.git\n```\nSee the example:\n\n```\ngit remote add upstream https://github.com/kyma-project/community.git\n```\n\n- Verify the new upstream repository using the `git remote -v` command.\n\nThe result is as follows:\n\n```\norigin    https://github.com/{your-username}/{your-fork}.git (fetch)\norigin    https://github.com/{your-username}/{your-fork}.git (push)\nupstream  https://github.com/{original-owner}/{original-repository}.git (fetch)\nupstream  https://github.com/{original-owner}/{original-repository}.git (push)\n```\n4. Run the `git fetch --all` command to fetch all remote branches.\n\n5. Set up the local `master` branch to track the remote `master` branch from the upstream repository:\n\n```\ngit branch -u upstream/master master\n```\n\nNow, each time you rebase or check out the `master` branch, you refer to the `master` branch of the upstream repository.\n\nTo verify that your local `master` branch points to the `upstream/master`, run the `git branch -vv` command.\n\nThe result is similar to the following:\n\n```\n* master           c2226e0 [upstream/master] Update the README.md document\n```\n\n## Contribute\n\nAfter you set up your fork, start contributing code and content.\n\nFollow these steps:\n\n1. Create a branch on your fork.\n\n2. Commit changes.\n\nAlways provide clear commit messages to track commit changes easier.\n\n3. Push the changes.\n\nPush the changes to the remote forked repository. Use the Git GUI or the terminal.\n\n>**NOTE:** Before you push local changes, make sure you are on the branch you are currently working on. Do not push any changes from the `master` branch.\n\nIf you push local changes from the terminal to your remote fork for the first time, use this command:\n```\ngit push -u origin {branch-name}\n```\n\nUse the `git push` command to push any further commits made on your local branch to a remote repository.  \n\n4. Open a pull request.\n\nCreate a pull request from the branch of your forked repository to the `master` branch of the upstream repository and wait for the maintainers' review.\n\nIn each pull request:\n\n- Include a description or a reference to a detailed description of the steps that the maintainer goes through to check if the pull request works and does not break any other functionality.\n\n  Subject line:\n  - Include a short description of changes made.\n  - Use the imperative mood.\n  - Limit the line to 50 characters.\n  - Capitalize it.\n  - Do not end the subject line with a period.\n\n  Pull request body:\n  - If you made multiple changes and the changes refer to different files, provide details in the pull request body.\n  - Use the body to explain what and why, rather than how.\n  - Use bullet points for a list of items.\n  - List any side effects or other unintuitive consequences of this change.\n\n- Put references to any related issues at the end of the pull request body. For example, write `Resolves #123`, `Fixes #43`, or `See also #33`.\n- Make sure that the [**Allow edits from maintainers**](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) option is selected to allow upstream repository maintainers, and users with push access to the upstream repository, to commit to your forked branch.\n- Choose at least one `area/{capability}`Â label from the available list and add it to your pull request to categorize changes you made. Labels are required to include your pull request in the `CHANGELOG.md` file, and classify it accordingly.\n\n> **NOTE:** Steps 5 and 6 are optional. Follow them if you have merge conflicts on your pull request.\n\n5. Squash your commits.\n\nFollow these steps:\n\n```\n$ git log # Check the log for the commits history and get the number of your commits that you need to squash. Do not squash commits that are not yours.\n```\nPress `q` to exit the log.\n\n```\n$ git rebase HEAD~{number} -i # Enter the interactive mode to squash the number of commits. For example, to enter interactive mode and squash the last three commits:\n$ git rebase HEAD~3 -i\n ```\n\nLeave the top commit, and squash the remaining ones by changing the `pick` command to `squash`. To change the command, type `cw` and then enter `s` in place of `pick`. Press `esc` to exit the insert mode, move to the line with the next commit, and enter `.` to make the same change there. Repeat the same action with all the remaining commits. When you finish, save the changes and exit the editor by pressing `:wq`.\n\nThis process squashes all your commits into the top one. Now you can adjust the commit message. Enter the insert mode by typing `i` and change the commit message. The first line is the commit subject. If you want to provide more details, add the commit body in the next lines. Always separate the commit subject from the commit body with a blank line. When you finish, press `esc` to exit the insert mode. Then save the changes and exit the editor by typing `:wq`.\n\nSee how to squash your commits step-by-step in this video:\n\n![Squash](./assets/squash.gif)\n\n6. Rebase the `master` branch.\n\nAfter you squash commits on your branch into one commit, reapply it on the top of the `master` branch. Follow this process:\n\n```\n$ git checkout master # Switch to the master branch.\n$ git pull # Update the master branch by pulling all changes.\n$ git checkout {branch-name} # Switch back to your branch.\n$ git rebase master # Reapply commits on the top of the master branch.\n$ git push -f # Update your remote branch with the local changes.\n```\n\n> **NOTE:** When you use the `git push-f` command, make sure you do not work on a branch simultaneously with another person.\n\n7. Merge your pull request.\n\nUse GitHub to merge the pull request. If you are an external contributor, contact the repository maintainers specified in the `CODEOWNERS` file to do the merge.\n\n>**NOTE:** If there are at least two contributors who add commits to the pull request, contact the repository administrators to enable the **Rebase and merge** option temporarily. It allows you to merge the pull request with the number of commits that corresponds to the number of its contributors.\n\n## Keep your branch up to date\n\nPerform these actions if you work on a branch for a long period of time and you want to update it locally with changes from the upstream repository.\n\nSystematically incorporate changes from the master branch into your branch. To keep your branch up to date, use the `git rebase master` command as described in the following flow:\n\n```\n$ git checkout master # Switch to the master branch.\n$ git pull # Update the master branch by pulling all changes.\n$ git checkout {branch-name} # Switch back to your branch.\n$ git rebase master # Reapply commits on the top of the master branch.\n```\n\nSee how to rebase the `master` branch step-by-step in this video:\n\n![Rebase](./assets/rebase.gif)\n\n>**NOTE:** Do not merge the `master` branch into another branch as it can make latter rebase not feasible.\n"}]},"navigation":{"get-started":[{"displayName":"Get started","id":"get-started"}],"contributing":[{"displayName":"Contributing","id":"contributing"}],"guidelines":[{"displayName":"Content","id":"content"}]},"manifest":{"get-started":[{"displayName":"Get started","id":"get-started"}],"contributing":[{"displayName":"Contributing","id":"contributing"}],"guidelines":[{"displayName":"Content","id":"content"}]},"assetsPath":"/assets/community/contributing/docs/assets/","docsType":"contributing","topic":"contributing","slidesBanner":{"bannerDuration":5000,"slides":[{"text":"Don't miss the session by Piotr Kopczynski at Helm Summit on September 11 at 15:47.","url":"https://helmsummit2019.sched.com/event/S8sS","startDate":"09/09/2019","endDate":"12/09/2019"}]},"locale":"en"}}}